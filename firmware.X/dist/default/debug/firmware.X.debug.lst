

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed May 16 20:05:49 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F716
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	intentry,global,class=CODE,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	swtext1,local,class=CONST,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	swtext2,local,class=CONST,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    22                           	dabs	1,0x7E,2
    23  0000                     
    24                           ; Version 1.45
    25                           ; Generated 16/11/2017 GMT
    26                           ; 
    27                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC16F716 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     	;# 
    59  0001                     	;# 
    60  0002                     	;# 
    61  0003                     	;# 
    62  0004                     	;# 
    63  0005                     	;# 
    64  0006                     	;# 
    65  0006                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  000E                     	;# 
    70  000E                     	;# 
    71  000F                     	;# 
    72  0010                     	;# 
    73  0011                     	;# 
    74  0012                     	;# 
    75  0015                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0017                     	;# 
    79  0018                     	;# 
    80  0019                     	;# 
    81  001E                     	;# 
    82  001F                     	;# 
    83  0081                     	;# 
    84  0085                     	;# 
    85  0086                     	;# 
    86  0086                     	;# 
    87  008C                     	;# 
    88  008E                     	;# 
    89  0092                     	;# 
    90  009F                     	;# 
    91  0000                     	;# 
    92  0001                     	;# 
    93  0002                     	;# 
    94  0003                     	;# 
    95  0004                     	;# 
    96  0005                     	;# 
    97  0006                     	;# 
    98  0006                     	;# 
    99  000A                     	;# 
   100  000B                     	;# 
   101  000C                     	;# 
   102  000E                     	;# 
   103  000E                     	;# 
   104  000F                     	;# 
   105  0010                     	;# 
   106  0011                     	;# 
   107  0012                     	;# 
   108  0015                     	;# 
   109  0015                     	;# 
   110  0016                     	;# 
   111  0017                     	;# 
   112  0018                     	;# 
   113  0019                     	;# 
   114  001E                     	;# 
   115  001F                     	;# 
   116  0081                     	;# 
   117  0085                     	;# 
   118  0086                     	;# 
   119  0086                     	;# 
   120  008C                     	;# 
   121  008E                     	;# 
   122  0092                     	;# 
   123  009F                     	;# 
   124  0000                     	;# 
   125  0001                     	;# 
   126  0002                     	;# 
   127  0003                     	;# 
   128  0004                     	;# 
   129  0005                     	;# 
   130  0006                     	;# 
   131  0006                     	;# 
   132  000A                     	;# 
   133  000B                     	;# 
   134  000C                     	;# 
   135  000E                     	;# 
   136  000E                     	;# 
   137  000F                     	;# 
   138  0010                     	;# 
   139  0011                     	;# 
   140  0012                     	;# 
   141  0015                     	;# 
   142  0015                     	;# 
   143  0016                     	;# 
   144  0017                     	;# 
   145  0018                     	;# 
   146  0019                     	;# 
   147  001E                     	;# 
   148  001F                     	;# 
   149  0081                     	;# 
   150  0085                     	;# 
   151  0086                     	;# 
   152  0086                     	;# 
   153  008C                     	;# 
   154  008E                     	;# 
   155  0092                     	;# 
   156  009F                     	;# 
   157                           
   158                           	psect	idataBANK0
   159  01E6                     __pidataBANK0:	
   160                           
   161                           ;initializer for _move_leds
   162  01E6  3401               	retlw	1
   163  0006                     _PORTB	set	6
   164  0005                     _PORTA	set	5
   165  000B                     _INTCONbits	set	11
   166  0010                     _T1CONbits	set	16
   167  0006                     _PORTBbits	set	6
   168  000C                     _PIR1bits	set	12
   169  000E                     _TMR1L	set	14
   170  000F                     _TMR1H	set	15
   171  0086                     _TRISB	set	134
   172  0085                     _TRISA	set	133
   173  008C                     _PIE1bits	set	140
   174  0086                     _TRISBbits	set	134
   175  0433                     _TRISB3	set	1075
   176  042B                     _TRISA3	set	1067
   177  042A                     _TRISA2	set	1066
   178  0428                     _TRISA0	set	1064
   179                           
   180                           	psect	cinit
   181  0010                     start_initialization:	
   182                           ; #config settings
   183                           
   184  0010                     __initialization:	
   185                           
   186                           ; Initialize objects allocated to BANK0
   187  0010  21E6               	fcall	__pidataBANK0	;fetch initializer
   188  0011  00A8               	movwf	__pdataBANK0& (0+127)
   189                           
   190                           ; Clear objects allocated to BANK0
   191  0012  01A0               	clrf	__pbssBANK0& (0+127)
   192  0013  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   193  0014  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   194  0015  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   195  0016  01A4               	clrf	(__pbssBANK0+4)& (0+127)
   196  0017  01A5               	clrf	(__pbssBANK0+5)& (0+127)
   197  0018  01A6               	clrf	(__pbssBANK0+6)& (0+127)
   198  0019  01A7               	clrf	(__pbssBANK0+7)& (0+127)
   199                           
   200                           ; Clear objects allocated to COMMON
   201  001A  01FD               	clrf	__pbssCOMMON& (0+127)
   202  001B                     end_of_initialization:	
   203                           ;End of C runtime variable initialization code
   204                           
   205  001B                     __end_of__initialization:	
   206  001B  0183               	clrf	3
   207  001C  29E4               	ljmp	_main	;jump to C main() function
   208                           
   209                           	psect	bssCOMMON
   210  007D                     __pbssCOMMON:	
   211  007D                     timer1_interrupt_decoder@state_timer:	
   212  007D                     	ds	1
   213                           
   214                           	psect	bssBANK0
   215  0020                     __pbssBANK0:	
   216  0020                     _ir_data:	
   217  0020                     	ds	4
   218  0024                     timer0_interrupt@pos:	
   219  0024                     	ds	1
   220  0025                     timer1_interrupt_decoder@bit_count:	
   221  0025                     	ds	1
   222  0026                     timer1_interrupt_decoder@decoder_state:	
   223  0026                     	ds	1
   224  0027                     _ir_data_valid:	
   225  0027                     	ds	1
   226                           
   227                           	psect	dataBANK0
   228  0028                     __pdataBANK0:	
   229  0028                     _move_leds:	
   230  0028                     	ds	1
   231                           
   232                           	psect	cstackCOMMON
   233  0071                     __pcstackCOMMON:	
   234  0071                     ?_timer0_interrupt:	
   235  0071                     ?_timer1_interrupt_decoder:	
   236                           ; 1 bytes @ 0x0
   237                           
   238  0071                     ??_timer1_interrupt_decoder:	
   239                           ; 1 bytes @ 0x0
   240                           
   241  0071                     ?_setup_ir_decoder:	
   242                           ; 1 bytes @ 0x0
   243                           
   244  0071                     ?_isr:	
   245                           ; 1 bytes @ 0x0
   246                           
   247  0071                     ?_main:	
   248                           ; 1 bytes @ 0x0
   249                           
   250  0071                     ?_all_off:	
   251                           ; 1 bytes @ 0x0
   252                           
   253  0071                     ??_all_off:	
   254                           ; 1 bytes @ 0x0
   255                           
   256  0071                     ?_leda_on:	
   257                           ; 1 bytes @ 0x0
   258                           
   259  0071                     ?_ledb_on:	
   260                           ; 1 bytes @ 0x0
   261                           
   262  0071                     leda_on@dir:	
   263                           ; 1 bytes @ 0x0
   264                           
   265  0071                     ledb_on@dir:	
   266                           ; 1 bytes @ 0x0
   267                           
   268                           
   269                           ; 1 bytes @ 0x0
   270  0071                     	ds	1
   271  0072                     ??_leda_on:	
   272  0072                     ??_ledb_on:	
   273                           ; 1 bytes @ 0x1
   274                           
   275                           
   276                           ; 1 bytes @ 0x1
   277  0072                     	ds	2
   278  0074                     leda_on@pos:	
   279  0074                     ledb_on@pos:	
   280                           ; 1 bytes @ 0x3
   281                           
   282                           
   283                           ; 1 bytes @ 0x3
   284  0074                     	ds	1
   285  0075                     ??_timer0_interrupt:	
   286                           
   287                           ; 1 bytes @ 0x4
   288  0075                     	ds	3
   289  0078                     ??_isr:	
   290                           
   291                           ; 1 bytes @ 0x7
   292  0078                     	ds	5
   293                           
   294                           	psect	cstackBANK0
   295  0000                     __pcstackBANK0:	
   296  0000                     ??_setup_ir_decoder:	
   297  0000                     ??_main:	
   298                           ; 1 bytes @ 0x0
   299                           
   300                           
   301                           	psect	maintext
   302  01E4                     __pmaintext:	
   303                           ; 1 bytes @ 0x0
   304 ;;
   305 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   306 ;;
   307 ;; *************** function _main *****************
   308 ;; Defined at:
   309 ;;		line 28 in file "main.c"
   310 ;; Parameters:    Size  Location     Type
   311 ;;		None
   312 ;; Auto vars:     Size  Location     Type
   313 ;;		None
   314 ;; Return value:  Size  Location     Type
   315 ;;                  1    wreg      void 
   316 ;; Registers used:
   317 ;;		wreg, status,2, status,0, pclath, cstack
   318 ;; Tracked objects:
   319 ;;		On entry : B00/0
   320 ;;		On exit  : 0/0
   321 ;;		Unchanged: 0/0
   322 ;; Data sizes:     COMMON   BANK0   BANK1
   323 ;;      Params:         0       0       0
   324 ;;      Locals:         0       0       0
   325 ;;      Temps:          0       0       0
   326 ;;      Totals:         0       0       0
   327 ;;Total ram usage:        0 bytes
   328 ;; Hardware stack levels required when called:    4
   329 ;; This function calls:
   330 ;;		_setup_ir_decoder
   331 ;; This function is called by:
   332 ;;		Startup code after reset
   333 ;; This function uses a non-reentrant model
   334 ;;
   335                           
   336                           
   337                           ;psect for function _main
   338  01E4                     _main:	
   339                           
   340                           ;main.c: 29: setup_ir_decoder();
   341                           
   342                           ;incstack = 0
   343                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   344  01E4  21C6               	fcall	_setup_ir_decoder
   345  01E5                     l92:	
   346                           ;main.c: 31: for(;;){}
   347                           
   348  01E5  29E5               	goto	l92
   349  01E6                     __end_of_main:	
   350                           
   351                           	psect	text1
   352  01C6                     __ptext1:	
   353 ;; *************** function _setup_ir_decoder *****************
   354 ;; Defined at:
   355 ;;		line 139 in file "ir_decoder.c"
   356 ;; Parameters:    Size  Location     Type
   357 ;;		None
   358 ;; Auto vars:     Size  Location     Type
   359 ;;		None
   360 ;; Return value:  Size  Location     Type
   361 ;;                  1    wreg      void 
   362 ;; Registers used:
   363 ;;		wreg
   364 ;; Tracked objects:
   365 ;;		On entry : 0/0
   366 ;;		On exit  : 0/0
   367 ;;		Unchanged: 0/0
   368 ;; Data sizes:     COMMON   BANK0   BANK1
   369 ;;      Params:         0       0       0
   370 ;;      Locals:         0       0       0
   371 ;;      Temps:          0       0       0
   372 ;;      Totals:         0       0       0
   373 ;;Total ram usage:        0 bytes
   374 ;; Hardware stack levels used:    1
   375 ;; Hardware stack levels required when called:    3
   376 ;; This function calls:
   377 ;;		Nothing
   378 ;; This function is called by:
   379 ;;		_main
   380 ;; This function uses a non-reentrant model
   381 ;;
   382                           
   383                           
   384                           ;psect for function _setup_ir_decoder
   385  01C6                     _setup_ir_decoder:	
   386                           
   387                           ;ir_decoder.c: 141: TRISBbits.TRISB0 = 1;
   388                           
   389                           ;incstack = 0
   390                           ; Regs used in _setup_ir_decoder: [wreg]
   391  01C6  1683               	bsf	3,5	;RP0=1, select bank1
   392  01C7  1406               	bsf	6,0	;volatile
   393                           
   394                           ;ir_decoder.c: 143: T1CONbits.T1OSCEN = 1;
   395  01C8  1283               	bcf	3,5	;RP0=0, select bank0
   396  01C9  1590               	bsf	16,3	;volatile
   397                           
   398                           ;ir_decoder.c: 144: T1CONbits.T1SYNC = 1;
   399  01CA  1510               	bsf	16,2	;volatile
   400                           
   401                           ;ir_decoder.c: 145: T1CONbits.TMR1ON = 1;
   402  01CB  1410               	bsf	16,0	;volatile
   403                           
   404                           ;ir_decoder.c: 146: PIE1bits.TMR1IE = 1;
   405  01CC  1683               	bsf	3,5	;RP0=1, select bank1
   406  01CD  140C               	bsf	12,0	;volatile
   407                           
   408                           ;ir_decoder.c: 147: INTCONbits.PEIE = 1;
   409  01CE  170B               	bsf	11,6	;volatile
   410                           
   411                           ;ir_decoder.c: 148: INTCONbits.GIE = 1;
   412  01CF  178B               	bsf	11,7	;volatile
   413                           
   414                           ;ir_decoder.c: 149: do { TMR1H = 255; TMR1L = (255-140); PIR1bits.TMR1IF = 0; } while(0)
      +                          ;
   415  01D0  30FF               	movlw	255
   416  01D1  1283               	bcf	3,5	;RP0=0, select bank0
   417  01D2  008F               	movwf	15	;volatile
   418  01D3  3073               	movlw	115
   419  01D4  008E               	movwf	14	;volatile
   420  01D5  100C               	bcf	12,0	;volatile
   421  01D6  0008               	return
   422  01D7                     __end_of_setup_ir_decoder:	
   423                           
   424                           	psect	text2
   425  0188                     __ptext2:	
   426 ;; *************** function _isr *****************
   427 ;; Defined at:
   428 ;;		line 15 in file "main.c"
   429 ;; Parameters:    Size  Location     Type
   430 ;;		None
   431 ;; Auto vars:     Size  Location     Type
   432 ;;		None
   433 ;; Return value:  Size  Location     Type
   434 ;;                  1    wreg      void 
   435 ;; Registers used:
   436 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   437 ;; Tracked objects:
   438 ;;		On entry : 0/0
   439 ;;		On exit  : 0/0
   440 ;;		Unchanged: 0/0
   441 ;; Data sizes:     COMMON   BANK0   BANK1
   442 ;;      Params:         0       0       0
   443 ;;      Locals:         0       0       0
   444 ;;      Temps:          5       0       0
   445 ;;      Totals:         5       0       0
   446 ;;Total ram usage:        5 bytes
   447 ;; Hardware stack levels used:    1
   448 ;; Hardware stack levels required when called:    2
   449 ;; This function calls:
   450 ;;		_timer0_interrupt
   451 ;;		_timer1_interrupt_decoder
   452 ;; This function is called by:
   453 ;;		Interrupt level 1
   454 ;; This function uses a non-reentrant model
   455 ;;
   456                           
   457                           
   458                           ;psect for function _isr
   459  0188                     _isr:	
   460                           
   461                           ;main.c: 16: if (ir_data_valid) {
   462  0188  0827               	movf	_ir_data_valid,w
   463  0189  1903               	btfsc	3,2
   464  018A  2990               	goto	i1l884
   465                           
   466                           ;main.c: 17: move_leds ^= 1;
   467  018B  3001               	movlw	1
   468  018C  00F8               	movwf	??_isr
   469  018D  0878               	movf	??_isr,w
   470  018E  06A8               	xorwf	_move_leds,f
   471                           
   472                           ;main.c: 18: ir_data_valid = 0;
   473  018F  01A7               	clrf	_ir_data_valid
   474  0190                     i1l884:	
   475                           
   476                           ;main.c: 19: }
   477                           ;main.c: 20: if (PIR1bits.TMR1IF && PIE1bits.TMR1IE) {
   478  0190  1C0C               	btfss	12,0	;volatile
   479  0191  2996               	goto	i1l890
   480  0192  1683               	bsf	3,5	;RP0=1, select bank1
   481  0193  1C0C               	btfss	12,0	;volatile
   482  0194  2996               	goto	i1l890
   483                           
   484                           ;main.c: 21: timer1_interrupt_decoder();
   485  0195  201D               	fcall	_timer1_interrupt_decoder
   486  0196                     i1l890:	
   487                           
   488                           ;main.c: 22: }
   489                           ;main.c: 23: if (INTCONbits.T0IF && move_leds) {
   490  0196  1D0B               	btfss	11,2	;volatile
   491  0197  299D               	goto	i1l87
   492  0198  1283               	bcf	3,5	;RP0=0, select bank0
   493  0199  0828               	movf	_move_leds,w
   494  019A  1903               	btfsc	3,2
   495  019B  299D               	goto	i1l87
   496                           
   497                           ;main.c: 24: timer0_interrupt();
   498  019C  20E8               	fcall	_timer0_interrupt
   499  019D                     i1l87:	
   500  019D  087C               	movf	??_isr+4,w
   501  019E  1283               	bcf	3,5	;RP0=0, select bank0
   502  019F  00FF               	movwf	127
   503  01A0  087B               	movf	??_isr+3,w
   504  01A1  008A               	movwf	10
   505  01A2  087A               	movf	??_isr+2,w
   506  01A3  0084               	movwf	4
   507  01A4  0E79               	swapf	(??_isr+1)^(0+-128),w
   508  01A5  0083               	movwf	3
   509  01A6  0EFE               	swapf	126,f
   510  01A7  0E7E               	swapf	126,w
   511  01A8  0009               	retfie
   512  01A9                     __end_of_isr:	
   513                           
   514                           	psect	intentry
   515  0004                     __pintentry:	
   516                           ;incstack = 0
   517                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   518                           
   519  0004                     interrupt_function:	
   520  007E                     saved_w	set	btemp
   521  0004  00FE               	movwf	btemp
   522  0005  0E03               	swapf	3,w
   523  0006  00F9               	movwf	??_isr+1
   524  0007  0804               	movf	4,w
   525  0008  00FA               	movwf	??_isr+2
   526  0009  080A               	movf	10,w
   527  000A  00FB               	movwf	??_isr+3
   528  000B  1283               	bcf	3,5	;RP0=0, select bank0
   529  000C  087F               	movf	btemp+1,w
   530  000D  00FC               	movwf	??_isr+4
   531  000E  2988               	ljmp	_isr
   532                           
   533                           	psect	text3
   534  001D                     __ptext3:	
   535 ;; *************** function _timer1_interrupt_decoder *****************
   536 ;; Defined at:
   537 ;;		line 48 in file "ir_decoder.c"
   538 ;; Parameters:    Size  Location     Type
   539 ;;		None
   540 ;; Auto vars:     Size  Location     Type
   541 ;;		None
   542 ;; Return value:  Size  Location     Type
   543 ;;                  1    wreg      void 
   544 ;; Registers used:
   545 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   546 ;; Tracked objects:
   547 ;;		On entry : 0/0
   548 ;;		On exit  : 0/0
   549 ;;		Unchanged: 0/0
   550 ;; Data sizes:     COMMON   BANK0   BANK1
   551 ;;      Params:         0       0       0
   552 ;;      Locals:         0       0       0
   553 ;;      Temps:          7       0       0
   554 ;;      Totals:         7       0       0
   555 ;;Total ram usage:        7 bytes
   556 ;; Hardware stack levels used:    1
   557 ;; This function calls:
   558 ;;		Nothing
   559 ;; This function is called by:
   560 ;;		_isr
   561 ;; This function uses a non-reentrant model
   562 ;;
   563                           
   564                           
   565                           ;psect for function _timer1_interrupt_decoder
   566  001D                     _timer1_interrupt_decoder:	
   567                           
   568                           ;incstack = 0
   569                           ; Regs used in _timer1_interrupt_decoder: [wreg-fsr0h+status,2+status,0]
   570                           ;ir_decoder.c: 50: static ir_decoder_state_t decoder_state = STATE_IDLE;
   571                           ;ir_decoder.c: 51: static uint8_t bit_count = 0;
   572                           ;ir_decoder.c: 52: static uint8_t state_timer = 0;
   573                           ;ir_decoder.c: 54: do { TMR1H = 255; TMR1L = (255-140); PIR1bits.TMR1IF = 0; } while(0);
   574  001D  30FF               	movlw	255
   575  001E  1283               	bcf	3,5	;RP0=0, select bank0
   576  001F  008F               	movwf	15	;volatile
   577  0020  3073               	movlw	115
   578  0021  008E               	movwf	14	;volatile
   579  0022  100C               	bcf	12,0	;volatile
   580                           
   581                           ;ir_decoder.c: 57: if(ir_data_valid)
   582  0023  0827               	movf	_ir_data_valid,w
   583  0024  1D03               	btfss	3,2
   584  0025  0008               	return
   585  0026  28DC               	goto	i1l838
   586  0027                     i1l34:	
   587                           ;ir_decoder.c: 61: case STATE_IDLE:
   588                           
   589                           ;ir_decoder.c: 60: switch (decoder_state) {
   590                           
   591                           ;ir_decoder.c: 58: return;
   592                           
   593                           
   594                           ;ir_decoder.c: 63: if (PORTBbits.RB0)
   595  0027  1806               	btfsc	6,0	;volatile
   596  0028  0008               	return
   597                           
   598                           ;ir_decoder.c: 65: decoder_state = STATE_START;
   599                           
   600                           ;ir_decoder.c: 64: return;
   601  0029  01A6               	clrf	timer1_interrupt_decoder@decoder_state
   602  002A  0AA6               	incf	timer1_interrupt_decoder@decoder_state,f
   603                           
   604                           ;ir_decoder.c: 66: state_timer = 1;
   605  002B  01FD               	clrf	timer1_interrupt_decoder@state_timer
   606  002C  0AFD               	incf	timer1_interrupt_decoder@state_timer,f
   607                           
   608                           ;ir_decoder.c: 67: bit_count = 0;
   609  002D  01A5               	clrf	timer1_interrupt_decoder@bit_count
   610                           
   611                           ;ir_decoder.c: 68: return;
   612  002E  0008               	return
   613  002F                     i1l36:	
   614                           ;ir_decoder.c: 69: case STATE_START:
   615                           
   616                           
   617                           ;ir_decoder.c: 71: if (!PORTBbits.RB0) {
   618  002F  1806               	btfsc	6,0	;volatile
   619  0030  2836               	goto	i1l758
   620                           
   621                           ;ir_decoder.c: 72: state_timer++;
   622  0031  3001               	movlw	1
   623  0032  00F1               	movwf	??_timer1_interrupt_decoder
   624  0033  0871               	movf	??_timer1_interrupt_decoder,w
   625  0034  07FD               	addwf	timer1_interrupt_decoder@state_timer,f
   626                           
   627                           ;ir_decoder.c: 73: return;
   628  0035  0008               	return
   629  0036                     i1l758:	
   630                           
   631                           ;ir_decoder.c: 74: }
   632                           ;ir_decoder.c: 76: if (((((9000/140)-2) <= ((state_timer))) && (((state_timer)) <= ((900
      +                          0/140)+2)))) {
   633  0036  303E               	movlw	62
   634  0037  027D               	subwf	timer1_interrupt_decoder@state_timer,w
   635  0038  1C03               	skipc
   636  0039  2844               	goto	i1l768
   637  003A  3043               	movlw	67
   638  003B  027D               	subwf	timer1_interrupt_decoder@state_timer,w
   639  003C  1803               	skipnc
   640  003D  2844               	goto	i1l768
   641                           
   642                           ;ir_decoder.c: 77: decoder_state = STATE_START_GAP;
   643  003E  3002               	movlw	2
   644  003F  00F1               	movwf	??_timer1_interrupt_decoder
   645  0040  0871               	movf	??_timer1_interrupt_decoder,w
   646  0041  00A6               	movwf	timer1_interrupt_decoder@decoder_state
   647                           
   648                           ;ir_decoder.c: 78: state_timer=0;
   649  0042  01FD               	clrf	timer1_interrupt_decoder@state_timer
   650                           
   651                           ;ir_decoder.c: 79: return;
   652  0043  0008               	return
   653  0044                     i1l768:	
   654                           
   655                           ;ir_decoder.c: 80: }
   656                           ;ir_decoder.c: 82: decoder_state = STATE_IDLE;
   657  0044  01A6               	clrf	timer1_interrupt_decoder@decoder_state
   658                           
   659                           ;ir_decoder.c: 83: return;
   660  0045  0008               	return
   661  0046                     i1l39:	
   662                           ;ir_decoder.c: 84: case STATE_START_GAP:
   663                           
   664                           
   665                           ;ir_decoder.c: 86: if (PORTBbits.RB0) {
   666  0046  1C06               	btfss	6,0	;volatile
   667  0047  284D               	goto	i1l776
   668                           
   669                           ;ir_decoder.c: 87: state_timer++;
   670  0048  3001               	movlw	1
   671  0049  00F1               	movwf	??_timer1_interrupt_decoder
   672  004A  0871               	movf	??_timer1_interrupt_decoder,w
   673  004B  07FD               	addwf	timer1_interrupt_decoder@state_timer,f
   674                           
   675                           ;ir_decoder.c: 88: return;
   676  004C  0008               	return
   677  004D                     i1l776:	
   678                           
   679                           ;ir_decoder.c: 89: }
   680                           ;ir_decoder.c: 90: if (!((((4500/140)-2) <= ((state_timer))) && (((state_timer)) <= ((45
      +                          00/140)+2)))) {
   681  004D  301E               	movlw	30
   682  004E  027D               	subwf	timer1_interrupt_decoder@state_timer,w
   683  004F  1C03               	skipc
   684  0050  2855               	goto	i1l780
   685  0051  3023               	movlw	35
   686  0052  027D               	subwf	timer1_interrupt_decoder@state_timer,w
   687  0053  1C03               	skipc
   688  0054  2857               	goto	i1l784
   689  0055                     i1l780:	
   690                           
   691                           ;ir_decoder.c: 91: decoder_state = STATE_IDLE;
   692  0055  01A6               	clrf	timer1_interrupt_decoder@decoder_state
   693                           
   694                           ;ir_decoder.c: 92: return;
   695  0056  0008               	return
   696  0057                     i1l784:	
   697                           
   698                           ;ir_decoder.c: 93: }
   699                           ;ir_decoder.c: 95: state_timer = 0;
   700  0057  01FD               	clrf	timer1_interrupt_decoder@state_timer
   701                           
   702                           ;ir_decoder.c: 96: decoder_state = STATE_BURST;
   703  0058  3003               	movlw	3
   704  0059  00F1               	movwf	??_timer1_interrupt_decoder
   705  005A  0871               	movf	??_timer1_interrupt_decoder,w
   706  005B  00A6               	movwf	timer1_interrupt_decoder@decoder_state
   707                           
   708                           ;ir_decoder.c: 97: return;
   709  005C  0008               	return
   710  005D                     i1l44:	
   711                           ;ir_decoder.c: 98: case STATE_BURST:
   712                           
   713                           
   714                           ;ir_decoder.c: 99: if (!PORTBbits.RB0) {
   715  005D  1806               	btfsc	6,0	;volatile
   716  005E  2864               	goto	i1l794
   717                           
   718                           ;ir_decoder.c: 100: state_timer++;
   719  005F  3001               	movlw	1
   720  0060  00F1               	movwf	??_timer1_interrupt_decoder
   721  0061  0871               	movf	??_timer1_interrupt_decoder,w
   722  0062  07FD               	addwf	timer1_interrupt_decoder@state_timer,f
   723                           
   724                           ;ir_decoder.c: 101: return;
   725  0063  0008               	return
   726  0064                     i1l794:	
   727                           
   728                           ;ir_decoder.c: 102: }
   729                           ;ir_decoder.c: 104: if (!((((562/140)-2) <= ((state_timer))) && (((state_timer)) <= ((56
      +                          2/140)+2)))) {
   730  0064  3002               	movlw	2
   731  0065  027D               	subwf	timer1_interrupt_decoder@state_timer,w
   732  0066  1C03               	skipc
   733  0067  286C               	goto	i1l798
   734  0068  3007               	movlw	7
   735  0069  027D               	subwf	timer1_interrupt_decoder@state_timer,w
   736  006A  1C03               	skipc
   737  006B  286E               	goto	i1l800
   738  006C                     i1l798:	
   739                           
   740                           ;ir_decoder.c: 105: decoder_state = STATE_IDLE;
   741  006C  01A6               	clrf	timer1_interrupt_decoder@decoder_state
   742                           
   743                           ;ir_decoder.c: 106: } else {
   744  006D  0008               	return
   745  006E                     i1l800:	
   746                           
   747                           ;ir_decoder.c: 107: decoder_state = STATE_GAP;
   748  006E  3004               	movlw	4
   749  006F  00F1               	movwf	??_timer1_interrupt_decoder
   750  0070  0871               	movf	??_timer1_interrupt_decoder,w
   751  0071  00A6               	movwf	timer1_interrupt_decoder@decoder_state
   752                           
   753                           ;ir_decoder.c: 108: state_timer = 0;
   754  0072  01FD               	clrf	timer1_interrupt_decoder@state_timer
   755                           
   756                           ;ir_decoder.c: 109: }
   757                           ;ir_decoder.c: 110: return;
   758  0073  0008               	return
   759  0074                     i1l50:	
   760                           ;ir_decoder.c: 111: case STATE_GAP:
   761                           
   762                           
   763                           ;ir_decoder.c: 112: if (PORTBbits.RB0) {
   764  0074  1C06               	btfss	6,0	;volatile
   765  0075  287B               	goto	i1l810
   766                           
   767                           ;ir_decoder.c: 113: state_timer++;
   768  0076  3001               	movlw	1
   769  0077  00F1               	movwf	??_timer1_interrupt_decoder
   770  0078  0871               	movf	??_timer1_interrupt_decoder,w
   771  0079  07FD               	addwf	timer1_interrupt_decoder@state_timer,f
   772                           
   773                           ;ir_decoder.c: 114: return;
   774  007A  0008               	return
   775  007B                     i1l810:	
   776                           
   777                           ;ir_decoder.c: 115: }
   778                           ;ir_decoder.c: 116: if (((((562/140)-2) <= ((state_timer))) && (((state_timer)) <= ((562
      +                          /140)+2)))) {
   779  007B  3002               	movlw	2
   780  007C  027D               	subwf	timer1_interrupt_decoder@state_timer,w
   781  007D  1C03               	skipc
   782  007E  28A3               	goto	i1l816
   783  007F  3007               	movlw	7
   784  0080  027D               	subwf	timer1_interrupt_decoder@state_timer,w
   785  0081  1803               	skipnc
   786  0082  28A3               	goto	i1l816
   787                           
   788                           ;ir_decoder.c: 118: ir_data &= ~(1u << (31u-bit_count));
   789  0083  0325               	decf	timer1_interrupt_decoder@bit_count,w
   790  0084  3AFF               	xorlw	255
   791  0085  3E1F               	addlw	31
   792  0086  00F1               	movwf	??_timer1_interrupt_decoder
   793  0087  0AF1               	incf	??_timer1_interrupt_decoder,f
   794  0088  3001               	movlw	1
   795  0089  00F2               	movwf	??_timer1_interrupt_decoder+1
   796  008A  3000               	movlw	0
   797  008B  00F3               	movwf	??_timer1_interrupt_decoder+2
   798  008C  2890               	goto	u59_24
   799  008D                     u59_25:	
   800  008D  1003               	clrc
   801  008E  0DF2               	rlf	??_timer1_interrupt_decoder+1,f
   802  008F  0DF3               	rlf	??_timer1_interrupt_decoder+2,f
   803  0090                     u59_24:	
   804  0090  0BF1               	decfsz	??_timer1_interrupt_decoder,f
   805  0091  288D               	goto	u59_25
   806  0092  09F2               	comf	??_timer1_interrupt_decoder+1,f
   807  0093  09F3               	comf	??_timer1_interrupt_decoder+2,f
   808  0094  0872               	movf	??_timer1_interrupt_decoder+1,w
   809  0095  00F4               	movwf	??_timer1_interrupt_decoder+3
   810  0096  0873               	movf	??_timer1_interrupt_decoder+2,w
   811  0097  00F5               	movwf	??_timer1_interrupt_decoder+4
   812  0098  01F6               	clrf	??_timer1_interrupt_decoder+5
   813  0099  01F7               	clrf	??_timer1_interrupt_decoder+6
   814  009A  0874               	movf	??_timer1_interrupt_decoder+3,w
   815  009B  05A0               	andwf	_ir_data,f
   816  009C  0875               	movf	??_timer1_interrupt_decoder+4,w
   817  009D  05A1               	andwf	_ir_data+1,f
   818  009E  0876               	movf	??_timer1_interrupt_decoder+5,w
   819  009F  05A2               	andwf	_ir_data+2,f
   820  00A0  0877               	movf	??_timer1_interrupt_decoder+6,w
   821  00A1  05A3               	andwf	_ir_data+3,f
   822                           
   823                           ;ir_decoder.c: 119: } else if (((((1675/140)-2) <= ((state_timer))) && (((state_timer)) 
      +                          <= ((1675/140)+2)))) {
   824  00A2  28CB               	goto	i1l826
   825  00A3                     i1l816:	
   826  00A3  3009               	movlw	9
   827  00A4  027D               	subwf	timer1_interrupt_decoder@state_timer,w
   828  00A5  1C03               	skipc
   829  00A6  28C9               	goto	i1l822
   830  00A7  300E               	movlw	14
   831  00A8  027D               	subwf	timer1_interrupt_decoder@state_timer,w
   832  00A9  1803               	skipnc
   833  00AA  28C9               	goto	i1l822
   834                           
   835                           ;ir_decoder.c: 121: ir_data |= (1u << (31u-bit_count));
   836  00AB  0325               	decf	timer1_interrupt_decoder@bit_count,w
   837  00AC  3AFF               	xorlw	255
   838  00AD  3E1F               	addlw	31
   839  00AE  00F1               	movwf	??_timer1_interrupt_decoder
   840  00AF  0AF1               	incf	??_timer1_interrupt_decoder,f
   841  00B0  3001               	movlw	1
   842  00B1  00F2               	movwf	??_timer1_interrupt_decoder+1
   843  00B2  3000               	movlw	0
   844  00B3  00F3               	movwf	??_timer1_interrupt_decoder+2
   845  00B4  28B8               	goto	u62_24
   846  00B5                     u62_25:	
   847  00B5  1003               	clrc
   848  00B6  0DF2               	rlf	??_timer1_interrupt_decoder+1,f
   849  00B7  0DF3               	rlf	??_timer1_interrupt_decoder+2,f
   850  00B8                     u62_24:	
   851  00B8  0BF1               	decfsz	??_timer1_interrupt_decoder,f
   852  00B9  28B5               	goto	u62_25
   853  00BA  0872               	movf	??_timer1_interrupt_decoder+1,w
   854  00BB  00F4               	movwf	??_timer1_interrupt_decoder+3
   855  00BC  0873               	movf	??_timer1_interrupt_decoder+2,w
   856  00BD  00F5               	movwf	??_timer1_interrupt_decoder+4
   857  00BE  01F6               	clrf	??_timer1_interrupt_decoder+5
   858  00BF  01F7               	clrf	??_timer1_interrupt_decoder+6
   859  00C0  0874               	movf	??_timer1_interrupt_decoder+3,w
   860  00C1  04A0               	iorwf	_ir_data,f
   861  00C2  0875               	movf	??_timer1_interrupt_decoder+4,w
   862  00C3  04A1               	iorwf	_ir_data+1,f
   863  00C4  0876               	movf	??_timer1_interrupt_decoder+5,w
   864  00C5  04A2               	iorwf	_ir_data+2,f
   865  00C6  0877               	movf	??_timer1_interrupt_decoder+6,w
   866  00C7  04A3               	iorwf	_ir_data+3,f
   867                           
   868                           ;ir_decoder.c: 122: } else {
   869  00C8  28CB               	goto	i1l826
   870  00C9                     i1l822:	
   871                           
   872                           ;ir_decoder.c: 124: decoder_state = STATE_IDLE;
   873  00C9  01A6               	clrf	timer1_interrupt_decoder@decoder_state
   874                           
   875                           ;ir_decoder.c: 125: return;
   876  00CA  0008               	return
   877  00CB                     i1l826:	
   878                           
   879                           ;ir_decoder.c: 126: }
   880                           ;ir_decoder.c: 128: bit_count++;
   881  00CB  3001               	movlw	1
   882  00CC  00F1               	movwf	??_timer1_interrupt_decoder
   883  00CD  0871               	movf	??_timer1_interrupt_decoder,w
   884  00CE  07A5               	addwf	timer1_interrupt_decoder@bit_count,f
   885                           
   886                           ;ir_decoder.c: 129: if (bit_count == 32) {
   887  00CF  3020               	movlw	32
   888  00D0  0625               	xorwf	timer1_interrupt_decoder@bit_count,w
   889  00D1  1D03               	btfss	3,2
   890  00D2  28D7               	goto	i1l832
   891                           
   892                           ;ir_decoder.c: 130: ir_data_valid = 1;
   893  00D3  01A7               	clrf	_ir_data_valid
   894  00D4  0AA7               	incf	_ir_data_valid,f
   895                           
   896                           ;ir_decoder.c: 131: decoder_state = STATE_IDLE;
   897  00D5  01A6               	clrf	timer1_interrupt_decoder@decoder_state
   898                           
   899                           ;ir_decoder.c: 132: } else {
   900  00D6  0008               	return
   901  00D7                     i1l832:	
   902                           
   903                           ;ir_decoder.c: 133: decoder_state = STATE_BURST;
   904  00D7  3003               	movlw	3
   905  00D8  00F1               	movwf	??_timer1_interrupt_decoder
   906  00D9  0871               	movf	??_timer1_interrupt_decoder,w
   907  00DA  00A6               	movwf	timer1_interrupt_decoder@decoder_state
   908                           
   909                           ;ir_decoder.c: 136: }
   910                           
   911                           ;ir_decoder.c: 134: }
   912                           ;ir_decoder.c: 135: return;
   913  00DB  0008               	return
   914  00DC                     i1l838:	
   915  00DC  0826               	movf	timer1_interrupt_decoder@decoder_state,w
   916                           
   917                           ; Switch size 1, requested type "space"
   918                           ; Number of cases is 5, Range of values is 0 to 4
   919                           ; switch strategies available:
   920                           ; Name         Instructions Cycles
   921                           ; direct_byte           11     6 (fixed)
   922                           ; simple_byte           16     9 (average)
   923                           ; jumptable            260     6 (fixed)
   924                           ;	Chosen strategy is direct_byte
   925  00DD  0084               	movwf	4
   926  00DE  3005               	movlw	5
   927  00DF  0204               	subwf	4,w
   928  00E0  1803               	skipnc
   929  00E1  0008               	return
   930  00E2  3001               	movlw	high i1S938
   931  00E3  008A               	movwf	10
   932  00E4  30DF               	movlw	low i1S938
   933  00E5  0704               	addwf	4,w
   934  00E6  0082               	movwf	2
   935  00E7  0008               	return
   936  00E8                     __end_of_timer1_interrupt_decoder:	
   937                           
   938                           	psect	swtext1
   939  01DF                     __pswtext1:	
   940  01DF                     i1S938:	
   941  01DF  2827               	ljmp	i1l34
   942  01E0  282F               	ljmp	i1l36
   943  01E1  2846               	ljmp	i1l39
   944  01E2  285D               	ljmp	i1l44
   945  01E3  2874               	ljmp	i1l50
   946                           
   947                           	psect	text4
   948  00E8                     __ptext4:	
   949 ;; *************** function _timer0_interrupt *****************
   950 ;; Defined at:
   951 ;;		line 46 in file "leds.c"
   952 ;; Parameters:    Size  Location     Type
   953 ;;		None
   954 ;; Auto vars:     Size  Location     Type
   955 ;;		None
   956 ;; Return value:  Size  Location     Type
   957 ;;                  1    wreg      void 
   958 ;; Registers used:
   959 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   960 ;; Tracked objects:
   961 ;;		On entry : 0/0
   962 ;;		On exit  : 0/0
   963 ;;		Unchanged: 0/0
   964 ;; Data sizes:     COMMON   BANK0   BANK1
   965 ;;      Params:         0       0       0
   966 ;;      Locals:         0       0       0
   967 ;;      Temps:          1       0       0
   968 ;;      Totals:         1       0       0
   969 ;;Total ram usage:        1 bytes
   970 ;; Hardware stack levels used:    1
   971 ;; Hardware stack levels required when called:    1
   972 ;; This function calls:
   973 ;;		_all_off
   974 ;;		_leda_on
   975 ;;		_ledb_on
   976 ;; This function is called by:
   977 ;;		_isr
   978 ;; This function uses a non-reentrant model
   979 ;;
   980                           
   981                           
   982                           ;psect for function _timer0_interrupt
   983  00E8                     _timer0_interrupt:	
   984                           
   985                           ;leds.c: 47: static uint8_t pos = 0;
   986                           ;leds.c: 48: pos++;
   987                           
   988                           ;incstack = 0
   989                           ; Regs used in _timer0_interrupt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   990  00E8  3001               	movlw	1
   991  00E9  00F5               	movwf	??_timer0_interrupt
   992  00EA  0875               	movf	??_timer0_interrupt,w
   993  00EB  1283               	bcf	3,5	;RP0=0, select bank0
   994  00EC  07A4               	addwf	timer0_interrupt@pos,f
   995                           
   996                           ;leds.c: 49: pos &= 7;
   997  00ED  3007               	movlw	7
   998  00EE  00F5               	movwf	??_timer0_interrupt
   999  00EF  0875               	movf	??_timer0_interrupt,w
  1000  00F0  05A4               	andwf	timer0_interrupt@pos,f
  1001                           
  1002                           ;leds.c: 50: all_off();
  1003  00F1  21A9               	fcall	_all_off
  1004                           
  1005                           ;leds.c: 51: switch (pos) {
  1006  00F2  2917               	goto	i1l872
  1007  00F3                     i1l854:	
  1008                           ;leds.c: 52: case 0:
  1009                           
  1010                           
  1011                           ;leds.c: 53: leda_on(0, 0);
  1012  00F3  01F1               	clrf	leda_on@dir
  1013  00F4  3000               	movlw	0
  1014  00F5  2156               	fcall	_leda_on
  1015                           
  1016                           ;leds.c: 54: break;
  1017  00F6  0008               	return
  1018  00F7                     i1l856:	
  1019                           ;leds.c: 55: case 1:
  1020                           
  1021                           
  1022                           ;leds.c: 56: leda_on(2, 0);
  1023  00F7  01F1               	clrf	leda_on@dir
  1024  00F8  3002               	movlw	2
  1025  00F9  2156               	fcall	_leda_on
  1026                           
  1027                           ;leds.c: 57: break;
  1028  00FA  0008               	return
  1029  00FB                     i1l858:	
  1030                           ;leds.c: 58: case 2:
  1031                           
  1032                           
  1033                           ;leds.c: 59: ledb_on(3, 0);
  1034  00FB  01F1               	clrf	ledb_on@dir
  1035  00FC  3003               	movlw	3
  1036  00FD  2124               	fcall	_ledb_on
  1037                           
  1038                           ;leds.c: 60: break;
  1039  00FE  0008               	return
  1040  00FF                     i1l860:	
  1041                           ;leds.c: 61: case 3:
  1042                           
  1043                           
  1044                           ;leds.c: 62: ledb_on(3, 1);
  1045  00FF  01F1               	clrf	ledb_on@dir
  1046  0100  0AF1               	incf	ledb_on@dir,f
  1047  0101  3003               	movlw	3
  1048  0102  2124               	fcall	_ledb_on
  1049                           
  1050                           ;leds.c: 63: break;
  1051  0103  0008               	return
  1052  0104                     i1l862:	
  1053                           ;leds.c: 64: case 4:
  1054                           
  1055                           
  1056                           ;leds.c: 65: leda_on(0, 1);
  1057  0104  01F1               	clrf	leda_on@dir
  1058  0105  0AF1               	incf	leda_on@dir,f
  1059  0106  3000               	movlw	0
  1060  0107  2156               	fcall	_leda_on
  1061                           
  1062                           ;leds.c: 66: break;
  1063  0108  0008               	return
  1064  0109                     i1l864:	
  1065                           ;leds.c: 67: case 5:
  1066                           
  1067                           
  1068                           ;leds.c: 68: leda_on(2, 1);
  1069  0109  01F1               	clrf	leda_on@dir
  1070  010A  0AF1               	incf	leda_on@dir,f
  1071  010B  3002               	movlw	2
  1072  010C  2156               	fcall	_leda_on
  1073                           
  1074                           ;leds.c: 69: break;
  1075  010D  0008               	return
  1076  010E                     i1l866:	
  1077                           ;leds.c: 70: case 6:
  1078                           
  1079                           
  1080                           ;leds.c: 71: leda_on(3, 0);
  1081  010E  01F1               	clrf	leda_on@dir
  1082  010F  3003               	movlw	3
  1083  0110  2156               	fcall	_leda_on
  1084                           
  1085                           ;leds.c: 72: break;
  1086  0111  0008               	return
  1087  0112                     i1l868:	
  1088                           ;leds.c: 73: case 7:
  1089                           
  1090                           
  1091                           ;leds.c: 74: leda_on(3, 1);
  1092  0112  01F1               	clrf	leda_on@dir
  1093  0113  0AF1               	incf	leda_on@dir,f
  1094  0114  3003               	movlw	3
  1095  0115  2156               	fcall	_leda_on
  1096                           
  1097                           ;leds.c: 76: }
  1098                           
  1099                           ;leds.c: 75: break;
  1100  0116  0008               	return
  1101  0117                     i1l872:	
  1102  0117  1283               	bcf	3,5	;RP0=0, select bank0
  1103  0118  0824               	movf	timer0_interrupt@pos,w
  1104                           
  1105                           ; Switch size 1, requested type "space"
  1106                           ; Number of cases is 8, Range of values is 0 to 7
  1107                           ; switch strategies available:
  1108                           ; Name         Instructions Cycles
  1109                           ; direct_byte           14     6 (fixed)
  1110                           ; simple_byte           25    13 (average)
  1111                           ; jumptable            260     6 (fixed)
  1112                           ;	Chosen strategy is direct_byte
  1113  0119  0084               	movwf	4
  1114  011A  3008               	movlw	8
  1115  011B  0204               	subwf	4,w
  1116  011C  1803               	skipnc
  1117  011D  0008               	return
  1118  011E  3001               	movlw	high i1S940
  1119  011F  008A               	movwf	10
  1120  0120  30D7               	movlw	low i1S940
  1121  0121  0704               	addwf	4,w
  1122  0122  0082               	movwf	2
  1123  0123  0008               	return
  1124  0124                     __end_of_timer0_interrupt:	
  1125                           
  1126                           	psect	swtext2
  1127  01D7                     __pswtext2:	
  1128  01D7                     i1S940:	
  1129  01D7  28F3               	ljmp	i1l854
  1130  01D8  28F7               	ljmp	i1l856
  1131  01D9  28FB               	ljmp	i1l858
  1132  01DA  28FF               	ljmp	i1l860
  1133  01DB  2904               	ljmp	i1l862
  1134  01DC  2909               	ljmp	i1l864
  1135  01DD  290E               	ljmp	i1l866
  1136  01DE  2912               	ljmp	i1l868
  1137                           
  1138                           	psect	text5
  1139  0124                     __ptext5:	
  1140 ;; *************** function _ledb_on *****************
  1141 ;; Defined at:
  1142 ;;		line 29 in file "leds.c"
  1143 ;; Parameters:    Size  Location     Type
  1144 ;;  pos             1    wreg     unsigned char 
  1145 ;;  dir             1    0[COMMON] unsigned char 
  1146 ;; Auto vars:     Size  Location     Type
  1147 ;;  pos             1    3[COMMON] unsigned char 
  1148 ;; Return value:  Size  Location     Type
  1149 ;;                  1    wreg      void 
  1150 ;; Registers used:
  1151 ;;		wreg, status,2, status,0
  1152 ;; Tracked objects:
  1153 ;;		On entry : 0/0
  1154 ;;		On exit  : 0/0
  1155 ;;		Unchanged: 0/0
  1156 ;; Data sizes:     COMMON   BANK0   BANK1
  1157 ;;      Params:         1       0       0
  1158 ;;      Locals:         1       0       0
  1159 ;;      Temps:          2       0       0
  1160 ;;      Totals:         4       0       0
  1161 ;;Total ram usage:        4 bytes
  1162 ;; Hardware stack levels used:    1
  1163 ;; This function calls:
  1164 ;;		Nothing
  1165 ;; This function is called by:
  1166 ;;		_timer0_interrupt
  1167 ;; This function uses a non-reentrant model
  1168 ;;
  1169                           
  1170                           
  1171                           ;psect for function _ledb_on
  1172  0124                     _ledb_on:	
  1173                           
  1174                           ;incstack = 0
  1175                           ; Regs used in _ledb_on: [wreg+status,2+status,0]
  1176                           ;ledb_on@pos stored from wreg
  1177  0124  00F4               	movwf	ledb_on@pos
  1178                           
  1179                           ;leds.c: 30: if (dir)
  1180  0125  0871               	movf	ledb_on@dir,w
  1181  0126  1903               	btfsc	3,2
  1182  0127  2937               	goto	i1l738
  1183                           
  1184                           ;leds.c: 31: PORTB |= (1u<<pos);
  1185  0128  3001               	movlw	1
  1186  0129  00F2               	movwf	??_ledb_on
  1187  012A  0A74               	incf	ledb_on@pos,w
  1188  012B  292E               	goto	u42_24
  1189  012C                     u42_25:	
  1190  012C  1003               	clrc
  1191  012D  0DF2               	rlf	??_ledb_on,f
  1192  012E                     u42_24:	
  1193  012E  3EFF               	addlw	-1
  1194  012F  1D03               	skipz
  1195  0130  292C               	goto	u42_25
  1196  0131  0872               	movf	??_ledb_on,w
  1197  0132  00F3               	movwf	??_ledb_on+1
  1198  0133  0873               	movf	??_ledb_on+1,w
  1199  0134  1283               	bcf	3,5	;RP0=0, select bank0
  1200  0135  0486               	iorwf	6,f	;volatile
  1201  0136  2946               	goto	i1l122
  1202  0137                     i1l738:	
  1203                           
  1204                           ;leds.c: 32: else
  1205                           ;leds.c: 33: PORTB &= ~(1u<<pos);
  1206  0137  3001               	movlw	1
  1207  0138  00F2               	movwf	??_ledb_on
  1208  0139  0A74               	incf	ledb_on@pos,w
  1209  013A  293D               	goto	u43_24
  1210  013B                     u43_25:	
  1211  013B  1003               	clrc
  1212  013C  0DF2               	rlf	??_ledb_on,f
  1213  013D                     u43_24:	
  1214  013D  3EFF               	addlw	-1
  1215  013E  1D03               	skipz
  1216  013F  293B               	goto	u43_25
  1217  0140  0872               	movf	??_ledb_on,w
  1218  0141  3AFF               	xorlw	255
  1219  0142  00F3               	movwf	??_ledb_on+1
  1220  0143  0873               	movf	??_ledb_on+1,w
  1221  0144  1283               	bcf	3,5	;RP0=0, select bank0
  1222  0145  0586               	andwf	6,f	;volatile
  1223  0146                     i1l122:	
  1224                           
  1225                           ;leds.c: 34: TRISB &= ~(1u<<pos);
  1226  0146  3001               	movlw	1
  1227  0147  00F2               	movwf	??_ledb_on
  1228  0148  0A74               	incf	ledb_on@pos,w
  1229  0149  294C               	goto	u44_24
  1230  014A                     u44_25:	
  1231  014A  1003               	clrc
  1232  014B  0DF2               	rlf	??_ledb_on,f
  1233  014C                     u44_24:	
  1234  014C  3EFF               	addlw	-1
  1235  014D  1D03               	skipz
  1236  014E  294A               	goto	u44_25
  1237  014F  0872               	movf	??_ledb_on,w
  1238  0150  3AFF               	xorlw	255
  1239  0151  00F3               	movwf	??_ledb_on+1
  1240  0152  0873               	movf	??_ledb_on+1,w
  1241  0153  1683               	bsf	3,5	;RP0=1, select bank1
  1242  0154  0586               	andwf	6,f	;volatile
  1243  0155  0008               	return
  1244  0156                     __end_of_ledb_on:	
  1245                           
  1246                           	psect	text6
  1247  0156                     __ptext6:	
  1248 ;; *************** function _leda_on *****************
  1249 ;; Defined at:
  1250 ;;		line 18 in file "leds.c"
  1251 ;; Parameters:    Size  Location     Type
  1252 ;;  pos             1    wreg     unsigned char 
  1253 ;;  dir             1    0[COMMON] unsigned char 
  1254 ;; Auto vars:     Size  Location     Type
  1255 ;;  pos             1    3[COMMON] unsigned char 
  1256 ;; Return value:  Size  Location     Type
  1257 ;;                  1    wreg      void 
  1258 ;; Registers used:
  1259 ;;		wreg, status,2, status,0
  1260 ;; Tracked objects:
  1261 ;;		On entry : 0/0
  1262 ;;		On exit  : 0/0
  1263 ;;		Unchanged: 0/0
  1264 ;; Data sizes:     COMMON   BANK0   BANK1
  1265 ;;      Params:         1       0       0
  1266 ;;      Locals:         1       0       0
  1267 ;;      Temps:          2       0       0
  1268 ;;      Totals:         4       0       0
  1269 ;;Total ram usage:        4 bytes
  1270 ;; Hardware stack levels used:    1
  1271 ;; This function calls:
  1272 ;;		Nothing
  1273 ;; This function is called by:
  1274 ;;		_timer0_interrupt
  1275 ;; This function uses a non-reentrant model
  1276 ;;
  1277                           
  1278                           
  1279                           ;psect for function _leda_on
  1280  0156                     _leda_on:	
  1281                           
  1282                           ;incstack = 0
  1283                           ; Regs used in _leda_on: [wreg+status,2+status,0]
  1284                           ;leda_on@pos stored from wreg
  1285  0156  00F4               	movwf	leda_on@pos
  1286                           
  1287                           ;leds.c: 19: if (dir)
  1288  0157  0871               	movf	leda_on@dir,w
  1289  0158  1903               	btfsc	3,2
  1290  0159  2969               	goto	i1l732
  1291                           
  1292                           ;leds.c: 20: PORTA |= (1u<<pos);
  1293  015A  3001               	movlw	1
  1294  015B  00F2               	movwf	??_leda_on
  1295  015C  0A74               	incf	leda_on@pos,w
  1296  015D  2960               	goto	u38_24
  1297  015E                     u38_25:	
  1298  015E  1003               	clrc
  1299  015F  0DF2               	rlf	??_leda_on,f
  1300  0160                     u38_24:	
  1301  0160  3EFF               	addlw	-1
  1302  0161  1D03               	skipz
  1303  0162  295E               	goto	u38_25
  1304  0163  0872               	movf	??_leda_on,w
  1305  0164  00F3               	movwf	??_leda_on+1
  1306  0165  0873               	movf	??_leda_on+1,w
  1307  0166  1283               	bcf	3,5	;RP0=0, select bank0
  1308  0167  0485               	iorwf	5,f	;volatile
  1309  0168  2978               	goto	i1l117
  1310  0169                     i1l732:	
  1311                           
  1312                           ;leds.c: 21: else
  1313                           ;leds.c: 22: PORTA &= ~(1u<<pos);
  1314  0169  3001               	movlw	1
  1315  016A  00F2               	movwf	??_leda_on
  1316  016B  0A74               	incf	leda_on@pos,w
  1317  016C  296F               	goto	u39_24
  1318  016D                     u39_25:	
  1319  016D  1003               	clrc
  1320  016E  0DF2               	rlf	??_leda_on,f
  1321  016F                     u39_24:	
  1322  016F  3EFF               	addlw	-1
  1323  0170  1D03               	skipz
  1324  0171  296D               	goto	u39_25
  1325  0172  0872               	movf	??_leda_on,w
  1326  0173  3AFF               	xorlw	255
  1327  0174  00F3               	movwf	??_leda_on+1
  1328  0175  0873               	movf	??_leda_on+1,w
  1329  0176  1283               	bcf	3,5	;RP0=0, select bank0
  1330  0177  0585               	andwf	5,f	;volatile
  1331  0178                     i1l117:	
  1332                           
  1333                           ;leds.c: 23: TRISA &= ~(1u<<pos);
  1334  0178  3001               	movlw	1
  1335  0179  00F2               	movwf	??_leda_on
  1336  017A  0A74               	incf	leda_on@pos,w
  1337  017B  297E               	goto	u40_24
  1338  017C                     u40_25:	
  1339  017C  1003               	clrc
  1340  017D  0DF2               	rlf	??_leda_on,f
  1341  017E                     u40_24:	
  1342  017E  3EFF               	addlw	-1
  1343  017F  1D03               	skipz
  1344  0180  297C               	goto	u40_25
  1345  0181  0872               	movf	??_leda_on,w
  1346  0182  3AFF               	xorlw	255
  1347  0183  00F3               	movwf	??_leda_on+1
  1348  0184  0873               	movf	??_leda_on+1,w
  1349  0185  1683               	bsf	3,5	;RP0=1, select bank1
  1350  0186  0585               	andwf	5,f	;volatile
  1351  0187  0008               	return
  1352  0188                     __end_of_leda_on:	
  1353                           
  1354                           	psect	text7
  1355  01A9                     __ptext7:	
  1356 ;; *************** function _all_off *****************
  1357 ;; Defined at:
  1358 ;;		line 10 in file "leds.c"
  1359 ;; Parameters:    Size  Location     Type
  1360 ;;		None
  1361 ;; Auto vars:     Size  Location     Type
  1362 ;;		None
  1363 ;; Return value:  Size  Location     Type
  1364 ;;                  1    wreg      void 
  1365 ;; Registers used:
  1366 ;;		wreg, status,2, status,0
  1367 ;; Tracked objects:
  1368 ;;		On entry : 0/0
  1369 ;;		On exit  : 0/0
  1370 ;;		Unchanged: 0/0
  1371 ;; Data sizes:     COMMON   BANK0   BANK1
  1372 ;;      Params:         0       0       0
  1373 ;;      Locals:         0       0       0
  1374 ;;      Temps:          2       0       0
  1375 ;;      Totals:         2       0       0
  1376 ;;Total ram usage:        2 bytes
  1377 ;; Hardware stack levels used:    1
  1378 ;; This function calls:
  1379 ;;		Nothing
  1380 ;; This function is called by:
  1381 ;;		_timer0_interrupt
  1382 ;; This function uses a non-reentrant model
  1383 ;;
  1384                           
  1385                           
  1386                           ;psect for function _all_off
  1387  01A9                     _all_off:	
  1388                           
  1389                           ;leds.c: 11: TRISA |= TRISA0 | TRISA2 | TRISA3;
  1390                           
  1391                           ;incstack = 0
  1392                           ; Regs used in _all_off: [wreg+status,2+status,0]
  1393  01A9  1683               	bsf	3,5	;RP0=1, select bank1
  1394  01AA  1D85               	btfss	5,3	;volatile
  1395  01AB  29AE               	goto	u35_20
  1396  01AC  3001               	movlw	1
  1397  01AD  29AF               	goto	u35_22
  1398  01AE                     u35_20:	
  1399  01AE  3000               	movlw	0
  1400  01AF                     u35_22:	
  1401  01AF  00F1               	movwf	??_all_off
  1402  01B0  3000               	movlw	0
  1403  01B1  1805               	btfsc	5,0	;volatile
  1404  01B2  3801               	iorlw	1
  1405  01B3  1905               	btfsc	5,2	;volatile
  1406  01B4  3801               	iorlw	1
  1407  01B5  3800               	iorlw	0
  1408  01B6  1903               	btfsc	3,2
  1409  01B7  29BA               	goto	u36_20
  1410  01B8  3001               	movlw	1
  1411  01B9  29BB               	goto	u36_22
  1412  01BA                     u36_20:	
  1413  01BA  3000               	movlw	0
  1414  01BB                     u36_22:	
  1415  01BB  0471               	iorwf	??_all_off,w
  1416  01BC  00F2               	movwf	??_all_off+1
  1417  01BD  0872               	movf	??_all_off+1,w
  1418  01BE  0485               	iorwf	5,f	;volatile
  1419                           
  1420                           ;leds.c: 12: TRISB |= TRISB3;
  1421  01BF  3000               	movlw	0
  1422  01C0  1986               	btfsc	6,3	;volatile
  1423  01C1  3001               	movlw	1
  1424  01C2  00F1               	movwf	??_all_off
  1425  01C3  0871               	movf	??_all_off,w
  1426  01C4  0486               	iorwf	6,f	;volatile
  1427  01C5  0008               	return
  1428  01C6                     __end_of_all_off:	
  1429  007E                     btemp	set	126	;btemp
  1430  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           13     12      13
    BANK0            69      0       9
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_timer1_interrupt_decoder
    _timer0_interrupt->_leda_on
    _timer0_interrupt->_ledb_on

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                   _setup_ir_decoder
 ---------------------------------------------------------------------------------
 (1) _setup_ir_decoder                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _isr                                                  5     5      0     520
                                              7 COMMON     5     5      0
                   _timer0_interrupt
           _timer1_interrupt_decoder
 ---------------------------------------------------------------------------------
 (3) _timer1_interrupt_decoder                             7     7      0       0
                                              0 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (3) _timer0_interrupt                                     1     1      0     520
                                              4 COMMON     1     1      0
                            _all_off
                            _leda_on
                            _ledb_on
 ---------------------------------------------------------------------------------
 (4) _ledb_on                                              4     3      1     174
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (4) _leda_on                                              4     3      1     346
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (4) _all_off                                              2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setup_ir_decoder

 _isr (ROOT)
   _timer0_interrupt
     _all_off
     _leda_on
     _ledb_on
   _timer1_interrupt_decoder

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK1               20      0       0       5        0.0%
BITBANK1            20      0       0       7        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               45      0       9       4       13.0%
BITBANK0            45      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               D      C       D       1      100.0%
BITCOMMON            D      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      16       8        0.0%
ABS                  0      0      16       6        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed May 16 20:05:49 2018

             _timer1_interrupt_decoder 001D                                      pc 0002  
                                   l92 01E5                                     fsr 0004  
                                  _isr 0188                                    fsr0 0004  
                                 ?_isr 0071                                   i1l50 0074  
                                 i1l34 0027                                   i1l44 005D  
                                 i1l36 002F                                   i1l39 0046  
                                 i1l87 019D  timer1_interrupt_decoder@decoder_state 0026  
                                 _main 01E4                                   btemp 007E  
                                 start 000F                                  ??_isr 0078  
                                ?_main 0071                                  i1S940 01D7  
                                i1S938 01DF                                  i1l122 0146  
                                i1l117 0178                                  i1l800 006E  
                                i1l810 007B                                  i1l732 0169  
                                i1l822 00C9                                  i1l832 00D7  
                                i1l816 00A3                                  i1l738 0137  
                                i1l826 00CB                                  i1l860 00FF  
                                i1l780 0055                                  i1l862 0104  
                                i1l854 00F3                                  i1l758 0036  
                                i1l838 00DC                                  i1l864 0109  
                                i1l856 00F7                                  i1l872 0117  
                                i1l784 0057                                  i1l776 004D  
                                i1l768 0044                                  i1l866 010E  
                                i1l858 00FB                                  i1l794 0064  
                                i1l890 0196                                  i1l868 0112  
                                i1l884 0190                                  i1l798 006C  
                                u40_24 017E                                  u40_25 017C  
                                _TMR1H 000F                                  _TMR1L 000E  
                                u42_24 012E                                  u42_25 012C  
                                u35_20 01AE                                  _PORTA 0005  
                                u35_22 01AF                                  _PORTB 0006  
                                u43_24 013D                                  u43_25 013B  
                                u36_20 01BA                                  u36_22 01BB  
                                u44_24 014C                                  u44_25 014A  
                                u38_24 0160                                  u62_24 00B8  
                                u38_25 015E                                  u62_25 00B5  
                                u39_24 016F                                  u39_25 016D  
                                _TRISA 0085                                  _TRISB 0086  
                                u59_24 0090                                  u59_25 008D  
                      __end_of_all_off 01C6                        __end_of_leda_on 0188  
                      __end_of_ledb_on 0156                                  pclath 000A  
                                status 0003                                  wtemp0 007E  
                      __initialization 0010                           __end_of_main 01E6  
                               ??_main 0000                          _ir_data_valid 0027  
                     _timer0_interrupt 00E8              __size_of_setup_ir_decoder 0011  
                               _TRISA0 0428                                 _TRISA2 042A  
                               _TRISA3 042B                                 _TRISB3 0433  
                  timer0_interrupt@pos 0024                              ??_all_off 0071  
                            ??_leda_on 0072                              ??_ledb_on 0072  
                               saved_w 007E             ??_timer1_interrupt_decoder 0071  
              __end_of__initialization 001B                         __pcstackCOMMON 0071  
                         __pidataBANK0 01E6                             __pbssBANK0 0020  
                           __pmaintext 01E4                             __pintentry 0004  
                     _setup_ir_decoder 01C6                                _all_off 01A9  
             __end_of_timer0_interrupt 0124      timer1_interrupt_decoder@bit_count 0025  
                              __ptext1 01C6                                __ptext2 0188  
                              __ptext3 001D                                __ptext4 00E8  
                              __ptext5 0124                                __ptext6 0156  
                              __ptext7 01A9                                _leda_on 0156  
                              _ledb_on 0124                              _T1CONbits 0010  
                              _ir_data 0020                           __size_of_isr 0021  
                 end_of_initialization 001B       __end_of_timer1_interrupt_decoder 00E8  
                            _PORTBbits 0006                              _TRISBbits 0086  
                           leda_on@dir 0071                             leda_on@pos 0074  
                           ledb_on@dir 0071                             ledb_on@pos 0074  
                  start_initialization 0010                            __end_of_isr 01A9  
  timer1_interrupt_decoder@state_timer 007D                            __pdataBANK0 0028  
    __size_of_timer1_interrupt_decoder 00CB              ?_timer1_interrupt_decoder 0071  
             __end_of_setup_ir_decoder 01D7                            __pbssCOMMON 007D  
                            ___latbits 0000                          __pcstackBANK0 0000  
                             ?_all_off 0071                              __pswtext1 01DF  
                            __pswtext2 01D7                      ?_timer0_interrupt 0071  
                             ?_leda_on 0071                               ?_ledb_on 0071  
                   ??_timer0_interrupt 0075                      interrupt_function 0004  
                             _PIE1bits 008C                              _move_leds 0028  
                             _PIR1bits 000C                       __size_of_all_off 001D  
                     __size_of_leda_on 0032                       __size_of_ledb_on 0032  
                        __size_of_main 0002                      ?_setup_ir_decoder 0071  
                           _INTCONbits 000B                     ??_setup_ir_decoder 0000  
                             intlevel1 0000              __size_of_timer0_interrupt 003C  
