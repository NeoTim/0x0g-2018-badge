

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat May 19 20:32:52 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F716
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	intentry,global,class=CODE,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	swtext1,local,class=CONST,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	swtext2,local,class=CONST,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    22                           	dabs	1,0x7E,2
    23  0000                     
    24                           ; Version 1.45
    25                           ; Generated 16/11/2017 GMT
    26                           ; 
    27                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC16F716 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     	;# 
    59  0001                     	;# 
    60  0002                     	;# 
    61  0003                     	;# 
    62  0004                     	;# 
    63  0005                     	;# 
    64  0006                     	;# 
    65  0006                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  000E                     	;# 
    70  000E                     	;# 
    71  000F                     	;# 
    72  0010                     	;# 
    73  0011                     	;# 
    74  0012                     	;# 
    75  0015                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0017                     	;# 
    79  0018                     	;# 
    80  0019                     	;# 
    81  001E                     	;# 
    82  001F                     	;# 
    83  0081                     	;# 
    84  0085                     	;# 
    85  0086                     	;# 
    86  0086                     	;# 
    87  008C                     	;# 
    88  008E                     	;# 
    89  0092                     	;# 
    90  009F                     	;# 
    91  0000                     	;# 
    92  0001                     	;# 
    93  0002                     	;# 
    94  0003                     	;# 
    95  0004                     	;# 
    96  0005                     	;# 
    97  0006                     	;# 
    98  0006                     	;# 
    99  000A                     	;# 
   100  000B                     	;# 
   101  000C                     	;# 
   102  000E                     	;# 
   103  000E                     	;# 
   104  000F                     	;# 
   105  0010                     	;# 
   106  0011                     	;# 
   107  0012                     	;# 
   108  0015                     	;# 
   109  0015                     	;# 
   110  0016                     	;# 
   111  0017                     	;# 
   112  0018                     	;# 
   113  0019                     	;# 
   114  001E                     	;# 
   115  001F                     	;# 
   116  0081                     	;# 
   117  0085                     	;# 
   118  0086                     	;# 
   119  0086                     	;# 
   120  008C                     	;# 
   121  008E                     	;# 
   122  0092                     	;# 
   123  009F                     	;# 
   124  0000                     	;# 
   125  0001                     	;# 
   126  0002                     	;# 
   127  0003                     	;# 
   128  0004                     	;# 
   129  0005                     	;# 
   130  0006                     	;# 
   131  0006                     	;# 
   132  000A                     	;# 
   133  000B                     	;# 
   134  000C                     	;# 
   135  000E                     	;# 
   136  000E                     	;# 
   137  000F                     	;# 
   138  0010                     	;# 
   139  0011                     	;# 
   140  0012                     	;# 
   141  0015                     	;# 
   142  0015                     	;# 
   143  0016                     	;# 
   144  0017                     	;# 
   145  0018                     	;# 
   146  0019                     	;# 
   147  001E                     	;# 
   148  001F                     	;# 
   149  0081                     	;# 
   150  0085                     	;# 
   151  0086                     	;# 
   152  0086                     	;# 
   153  008C                     	;# 
   154  008E                     	;# 
   155  0092                     	;# 
   156  009F                     	;# 
   157                           
   158                           	psect	idataBANK0
   159  01CB                     __pidataBANK0:	
   160                           
   161                           ;initializer for _move_leds
   162  01CB  3401               	retlw	1
   163  0006                     _PORTB	set	6
   164  0005                     _PORTA	set	5
   165  000B                     _INTCONbits	set	11
   166  0006                     _PORTBbits	set	6
   167  000C                     _PIR1bits	set	12
   168  000E                     _TMR1L	set	14
   169  000F                     _TMR1H	set	15
   170  0010                     _T1CONbits	set	16
   171  0081                     _OPTION_REGbits	set	129
   172  0086                     _TRISB	set	134
   173  0085                     _TRISA	set	133
   174  008C                     _PIE1bits	set	140
   175  0086                     _TRISBbits	set	134
   176                           
   177                           ; #config settings
   178  0000                     
   179                           	psect	cinit
   180  0010                     start_initialization:	
   181  0010                     __initialization:	
   182                           
   183                           ; Initialize objects allocated to BANK0
   184  0010  21CB               	fcall	__pidataBANK0	;fetch initializer
   185  0011  00AB               	movwf	__pdataBANK0& (0+127)
   186                           
   187                           ; Clear objects allocated to BANK0
   188  0012  01A0               	clrf	__pbssBANK0& (0+127)
   189  0013  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   190  0014  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   191  0015  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   192  0016  01A4               	clrf	(__pbssBANK0+4)& (0+127)
   193  0017  01A5               	clrf	(__pbssBANK0+5)& (0+127)
   194  0018  01A6               	clrf	(__pbssBANK0+6)& (0+127)
   195                           
   196                           ; Clear objects allocated to COMMON
   197  0019  01FC               	clrf	__pbssCOMMON& (0+127)
   198  001A  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
   199  001B                     end_of_initialization:	
   200                           ;End of C runtime variable initialization code
   201                           
   202  001B                     __end_of__initialization:	
   203  001B  0183               	clrf	3
   204  001C  29C9               	ljmp	_main	;jump to C main() function
   205                           
   206                           	psect	bssCOMMON
   207  007C                     __pbssCOMMON:	
   208  007C                     timer1_interrupt_decoder@state_timer:	
   209  007C                     	ds	1
   210  007D                     timer1_interrupt_decoder@bit_count:	
   211  007D                     	ds	1
   212                           
   213                           	psect	bssBANK0
   214  0020                     __pbssBANK0:	
   215  0020                     _ir_data:	
   216  0020                     	ds	4
   217  0024                     timer0_interrupt@pos:	
   218  0024                     	ds	1
   219  0025                     timer1_interrupt_decoder@decoder_state:	
   220  0025                     	ds	1
   221  0026                     _ir_data_valid:	
   222  0026                     	ds	1
   223                           
   224                           	psect	dataBANK0
   225  002B                     __pdataBANK0:	
   226  002B                     _move_leds:	
   227  002B                     	ds	1
   228                           
   229                           	psect	cstackCOMMON
   230  0070                     __pcstackCOMMON:	
   231  0070                     ?_exactly_on:	
   232  0070                     ?_all_off:	
   233                           ; 1 bytes @ 0x0
   234                           
   235  0070                     ??_all_off:	
   236                           ; 1 bytes @ 0x0
   237                           
   238  0070                     ?_leda_on:	
   239                           ; 1 bytes @ 0x0
   240                           
   241  0070                     ?_ledb_on:	
   242                           ; 1 bytes @ 0x0
   243                           
   244  0070                     ?_timer1_interrupt_decoder:	
   245                           ; 1 bytes @ 0x0
   246                           
   247  0070                     ?_setup_ir_decoder:	
   248                           ; 1 bytes @ 0x0
   249                           
   250  0070                     ?_ISR:	
   251                           ; 1 bytes @ 0x0
   252                           
   253  0070                     ?_main:	
   254                           ; 1 bytes @ 0x0
   255                           
   256  0070                     leda_on@dir:	
   257                           ; 1 bytes @ 0x0
   258                           
   259  0070                     ledb_on@dir:	
   260                           ; 1 bytes @ 0x0
   261                           
   262                           
   263                           ; 1 bytes @ 0x0
   264  0070                     	ds	1
   265  0071                     ??_leda_on:	
   266  0071                     ??_ledb_on:	
   267                           ; 1 bytes @ 0x1
   268                           
   269                           
   270                           ; 1 bytes @ 0x1
   271  0071                     	ds	2
   272  0073                     leda_on@pos:	
   273  0073                     ledb_on@pos:	
   274                           ; 1 bytes @ 0x3
   275                           
   276                           
   277                           ; 1 bytes @ 0x3
   278  0073                     	ds	1
   279  0074                     ??_exactly_on:	
   280  0074                     exactly_on@which:	
   281                           ; 1 bytes @ 0x4
   282                           
   283                           
   284                           ; 1 bytes @ 0x4
   285  0074                     	ds	1
   286  0075                     ??_timer1_interrupt_decoder:	
   287                           
   288                           ; 1 bytes @ 0x5
   289  0075                     	ds	7
   290                           
   291                           	psect	cstackBANK0
   292  0027                     __pcstackBANK0:	
   293  0027                     ??_ISR:	
   294                           
   295                           ; 1 bytes @ 0x0
   296  0027                     	ds	4
   297  002B                     ??_setup_ir_decoder:	
   298  002B                     ??_main:	
   299                           ; 1 bytes @ 0x4
   300                           
   301                           
   302                           	psect	maintext
   303  01C9                     __pmaintext:	
   304                           ; 1 bytes @ 0x4
   305 ;;
   306 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   307 ;;
   308 ;; *************** function _main *****************
   309 ;; Defined at:
   310 ;;		line 38 in file "main.c"
   311 ;; Parameters:    Size  Location     Type
   312 ;;		None
   313 ;; Auto vars:     Size  Location     Type
   314 ;;		None
   315 ;; Return value:  Size  Location     Type
   316 ;;                  1    wreg      void 
   317 ;; Registers used:
   318 ;;		wreg, status,2, status,0, pclath, cstack
   319 ;; Tracked objects:
   320 ;;		On entry : B00/0
   321 ;;		On exit  : 0/0
   322 ;;		Unchanged: 0/0
   323 ;; Data sizes:     COMMON   BANK0   BANK1
   324 ;;      Params:         0       0       0
   325 ;;      Locals:         0       0       0
   326 ;;      Temps:          0       0       0
   327 ;;      Totals:         0       0       0
   328 ;;Total ram usage:        0 bytes
   329 ;; Hardware stack levels required when called:    5
   330 ;; This function calls:
   331 ;;		_setup_ir_decoder
   332 ;; This function is called by:
   333 ;;		Startup code after reset
   334 ;; This function uses a non-reentrant model
   335 ;;
   336                           
   337                           
   338                           ;psect for function _main
   339  01C9                     _main:	
   340                           
   341                           ;main.c: 40: setup_ir_decoder();
   342                           
   343                           ;incstack = 0
   344                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   345  01C9  21A4               	fcall	_setup_ir_decoder
   346  01CA                     l84:	
   347                           ;main.c: 42: for(;;){}
   348                           
   349  01CA  29CA               	goto	l84
   350  01CB                     __end_of_main:	
   351                           
   352                           	psect	text1
   353  01A4                     __ptext1:	
   354 ;; *************** function _setup_ir_decoder *****************
   355 ;; Defined at:
   356 ;;		line 153 in file "ir_decoder.c"
   357 ;; Parameters:    Size  Location     Type
   358 ;;		None
   359 ;; Auto vars:     Size  Location     Type
   360 ;;		None
   361 ;; Return value:  Size  Location     Type
   362 ;;                  1    wreg      void 
   363 ;; Registers used:
   364 ;;		wreg
   365 ;; Tracked objects:
   366 ;;		On entry : 0/0
   367 ;;		On exit  : 0/0
   368 ;;		Unchanged: 0/0
   369 ;; Data sizes:     COMMON   BANK0   BANK1
   370 ;;      Params:         0       0       0
   371 ;;      Locals:         0       0       0
   372 ;;      Temps:          0       0       0
   373 ;;      Totals:         0       0       0
   374 ;;Total ram usage:        0 bytes
   375 ;; Hardware stack levels used:    1
   376 ;; Hardware stack levels required when called:    4
   377 ;; This function calls:
   378 ;;		Nothing
   379 ;; This function is called by:
   380 ;;		_main
   381 ;; This function uses a non-reentrant model
   382 ;;
   383                           
   384                           
   385                           ;psect for function _setup_ir_decoder
   386  01A4                     _setup_ir_decoder:	
   387                           
   388                           ;ir_decoder.c: 155: TRISBbits.TRISB0 = 1;
   389                           
   390                           ;incstack = 0
   391                           ; Regs used in _setup_ir_decoder: [wreg]
   392  01A4  1683               	bsf	3,5	;RP0=1, select bank1
   393  01A5  1406               	bsf	6,0	;volatile
   394                           
   395                           ;ir_decoder.c: 157: T1CONbits.T1SYNC = 1;
   396  01A6  1283               	bcf	3,5	;RP0=0, select bank0
   397  01A7  1510               	bsf	16,2	;volatile
   398                           
   399                           ;ir_decoder.c: 158: PIE1bits.TMR1IE = 1;
   400  01A8  1683               	bsf	3,5	;RP0=1, select bank1
   401  01A9  140C               	bsf	12,0	;volatile
   402                           
   403                           ;ir_decoder.c: 159: INTCONbits.PEIE = 1;
   404  01AA  170B               	bsf	11,6	;volatile
   405                           
   406                           ;ir_decoder.c: 160: INTCONbits.GIE = 1;
   407  01AB  178B               	bsf	11,7	;volatile
   408                           
   409                           ;ir_decoder.c: 161: do { T1CONbits.TMR1ON = 0; TMR1H = 255; TMR1L = (255-140+30); PIR1bi
      +                          ts.TMR1IF = 0; T1CONbits.TMR1ON = 1; } while(0);
   410  01AC  1283               	bcf	3,5	;RP0=0, select bank0
   411  01AD  1010               	bcf	16,0	;volatile
   412  01AE  30FF               	movlw	255
   413  01AF  008F               	movwf	15	;volatile
   414  01B0  3091               	movlw	145
   415  01B1  008E               	movwf	14	;volatile
   416  01B2  100C               	bcf	12,0	;volatile
   417  01B3  1410               	bsf	16,0	;volatile
   418  01B4  0008               	return
   419  01B5                     __end_of_setup_ir_decoder:	
   420                           
   421                           	psect	text2
   422  0192                     __ptext2:	
   423 ;; *************** function _ISR *****************
   424 ;; Defined at:
   425 ;;		line 23 in file "main.c"
   426 ;; Parameters:    Size  Location     Type
   427 ;;		None
   428 ;; Auto vars:     Size  Location     Type
   429 ;;		None
   430 ;; Return value:  Size  Location     Type
   431 ;;                  1    wreg      void 
   432 ;; Registers used:
   433 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   434 ;; Tracked objects:
   435 ;;		On entry : 0/0
   436 ;;		On exit  : 0/0
   437 ;;		Unchanged: 0/0
   438 ;; Data sizes:     COMMON   BANK0   BANK1
   439 ;;      Params:         0       0       0
   440 ;;      Locals:         0       0       0
   441 ;;      Temps:          0       4       0
   442 ;;      Totals:         0       4       0
   443 ;;Total ram usage:        4 bytes
   444 ;; Hardware stack levels used:    1
   445 ;; Hardware stack levels required when called:    3
   446 ;; This function calls:
   447 ;;		_timer1_interrupt_decoder
   448 ;; This function is called by:
   449 ;;		Interrupt level 1
   450 ;; This function uses a non-reentrant model
   451 ;;
   452                           
   453                           
   454                           ;psect for function _ISR
   455  0192                     _ISR:	
   456                           
   457                           ;main.c: 33: if (PIR1bits.TMR1IF && PIE1bits.TMR1IE) {
   458  0192  1C0C               	btfss	12,0	;volatile
   459  0193  2998               	goto	i1l79
   460  0194  1683               	bsf	3,5	;RP0=1, select bank1
   461  0195  1C0C               	btfss	12,0	;volatile
   462  0196  2998               	goto	i1l79
   463                           
   464                           ;main.c: 34: timer1_interrupt_decoder();
   465  0197  201D               	fcall	_timer1_interrupt_decoder
   466  0198                     i1l79:	
   467  0198  1283               	bcf	3,5	;RP0=0, select bank0
   468  0199  082A               	movf	??_ISR+3,w
   469  019A  00FF               	movwf	127
   470  019B  0829               	movf	??_ISR+2,w
   471  019C  008A               	movwf	10
   472  019D  0828               	movf	??_ISR+1,w
   473  019E  0084               	movwf	4
   474  019F  0E27               	swapf	??_ISR^0,w
   475  01A0  0083               	movwf	3
   476  01A1  0EFE               	swapf	126,f
   477  01A2  0E7E               	swapf	126,w
   478  01A3  0009               	retfie
   479  01A4                     __end_of_ISR:	
   480                           
   481                           	psect	intentry
   482  0004                     __pintentry:	
   483                           ;incstack = 0
   484                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   485                           
   486  0004                     interrupt_function:	
   487  007E                     saved_w	set	btemp
   488  0004  00FE               	movwf	btemp
   489  0005  0E03               	swapf	3,w
   490  0006  1283               	bcf	3,5	;RP0=0, select bank0
   491  0007  00A7               	movwf	??_ISR
   492  0008  0804               	movf	4,w
   493  0009  00A8               	movwf	??_ISR+1
   494  000A  080A               	movf	10,w
   495  000B  00A9               	movwf	??_ISR+2
   496  000C  087F               	movf	btemp+1,w
   497  000D  00AA               	movwf	??_ISR+3
   498  000E  2992               	ljmp	_ISR
   499                           
   500                           	psect	text3
   501  001D                     __ptext3:	
   502 ;; *************** function _timer1_interrupt_decoder *****************
   503 ;; Defined at:
   504 ;;		line 61 in file "ir_decoder.c"
   505 ;; Parameters:    Size  Location     Type
   506 ;;		None
   507 ;; Auto vars:     Size  Location     Type
   508 ;;		None
   509 ;; Return value:  Size  Location     Type
   510 ;;                  1    wreg      void 
   511 ;; Registers used:
   512 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   513 ;; Tracked objects:
   514 ;;		On entry : 0/0
   515 ;;		On exit  : 0/0
   516 ;;		Unchanged: 0/0
   517 ;; Data sizes:     COMMON   BANK0   BANK1
   518 ;;      Params:         0       0       0
   519 ;;      Locals:         0       0       0
   520 ;;      Temps:          7       0       0
   521 ;;      Totals:         7       0       0
   522 ;;Total ram usage:        7 bytes
   523 ;; Hardware stack levels used:    1
   524 ;; Hardware stack levels required when called:    2
   525 ;; This function calls:
   526 ;;		_exactly_on
   527 ;; This function is called by:
   528 ;;		_ISR
   529 ;; This function uses a non-reentrant model
   530 ;;
   531                           
   532                           
   533                           ;psect for function _timer1_interrupt_decoder
   534  001D                     _timer1_interrupt_decoder:	
   535                           
   536                           ;incstack = 0
   537                           ; Regs used in _timer1_interrupt_decoder: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   538                           ;ir_decoder.c: 63: static volatile ir_decoder_state_t decoder_state = STATE_IDLE;
   539                           ;ir_decoder.c: 64: static volatile uint8_t bit_count = 0;
   540                           ;ir_decoder.c: 65: static volatile uint8_t state_timer = 0;
   541                           ;ir_decoder.c: 67: do { T1CONbits.TMR1ON = 0; TMR1H = 255; TMR1L = (255-140+30); PIR1bit
      +                          s.TMR1IF = 0; T1CONbits.TMR1ON = 1; } while(0);
   542  001D  1283               	bcf	3,5	;RP0=0, select bank0
   543  001E  1010               	bcf	16,0	;volatile
   544  001F  30FF               	movlw	255
   545  0020  008F               	movwf	15	;volatile
   546  0021  3091               	movlw	145
   547  0022  008E               	movwf	14	;volatile
   548  0023  100C               	bcf	12,0	;volatile
   549  0024  1410               	bsf	16,0	;volatile
   550                           
   551                           ;ir_decoder.c: 70: if (ir_data_valid)
   552  0025  0826               	movf	_ir_data_valid,w	;volatile
   553  0026  1D03               	btfss	3,2
   554  0027  0008               	return
   555  0028  28EF               	goto	i1l958
   556  0029                     i1l36:	
   557                           ;ir_decoder.c: 74: case STATE_IDLE:
   558                           
   559                           ;ir_decoder.c: 73: switch (decoder_state) {
   560                           
   561                           ;ir_decoder.c: 71: return;
   562                           
   563                           
   564                           ;ir_decoder.c: 76: if (PORTBbits.RB0)
   565  0029  1806               	btfsc	6,0	;volatile
   566  002A  0008               	return
   567                           
   568                           ;ir_decoder.c: 78: state_timer = 0; decoder_state = (STATE_START);
   569                           
   570                           ;ir_decoder.c: 77: return;
   571  002B  01FC               	clrf	timer1_interrupt_decoder@state_timer	;volatile
   572  002C  3001               	movlw	1
   573  002D  00F5               	movwf	??_timer1_interrupt_decoder
   574  002E  0875               	movf	??_timer1_interrupt_decoder,w
   575  002F  00A5               	movwf	timer1_interrupt_decoder@decoder_state	;volatile
   576                           
   577                           ;ir_decoder.c: 79: bit_count = 0;
   578  0030  01FD               	clrf	timer1_interrupt_decoder@bit_count	;volatile
   579                           
   580                           ;ir_decoder.c: 80: return;
   581  0031  0008               	return
   582  0032                     i1l854:	
   583                           ;ir_decoder.c: 81: case STATE_START:
   584                           
   585                           
   586                           ;ir_decoder.c: 83: exactly_on(1);
   587  0032  3001               	movlw	1
   588  0033  20FB               	fcall	_exactly_on
   589                           
   590                           ;ir_decoder.c: 84: if (!PORTBbits.RB0) {
   591  0034  1283               	bcf	3,5	;RP0=0, select bank0
   592  0035  1806               	btfsc	6,0	;volatile
   593  0036  283C               	goto	i1l862
   594                           
   595                           ;ir_decoder.c: 85: state_timer++;
   596  0037  3001               	movlw	1
   597  0038  00F5               	movwf	??_timer1_interrupt_decoder
   598  0039  0875               	movf	??_timer1_interrupt_decoder,w
   599  003A  07FC               	addwf	timer1_interrupt_decoder@state_timer,f	;volatile
   600                           
   601                           ;ir_decoder.c: 86: return;
   602  003B  0008               	return
   603  003C                     i1l862:	
   604                           
   605                           ;ir_decoder.c: 87: }
   606                           ;ir_decoder.c: 89: if (((((9000/140)-15) <= ((state_timer))) && (((state_timer)) <= ((90
      +                          00/140)+15)))) {
   607  003C  3031               	movlw	49
   608  003D  027C               	subwf	timer1_interrupt_decoder@state_timer,w	;volatile
   609  003E  1C03               	skipc
   610  003F  284A               	goto	i1l872
   611  0040  3050               	movlw	80
   612  0041  027C               	subwf	timer1_interrupt_decoder@state_timer,w	;volatile
   613  0042  1803               	skipnc
   614  0043  284A               	goto	i1l872
   615                           
   616                           ;ir_decoder.c: 90: state_timer = 0; decoder_state = (STATE_START_GAP);
   617  0044  01FC               	clrf	timer1_interrupt_decoder@state_timer	;volatile
   618  0045  3002               	movlw	2
   619  0046  00F5               	movwf	??_timer1_interrupt_decoder
   620  0047  0875               	movf	??_timer1_interrupt_decoder,w
   621  0048  00A5               	movwf	timer1_interrupt_decoder@decoder_state	;volatile
   622                           
   623                           ;ir_decoder.c: 91: return;
   624  0049  0008               	return
   625  004A                     i1l872:	
   626                           
   627                           ;ir_decoder.c: 92: }
   628                           ;ir_decoder.c: 94: decoder_state = STATE_IDLE;
   629  004A  01A5               	clrf	timer1_interrupt_decoder@decoder_state	;volatile
   630                           
   631                           ;ir_decoder.c: 95: return;
   632  004B  0008               	return
   633  004C                     i1l876:	
   634                           ;ir_decoder.c: 96: case STATE_START_GAP:
   635                           
   636                           
   637                           ;ir_decoder.c: 98: exactly_on(2);
   638  004C  3002               	movlw	2
   639  004D  20FB               	fcall	_exactly_on
   640                           
   641                           ;ir_decoder.c: 99: if (PORTBbits.RB0) {
   642  004E  1283               	bcf	3,5	;RP0=0, select bank0
   643  004F  1C06               	btfss	6,0	;volatile
   644  0050  2856               	goto	i1l884
   645                           
   646                           ;ir_decoder.c: 100: state_timer++;
   647  0051  3001               	movlw	1
   648  0052  00F5               	movwf	??_timer1_interrupt_decoder
   649  0053  0875               	movf	??_timer1_interrupt_decoder,w
   650  0054  07FC               	addwf	timer1_interrupt_decoder@state_timer,f	;volatile
   651                           
   652                           ;ir_decoder.c: 101: return;
   653  0055  0008               	return
   654  0056                     i1l884:	
   655                           
   656                           ;ir_decoder.c: 102: }
   657                           ;ir_decoder.c: 103: if (!((((4500/140)-15) <= ((state_timer))) && (((state_timer)) <= ((
      +                          4500/140)+15)))) {
   658  0056  3011               	movlw	17
   659  0057  027C               	subwf	timer1_interrupt_decoder@state_timer,w	;volatile
   660  0058  1C03               	skipc
   661  0059  285E               	goto	i1l888
   662  005A  3030               	movlw	48
   663  005B  027C               	subwf	timer1_interrupt_decoder@state_timer,w	;volatile
   664  005C  1C03               	skipc
   665  005D  2860               	goto	i1l892
   666  005E                     i1l888:	
   667                           
   668                           ;ir_decoder.c: 104: decoder_state = STATE_IDLE;
   669  005E  01A5               	clrf	timer1_interrupt_decoder@decoder_state	;volatile
   670                           
   671                           ;ir_decoder.c: 105: return;
   672  005F  0008               	return
   673  0060                     i1l892:	
   674                           
   675                           ;ir_decoder.c: 106: }
   676                           ;ir_decoder.c: 108: state_timer = 0; decoder_state = (STATE_BURST);
   677  0060  01FC               	clrf	timer1_interrupt_decoder@state_timer	;volatile
   678  0061  3003               	movlw	3
   679  0062  00F5               	movwf	??_timer1_interrupt_decoder
   680  0063  0875               	movf	??_timer1_interrupt_decoder,w
   681  0064  00A5               	movwf	timer1_interrupt_decoder@decoder_state	;volatile
   682                           
   683                           ;ir_decoder.c: 109: return;
   684  0065  0008               	return
   685  0066                     i1l898:	
   686                           ;ir_decoder.c: 110: case STATE_BURST:
   687                           
   688                           
   689                           ;ir_decoder.c: 111: exactly_on(3);
   690  0066  3003               	movlw	3
   691  0067  20FB               	fcall	_exactly_on
   692                           
   693                           ;ir_decoder.c: 112: if (!PORTBbits.RB0) {
   694  0068  1283               	bcf	3,5	;RP0=0, select bank0
   695  0069  1806               	btfsc	6,0	;volatile
   696  006A  2870               	goto	i1l906
   697                           
   698                           ;ir_decoder.c: 113: state_timer++;
   699  006B  3001               	movlw	1
   700  006C  00F5               	movwf	??_timer1_interrupt_decoder
   701  006D  0875               	movf	??_timer1_interrupt_decoder,w
   702  006E  07FC               	addwf	timer1_interrupt_decoder@state_timer,f	;volatile
   703                           
   704                           ;ir_decoder.c: 114: return;
   705  006F  0008               	return
   706  0070                     i1l906:	
   707                           
   708                           ;ir_decoder.c: 115: }
   709                           ;ir_decoder.c: 117: if (!((((562/140)-3) <= ((state_timer))) && (((state_timer)) <= ((56
      +                          2/140)+3)))) {
   710  0070  087C               	movf	timer1_interrupt_decoder@state_timer,w	;volatile
   711  0071  1903               	btfsc	3,2
   712  0072  2877               	goto	i1l910
   713  0073  3008               	movlw	8
   714  0074  027C               	subwf	timer1_interrupt_decoder@state_timer,w	;volatile
   715  0075  1C03               	skipc
   716  0076  2879               	goto	i1l912
   717  0077                     i1l910:	
   718                           
   719                           ;ir_decoder.c: 118: decoder_state = STATE_IDLE;
   720  0077  01A5               	clrf	timer1_interrupt_decoder@decoder_state	;volatile
   721                           
   722                           ;ir_decoder.c: 119: } else {
   723  0078  0008               	return
   724  0079                     i1l912:	
   725                           
   726                           ;ir_decoder.c: 120: state_timer = 0; decoder_state = (STATE_GAP);
   727  0079  01FC               	clrf	timer1_interrupt_decoder@state_timer	;volatile
   728  007A  3004               	movlw	4
   729  007B  00F5               	movwf	??_timer1_interrupt_decoder
   730  007C  0875               	movf	??_timer1_interrupt_decoder,w
   731  007D  00A5               	movwf	timer1_interrupt_decoder@decoder_state	;volatile
   732                           
   733                           ;ir_decoder.c: 121: }
   734                           ;ir_decoder.c: 122: return;
   735  007E  0008               	return
   736  007F                     i1l918:	
   737                           ;ir_decoder.c: 123: case STATE_GAP:
   738                           
   739                           
   740                           ;ir_decoder.c: 124: exactly_on(4);
   741  007F  3004               	movlw	4
   742  0080  20FB               	fcall	_exactly_on
   743                           
   744                           ;ir_decoder.c: 125: if (PORTBbits.RB0) {
   745  0081  1283               	bcf	3,5	;RP0=0, select bank0
   746  0082  1C06               	btfss	6,0	;volatile
   747  0083  2889               	goto	i1l926
   748                           
   749                           ;ir_decoder.c: 126: state_timer++;
   750  0084  3001               	movlw	1
   751  0085  00F5               	movwf	??_timer1_interrupt_decoder
   752  0086  0875               	movf	??_timer1_interrupt_decoder,w
   753  0087  07FC               	addwf	timer1_interrupt_decoder@state_timer,f	;volatile
   754                           
   755                           ;ir_decoder.c: 127: return;
   756  0088  0008               	return
   757  0089                     i1l926:	
   758                           
   759                           ;ir_decoder.c: 128: }
   760                           ;ir_decoder.c: 129: if (((((562/140)-3) <= ((state_timer))) && (((state_timer)) <= ((562
      +                          /140)+3)))) {
   761  0089  087C               	movf	timer1_interrupt_decoder@state_timer,w	;volatile
   762  008A  1903               	btfsc	3,2
   763  008B  28B0               	goto	i1l932
   764  008C  3008               	movlw	8
   765  008D  027C               	subwf	timer1_interrupt_decoder@state_timer,w	;volatile
   766  008E  1803               	skipnc
   767  008F  28B0               	goto	i1l932
   768                           
   769                           ;ir_decoder.c: 131: ir_data &= ~(1u << (31u - bit_count));
   770  0090  037D               	decf	timer1_interrupt_decoder@bit_count,w
   771  0091  3AFF               	xorlw	255
   772  0092  3E1F               	addlw	31
   773  0093  00F5               	movwf	??_timer1_interrupt_decoder
   774  0094  0AF5               	incf	??_timer1_interrupt_decoder,f
   775  0095  3001               	movlw	1
   776  0096  00F6               	movwf	??_timer1_interrupt_decoder+1
   777  0097  3000               	movlw	0
   778  0098  00F7               	movwf	??_timer1_interrupt_decoder+2
   779  0099  289D               	goto	u52_24
   780  009A                     u52_25:	
   781  009A  1003               	clrc
   782  009B  0DF6               	rlf	??_timer1_interrupt_decoder+1,f
   783  009C  0DF7               	rlf	??_timer1_interrupt_decoder+2,f
   784  009D                     u52_24:	
   785  009D  0BF5               	decfsz	??_timer1_interrupt_decoder,f
   786  009E  289A               	goto	u52_25
   787  009F  09F6               	comf	??_timer1_interrupt_decoder+1,f
   788  00A0  09F7               	comf	??_timer1_interrupt_decoder+2,f
   789  00A1  0876               	movf	??_timer1_interrupt_decoder+1,w
   790  00A2  00F8               	movwf	??_timer1_interrupt_decoder+3
   791  00A3  0877               	movf	??_timer1_interrupt_decoder+2,w
   792  00A4  00F9               	movwf	??_timer1_interrupt_decoder+4
   793  00A5  01FA               	clrf	??_timer1_interrupt_decoder+5
   794  00A6  01FB               	clrf	??_timer1_interrupt_decoder+6
   795  00A7  0878               	movf	??_timer1_interrupt_decoder+3,w
   796  00A8  05A0               	andwf	_ir_data,f	;volatile
   797  00A9  0879               	movf	??_timer1_interrupt_decoder+4,w
   798  00AA  05A1               	andwf	_ir_data+1,f	;volatile
   799  00AB  087A               	movf	??_timer1_interrupt_decoder+5,w
   800  00AC  05A2               	andwf	_ir_data+2,f	;volatile
   801  00AD  087B               	movf	??_timer1_interrupt_decoder+6,w
   802  00AE  05A3               	andwf	_ir_data+3,f	;volatile
   803                           
   804                           ;ir_decoder.c: 132: } else if (((((1675/140)-3) <= ((state_timer))) && (((state_timer)) 
      +                          <= ((1675/140)+3)))) {
   805  00AF  28D8               	goto	i1l942
   806  00B0                     i1l932:	
   807  00B0  3008               	movlw	8
   808  00B1  027C               	subwf	timer1_interrupt_decoder@state_timer,w	;volatile
   809  00B2  1C03               	skipc
   810  00B3  28D6               	goto	i1l938
   811  00B4  300F               	movlw	15
   812  00B5  027C               	subwf	timer1_interrupt_decoder@state_timer,w	;volatile
   813  00B6  1803               	skipnc
   814  00B7  28D6               	goto	i1l938
   815                           
   816                           ;ir_decoder.c: 134: ir_data |= (1u << (31u - bit_count));
   817  00B8  037D               	decf	timer1_interrupt_decoder@bit_count,w
   818  00B9  3AFF               	xorlw	255
   819  00BA  3E1F               	addlw	31
   820  00BB  00F5               	movwf	??_timer1_interrupt_decoder
   821  00BC  0AF5               	incf	??_timer1_interrupt_decoder,f
   822  00BD  3001               	movlw	1
   823  00BE  00F6               	movwf	??_timer1_interrupt_decoder+1
   824  00BF  3000               	movlw	0
   825  00C0  00F7               	movwf	??_timer1_interrupt_decoder+2
   826  00C1  28C5               	goto	u55_24
   827  00C2                     u55_25:	
   828  00C2  1003               	clrc
   829  00C3  0DF6               	rlf	??_timer1_interrupt_decoder+1,f
   830  00C4  0DF7               	rlf	??_timer1_interrupt_decoder+2,f
   831  00C5                     u55_24:	
   832  00C5  0BF5               	decfsz	??_timer1_interrupt_decoder,f
   833  00C6  28C2               	goto	u55_25
   834  00C7  0876               	movf	??_timer1_interrupt_decoder+1,w
   835  00C8  00F8               	movwf	??_timer1_interrupt_decoder+3
   836  00C9  0877               	movf	??_timer1_interrupt_decoder+2,w
   837  00CA  00F9               	movwf	??_timer1_interrupt_decoder+4
   838  00CB  01FA               	clrf	??_timer1_interrupt_decoder+5
   839  00CC  01FB               	clrf	??_timer1_interrupt_decoder+6
   840  00CD  0878               	movf	??_timer1_interrupt_decoder+3,w
   841  00CE  04A0               	iorwf	_ir_data,f	;volatile
   842  00CF  0879               	movf	??_timer1_interrupt_decoder+4,w
   843  00D0  04A1               	iorwf	_ir_data+1,f	;volatile
   844  00D1  087A               	movf	??_timer1_interrupt_decoder+5,w
   845  00D2  04A2               	iorwf	_ir_data+2,f	;volatile
   846  00D3  087B               	movf	??_timer1_interrupt_decoder+6,w
   847  00D4  04A3               	iorwf	_ir_data+3,f	;volatile
   848                           
   849                           ;ir_decoder.c: 135: } else {
   850  00D5  28D8               	goto	i1l942
   851  00D6                     i1l938:	
   852                           
   853                           ;ir_decoder.c: 137: decoder_state = STATE_IDLE;
   854  00D6  01A5               	clrf	timer1_interrupt_decoder@decoder_state	;volatile
   855                           
   856                           ;ir_decoder.c: 138: return;
   857  00D7  0008               	return
   858  00D8                     i1l942:	
   859                           
   860                           ;ir_decoder.c: 139: }
   861                           ;ir_decoder.c: 141: bit_count++;
   862  00D8  3001               	movlw	1
   863  00D9  00F5               	movwf	??_timer1_interrupt_decoder
   864  00DA  0875               	movf	??_timer1_interrupt_decoder,w
   865  00DB  07FD               	addwf	timer1_interrupt_decoder@bit_count,f	;volatile
   866                           
   867                           ;ir_decoder.c: 142: if (bit_count == 32) {
   868  00DC  3020               	movlw	32
   869  00DD  067D               	xorwf	timer1_interrupt_decoder@bit_count,w	;volatile
   870  00DE  1D03               	btfss	3,2
   871  00DF  28E8               	goto	i1l950
   872                           
   873                           ;ir_decoder.c: 143: ir_data_valid = 1;
   874  00E0  3001               	movlw	1
   875  00E1  00F5               	movwf	??_timer1_interrupt_decoder
   876  00E2  0875               	movf	??_timer1_interrupt_decoder,w
   877  00E3  00A6               	movwf	_ir_data_valid	;volatile
   878                           
   879                           ;ir_decoder.c: 144: decoder_state = STATE_IDLE;
   880  00E4  01A5               	clrf	timer1_interrupt_decoder@decoder_state	;volatile
   881                           
   882                           ;ir_decoder.c: 145: exactly_on(5);
   883  00E5  3005               	movlw	5
   884  00E6  20FB               	fcall	_exactly_on
   885                           
   886                           ;ir_decoder.c: 146: } else {
   887  00E7  0008               	return
   888  00E8                     i1l950:	
   889                           
   890                           ;ir_decoder.c: 147: state_timer = 0; decoder_state = (STATE_BURST);
   891  00E8  01FC               	clrf	timer1_interrupt_decoder@state_timer	;volatile
   892  00E9  3003               	movlw	3
   893  00EA  00F5               	movwf	??_timer1_interrupt_decoder
   894  00EB  0875               	movf	??_timer1_interrupt_decoder,w
   895  00EC  1283               	bcf	3,5	;RP0=0, select bank0
   896  00ED  00A5               	movwf	timer1_interrupt_decoder@decoder_state	;volatile
   897                           
   898                           ;ir_decoder.c: 150: }
   899                           
   900                           ;ir_decoder.c: 148: }
   901                           ;ir_decoder.c: 149: return;
   902  00EE  0008               	return
   903  00EF                     i1l958:	
   904  00EF  0825               	movf	timer1_interrupt_decoder@decoder_state,w	;volatile
   905                           
   906                           ; Switch size 1, requested type "space"
   907                           ; Number of cases is 5, Range of values is 0 to 4
   908                           ; switch strategies available:
   909                           ; Name         Instructions Cycles
   910                           ; direct_byte           11     6 (fixed)
   911                           ; simple_byte           16     9 (average)
   912                           ; jumptable            260     6 (fixed)
   913                           ;	Chosen strategy is direct_byte
   914  00F0  0084               	movwf	4
   915  00F1  3005               	movlw	5
   916  00F2  0204               	subwf	4,w
   917  00F3  1803               	skipnc
   918  00F4  0008               	return
   919  00F5  3001               	movlw	high i1S1048
   920  00F6  008A               	movwf	10
   921  00F7  30C4               	movlw	low i1S1048
   922  00F8  0704               	addwf	4,w
   923  00F9  0082               	movwf	2
   924  00FA  0008               	return
   925  00FB                     __end_of_timer1_interrupt_decoder:	
   926                           
   927                           	psect	swtext1
   928  01C4                     __pswtext1:	
   929  01C4                     i1S1048:	
   930  01C4  2829               	ljmp	i1l36
   931  01C5  2832               	ljmp	i1l854
   932  01C6  284C               	ljmp	i1l876
   933  01C7  2866               	ljmp	i1l898
   934  01C8  287F               	ljmp	i1l918
   935                           
   936                           	psect	text4
   937  00FB                     __ptext4:	
   938 ;; *************** function _exactly_on *****************
   939 ;; Defined at:
   940 ;;		line 23 in file "leds.c"
   941 ;; Parameters:    Size  Location     Type
   942 ;;  which           1    wreg     unsigned char 
   943 ;; Auto vars:     Size  Location     Type
   944 ;;  which           1    4[COMMON] unsigned char 
   945 ;; Return value:  Size  Location     Type
   946 ;;                  1    wreg      void 
   947 ;; Registers used:
   948 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   949 ;; Tracked objects:
   950 ;;		On entry : 0/0
   951 ;;		On exit  : 0/0
   952 ;;		Unchanged: 0/0
   953 ;; Data sizes:     COMMON   BANK0   BANK1
   954 ;;      Params:         0       0       0
   955 ;;      Locals:         1       0       0
   956 ;;      Temps:          0       0       0
   957 ;;      Totals:         1       0       0
   958 ;;Total ram usage:        1 bytes
   959 ;; Hardware stack levels used:    1
   960 ;; Hardware stack levels required when called:    1
   961 ;; This function calls:
   962 ;;		_all_off
   963 ;;		_leda_on
   964 ;;		_ledb_on
   965 ;; This function is called by:
   966 ;;		_timer1_interrupt_decoder
   967 ;; This function uses a non-reentrant model
   968 ;;
   969                           
   970                           
   971                           ;psect for function _exactly_on
   972  00FB                     _exactly_on:	
   973                           
   974                           ;incstack = 0
   975                           ; Regs used in _exactly_on: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   976                           ;exactly_on@which stored from wreg
   977  00FB  00F4               	movwf	exactly_on@which
   978                           
   979                           ;leds.c: 24: all_off();
   980  00FC  21BD               	fcall	_all_off
   981                           
   982                           ;leds.c: 25: switch (which) {
   983  00FD  2922               	goto	i1l828
   984  00FE                     i1l810:	
   985                           ;leds.c: 26: case 0:
   986                           
   987                           
   988                           ;leds.c: 27: leda_on(0, 0);
   989  00FE  01F0               	clrf	leda_on@dir
   990  00FF  3000               	movlw	0
   991  0100  2160               	fcall	_leda_on
   992                           
   993                           ;leds.c: 28: break;
   994  0101  0008               	return
   995  0102                     i1l812:	
   996                           ;leds.c: 29: case 1:
   997                           
   998                           
   999                           ;leds.c: 30: leda_on(2, 0);
  1000  0102  01F0               	clrf	leda_on@dir
  1001  0103  3002               	movlw	2
  1002  0104  2160               	fcall	_leda_on
  1003                           
  1004                           ;leds.c: 31: break;
  1005  0105  0008               	return
  1006  0106                     i1l814:	
  1007                           ;leds.c: 32: case 2:
  1008                           
  1009                           
  1010                           ;leds.c: 33: ledb_on(3, 0);
  1011  0106  01F0               	clrf	ledb_on@dir
  1012  0107  3003               	movlw	3
  1013  0108  212E               	fcall	_ledb_on
  1014                           
  1015                           ;leds.c: 34: break;
  1016  0109  0008               	return
  1017  010A                     i1l816:	
  1018                           ;leds.c: 35: case 3:
  1019                           
  1020                           
  1021                           ;leds.c: 36: ledb_on(3, 1);
  1022  010A  01F0               	clrf	ledb_on@dir
  1023  010B  0AF0               	incf	ledb_on@dir,f
  1024  010C  3003               	movlw	3
  1025  010D  212E               	fcall	_ledb_on
  1026                           
  1027                           ;leds.c: 37: break;
  1028  010E  0008               	return
  1029  010F                     i1l818:	
  1030                           ;leds.c: 38: case 4:
  1031                           
  1032                           
  1033                           ;leds.c: 39: leda_on(0, 1);
  1034  010F  01F0               	clrf	leda_on@dir
  1035  0110  0AF0               	incf	leda_on@dir,f
  1036  0111  3000               	movlw	0
  1037  0112  2160               	fcall	_leda_on
  1038                           
  1039                           ;leds.c: 40: break;
  1040  0113  0008               	return
  1041  0114                     i1l820:	
  1042                           ;leds.c: 41: case 5:
  1043                           
  1044                           
  1045                           ;leds.c: 42: leda_on(2, 1);
  1046  0114  01F0               	clrf	leda_on@dir
  1047  0115  0AF0               	incf	leda_on@dir,f
  1048  0116  3002               	movlw	2
  1049  0117  2160               	fcall	_leda_on
  1050                           
  1051                           ;leds.c: 43: break;
  1052  0118  0008               	return
  1053  0119                     i1l822:	
  1054                           ;leds.c: 44: case 6:
  1055                           
  1056                           
  1057                           ;leds.c: 45: leda_on(3, 0);
  1058  0119  01F0               	clrf	leda_on@dir
  1059  011A  3003               	movlw	3
  1060  011B  2160               	fcall	_leda_on
  1061                           
  1062                           ;leds.c: 46: break;
  1063  011C  0008               	return
  1064  011D                     i1l824:	
  1065                           ;leds.c: 47: case 7:
  1066                           
  1067                           
  1068                           ;leds.c: 48: leda_on(3, 1);
  1069  011D  01F0               	clrf	leda_on@dir
  1070  011E  0AF0               	incf	leda_on@dir,f
  1071  011F  3003               	movlw	3
  1072  0120  2160               	fcall	_leda_on
  1073                           
  1074                           ;leds.c: 50: }
  1075                           
  1076                           ;leds.c: 49: break;
  1077  0121  0008               	return
  1078  0122                     i1l828:	
  1079  0122  0874               	movf	exactly_on@which,w
  1080                           
  1081                           ; Switch size 1, requested type "space"
  1082                           ; Number of cases is 8, Range of values is 0 to 7
  1083                           ; switch strategies available:
  1084                           ; Name         Instructions Cycles
  1085                           ; direct_byte           14     6 (fixed)
  1086                           ; simple_byte           25    13 (average)
  1087                           ; jumptable            260     6 (fixed)
  1088                           ;	Chosen strategy is direct_byte
  1089  0123  0084               	movwf	4
  1090  0124  3008               	movlw	8
  1091  0125  0204               	subwf	4,w
  1092  0126  1803               	skipnc
  1093  0127  0008               	return
  1094  0128  3001               	movlw	high i1S1050
  1095  0129  008A               	movwf	10
  1096  012A  30B5               	movlw	low i1S1050
  1097  012B  0704               	addwf	4,w
  1098  012C  0082               	movwf	2
  1099  012D  0008               	return
  1100  012E                     __end_of_exactly_on:	
  1101                           
  1102                           	psect	swtext2
  1103  01B5                     __pswtext2:	
  1104  01B5                     i1S1050:	
  1105  01B5  28FE               	ljmp	i1l810
  1106  01B6  2902               	ljmp	i1l812
  1107  01B7  2906               	ljmp	i1l814
  1108  01B8  290A               	ljmp	i1l816
  1109  01B9  290F               	ljmp	i1l818
  1110  01BA  2914               	ljmp	i1l820
  1111  01BB  2919               	ljmp	i1l822
  1112  01BC  291D               	ljmp	i1l824
  1113                           
  1114                           	psect	text5
  1115  012E                     __ptext5:	
  1116 ;; *************** function _ledb_on *****************
  1117 ;; Defined at:
  1118 ;;		line 75 in file "leds.c"
  1119 ;; Parameters:    Size  Location     Type
  1120 ;;  pos             1    wreg     unsigned char 
  1121 ;;  dir             1    0[COMMON] unsigned char 
  1122 ;; Auto vars:     Size  Location     Type
  1123 ;;  pos             1    3[COMMON] unsigned char 
  1124 ;; Return value:  Size  Location     Type
  1125 ;;                  1    wreg      void 
  1126 ;; Registers used:
  1127 ;;		wreg, status,2, status,0
  1128 ;; Tracked objects:
  1129 ;;		On entry : 0/0
  1130 ;;		On exit  : 0/0
  1131 ;;		Unchanged: 0/0
  1132 ;; Data sizes:     COMMON   BANK0   BANK1
  1133 ;;      Params:         1       0       0
  1134 ;;      Locals:         1       0       0
  1135 ;;      Temps:          2       0       0
  1136 ;;      Totals:         4       0       0
  1137 ;;Total ram usage:        4 bytes
  1138 ;; Hardware stack levels used:    1
  1139 ;; This function calls:
  1140 ;;		Nothing
  1141 ;; This function is called by:
  1142 ;;		_exactly_on
  1143 ;;		_timer0_interrupt
  1144 ;; This function uses a non-reentrant model
  1145 ;;
  1146                           
  1147                           
  1148                           ;psect for function _ledb_on
  1149  012E                     _ledb_on:	
  1150                           
  1151                           ;incstack = 0
  1152                           ; Regs used in _ledb_on: [wreg+status,2+status,0]
  1153                           ;ledb_on@pos stored from wreg
  1154  012E  00F3               	movwf	ledb_on@pos
  1155                           
  1156                           ;leds.c: 76: if (dir)
  1157  012F  0870               	movf	ledb_on@dir,w
  1158  0130  1903               	btfsc	3,2
  1159  0131  2941               	goto	i1l806
  1160                           
  1161                           ;leds.c: 77: PORTB |= (1u<<pos);
  1162  0132  3001               	movlw	1
  1163  0133  00F1               	movwf	??_ledb_on
  1164  0134  0A73               	incf	ledb_on@pos,w
  1165  0135  2938               	goto	u35_24
  1166  0136                     u35_25:	
  1167  0136  1003               	clrc
  1168  0137  0DF1               	rlf	??_ledb_on,f
  1169  0138                     u35_24:	
  1170  0138  3EFF               	addlw	-1
  1171  0139  1D03               	skipz
  1172  013A  2936               	goto	u35_25
  1173  013B  0871               	movf	??_ledb_on,w
  1174  013C  00F2               	movwf	??_ledb_on+1
  1175  013D  0872               	movf	??_ledb_on+1,w
  1176  013E  1283               	bcf	3,5	;RP0=0, select bank0
  1177  013F  0486               	iorwf	6,f	;volatile
  1178  0140  2950               	goto	i1l129
  1179  0141                     i1l806:	
  1180                           
  1181                           ;leds.c: 78: else
  1182                           ;leds.c: 79: PORTB &= ~(1u<<pos);
  1183  0141  3001               	movlw	1
  1184  0142  00F1               	movwf	??_ledb_on
  1185  0143  0A73               	incf	ledb_on@pos,w
  1186  0144  2947               	goto	u36_24
  1187  0145                     u36_25:	
  1188  0145  1003               	clrc
  1189  0146  0DF1               	rlf	??_ledb_on,f
  1190  0147                     u36_24:	
  1191  0147  3EFF               	addlw	-1
  1192  0148  1D03               	skipz
  1193  0149  2945               	goto	u36_25
  1194  014A  0871               	movf	??_ledb_on,w
  1195  014B  3AFF               	xorlw	255
  1196  014C  00F2               	movwf	??_ledb_on+1
  1197  014D  0872               	movf	??_ledb_on+1,w
  1198  014E  1283               	bcf	3,5	;RP0=0, select bank0
  1199  014F  0586               	andwf	6,f	;volatile
  1200  0150                     i1l129:	
  1201                           
  1202                           ;leds.c: 80: TRISB &= ~(1u<<pos);
  1203  0150  3001               	movlw	1
  1204  0151  00F1               	movwf	??_ledb_on
  1205  0152  0A73               	incf	ledb_on@pos,w
  1206  0153  2956               	goto	u37_24
  1207  0154                     u37_25:	
  1208  0154  1003               	clrc
  1209  0155  0DF1               	rlf	??_ledb_on,f
  1210  0156                     u37_24:	
  1211  0156  3EFF               	addlw	-1
  1212  0157  1D03               	skipz
  1213  0158  2954               	goto	u37_25
  1214  0159  0871               	movf	??_ledb_on,w
  1215  015A  3AFF               	xorlw	255
  1216  015B  00F2               	movwf	??_ledb_on+1
  1217  015C  0872               	movf	??_ledb_on+1,w
  1218  015D  1683               	bsf	3,5	;RP0=1, select bank1
  1219  015E  0586               	andwf	6,f	;volatile
  1220  015F  0008               	return
  1221  0160                     __end_of_ledb_on:	
  1222                           
  1223                           	psect	text6
  1224  0160                     __ptext6:	
  1225 ;; *************** function _leda_on *****************
  1226 ;; Defined at:
  1227 ;;		line 64 in file "leds.c"
  1228 ;; Parameters:    Size  Location     Type
  1229 ;;  pos             1    wreg     unsigned char 
  1230 ;;  dir             1    0[COMMON] unsigned char 
  1231 ;; Auto vars:     Size  Location     Type
  1232 ;;  pos             1    3[COMMON] unsigned char 
  1233 ;; Return value:  Size  Location     Type
  1234 ;;                  1    wreg      void 
  1235 ;; Registers used:
  1236 ;;		wreg, status,2, status,0
  1237 ;; Tracked objects:
  1238 ;;		On entry : 0/0
  1239 ;;		On exit  : 0/0
  1240 ;;		Unchanged: 0/0
  1241 ;; Data sizes:     COMMON   BANK0   BANK1
  1242 ;;      Params:         1       0       0
  1243 ;;      Locals:         1       0       0
  1244 ;;      Temps:          2       0       0
  1245 ;;      Totals:         4       0       0
  1246 ;;Total ram usage:        4 bytes
  1247 ;; Hardware stack levels used:    1
  1248 ;; This function calls:
  1249 ;;		Nothing
  1250 ;; This function is called by:
  1251 ;;		_exactly_on
  1252 ;;		_timer0_interrupt
  1253 ;; This function uses a non-reentrant model
  1254 ;;
  1255                           
  1256                           
  1257                           ;psect for function _leda_on
  1258  0160                     _leda_on:	
  1259                           
  1260                           ;incstack = 0
  1261                           ; Regs used in _leda_on: [wreg+status,2+status,0]
  1262                           ;leda_on@pos stored from wreg
  1263  0160  00F3               	movwf	leda_on@pos
  1264                           
  1265                           ;leds.c: 65: if (dir)
  1266  0161  0870               	movf	leda_on@dir,w
  1267  0162  1903               	btfsc	3,2
  1268  0163  2973               	goto	i1l800
  1269                           
  1270                           ;leds.c: 66: PORTA |= (1u<<pos);
  1271  0164  3001               	movlw	1
  1272  0165  00F1               	movwf	??_leda_on
  1273  0166  0A73               	incf	leda_on@pos,w
  1274  0167  296A               	goto	u31_24
  1275  0168                     u31_25:	
  1276  0168  1003               	clrc
  1277  0169  0DF1               	rlf	??_leda_on,f
  1278  016A                     u31_24:	
  1279  016A  3EFF               	addlw	-1
  1280  016B  1D03               	skipz
  1281  016C  2968               	goto	u31_25
  1282  016D  0871               	movf	??_leda_on,w
  1283  016E  00F2               	movwf	??_leda_on+1
  1284  016F  0872               	movf	??_leda_on+1,w
  1285  0170  1283               	bcf	3,5	;RP0=0, select bank0
  1286  0171  0485               	iorwf	5,f	;volatile
  1287  0172  2982               	goto	i1l124
  1288  0173                     i1l800:	
  1289                           
  1290                           ;leds.c: 67: else
  1291                           ;leds.c: 68: PORTA &= ~(1u<<pos);
  1292  0173  3001               	movlw	1
  1293  0174  00F1               	movwf	??_leda_on
  1294  0175  0A73               	incf	leda_on@pos,w
  1295  0176  2979               	goto	u32_24
  1296  0177                     u32_25:	
  1297  0177  1003               	clrc
  1298  0178  0DF1               	rlf	??_leda_on,f
  1299  0179                     u32_24:	
  1300  0179  3EFF               	addlw	-1
  1301  017A  1D03               	skipz
  1302  017B  2977               	goto	u32_25
  1303  017C  0871               	movf	??_leda_on,w
  1304  017D  3AFF               	xorlw	255
  1305  017E  00F2               	movwf	??_leda_on+1
  1306  017F  0872               	movf	??_leda_on+1,w
  1307  0180  1283               	bcf	3,5	;RP0=0, select bank0
  1308  0181  0585               	andwf	5,f	;volatile
  1309  0182                     i1l124:	
  1310                           
  1311                           ;leds.c: 69: TRISA &= ~(1u<<pos);
  1312  0182  3001               	movlw	1
  1313  0183  00F1               	movwf	??_leda_on
  1314  0184  0A73               	incf	leda_on@pos,w
  1315  0185  2988               	goto	u33_24
  1316  0186                     u33_25:	
  1317  0186  1003               	clrc
  1318  0187  0DF1               	rlf	??_leda_on,f
  1319  0188                     u33_24:	
  1320  0188  3EFF               	addlw	-1
  1321  0189  1D03               	skipz
  1322  018A  2986               	goto	u33_25
  1323  018B  0871               	movf	??_leda_on,w
  1324  018C  3AFF               	xorlw	255
  1325  018D  00F2               	movwf	??_leda_on+1
  1326  018E  0872               	movf	??_leda_on+1,w
  1327  018F  1683               	bsf	3,5	;RP0=1, select bank1
  1328  0190  0585               	andwf	5,f	;volatile
  1329  0191  0008               	return
  1330  0192                     __end_of_leda_on:	
  1331                           
  1332                           	psect	text7
  1333  01BD                     __ptext7:	
  1334 ;; *************** function _all_off *****************
  1335 ;; Defined at:
  1336 ;;		line 56 in file "leds.c"
  1337 ;; Parameters:    Size  Location     Type
  1338 ;;		None
  1339 ;; Auto vars:     Size  Location     Type
  1340 ;;		None
  1341 ;; Return value:  Size  Location     Type
  1342 ;;                  1    wreg      void 
  1343 ;; Registers used:
  1344 ;;		wreg, status,2, status,0
  1345 ;; Tracked objects:
  1346 ;;		On entry : 0/0
  1347 ;;		On exit  : 0/0
  1348 ;;		Unchanged: 0/0
  1349 ;; Data sizes:     COMMON   BANK0   BANK1
  1350 ;;      Params:         0       0       0
  1351 ;;      Locals:         0       0       0
  1352 ;;      Temps:          1       0       0
  1353 ;;      Totals:         1       0       0
  1354 ;;Total ram usage:        1 bytes
  1355 ;; Hardware stack levels used:    1
  1356 ;; This function calls:
  1357 ;;		Nothing
  1358 ;; This function is called by:
  1359 ;;		_exactly_on
  1360 ;;		_timer0_interrupt
  1361 ;; This function uses a non-reentrant model
  1362 ;;
  1363                           
  1364                           
  1365                           ;psect for function _all_off
  1366  01BD                     _all_off:	
  1367                           
  1368                           ;leds.c: 57: TRISA |= 1 | (1 << 2) | (1 << 3);
  1369                           
  1370                           ;incstack = 0
  1371                           ; Regs used in _all_off: [wreg+status,2+status,0]
  1372  01BD  300D               	movlw	13
  1373  01BE  00F0               	movwf	??_all_off
  1374  01BF  0870               	movf	??_all_off,w
  1375  01C0  1683               	bsf	3,5	;RP0=1, select bank1
  1376  01C1  0485               	iorwf	5,f	;volatile
  1377                           
  1378                           ;leds.c: 58: TRISB |= (1 << 3);
  1379  01C2  1586               	bsf	6,3	;volatile
  1380  01C3  0008               	return
  1381  01C4                     __end_of_all_off:	
  1382  007E                     btemp	set	126	;btemp
  1383  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80      4      12
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_timer1_interrupt_decoder
    _timer1_interrupt_decoder->_exactly_on
    _exactly_on->_leda_on
    _exactly_on->_ledb_on

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                   _setup_ir_decoder
 ---------------------------------------------------------------------------------
 (1) _setup_ir_decoder                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  4     4      0     886
                                              0 BANK0      4     4      0
           _timer1_interrupt_decoder
 ---------------------------------------------------------------------------------
 (3) _timer1_interrupt_decoder                             7     7      0     886
                                              5 COMMON     7     7      0
                         _exactly_on
 ---------------------------------------------------------------------------------
 (4) _exactly_on                                           1     1      0     886
                                              4 COMMON     1     1      0
                            _all_off
                            _leda_on
                            _ledb_on
 ---------------------------------------------------------------------------------
 (5) _ledb_on                                              4     3      1     260
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (5) _leda_on                                              4     3      1     604
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (5) _all_off                                              1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setup_ir_decoder

 _ISR (ROOT)
   _timer1_interrupt_decoder
     _exactly_on
       _all_off
       _leda_on
       _ledb_on

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK1               20      0       0       5        0.0%
BITBANK1            20      0       0       7        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      4       C       4       15.0%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      C       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      1A       8        0.0%
ABS                  0      0      1A       6        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat May 19 20:32:52 2018

             _timer1_interrupt_decoder 001D                                      pc 0002  
                          __CFG_CP$OFF 0000                                     l84 01CA  
                                   fsr 0004                                    _ISR 0192  
                                  fsr0 0004                           __CFG_FOSC$XT 0000  
                                 ?_ISR 0070                                   i1l36 0029  
                                 i1l79 0198  timer1_interrupt_decoder@decoder_state 0025  
                                 _main 01C9                                   btemp 007E  
                                 start 000F                                  ??_ISR 0027  
                                ?_main 0070                          __CFG_WDTE$OFF 0000  
                                i1l124 0182                                  i1l129 0150  
                                i1l800 0173                                  i1l810 00FE  
                                i1l820 0114                                  i1l812 0102  
                                i1l806 0141                                  i1l822 0119  
                                i1l814 0106                                  i1l910 0077  
                                i1l824 011D                                  i1l816 010A  
                                i1l912 0079                                  i1l818 010F  
                                i1l906 0070                                  i1l828 0122  
                                i1l932 00B0                                  i1l950 00E8  
                                i1l942 00D8                                  i1l926 0089  
                                i1l918 007F                                  i1l862 003C  
                                i1l854 0032                                  i1l872 004A  
                                i1l938 00D6                                  i1l892 0060  
                                i1l884 0056                                  i1l876 004C  
                                i1l958 00EF                                  i1l888 005E  
                                i1l898 0066                                  u31_24 016A  
                                u31_25 0168                                  u32_24 0179  
                                u32_25 0177                                  _TMR1H 000F  
                                u33_24 0188                                  u33_25 0186  
                                _TMR1L 000E                                  _PORTA 0005  
                                _PORTB 0006                                  u35_24 0138  
                                u35_25 0136                                  u36_24 0147  
                                u52_24 009D                                  u36_25 0145  
                                u52_25 009A                                  u37_24 0156  
                                u37_25 0154                                  u55_24 00C5  
                                u55_25 00C2                                  _TRISA 0085  
                                _TRISB 0086                        __end_of_all_off 01C4  
                       __CFG_BODENV$40 0000                        __end_of_leda_on 0192  
                      __end_of_ledb_on 0160                         __CFG_BOREN$OFF 0000  
                                pclath 000A                                  status 0003  
                                wtemp0 007E                        __initialization 0010  
                         __end_of_main 01CB                                 ??_main 002B  
                        _ir_data_valid 0026                                 i1S1050 01B5  
                               i1S1048 01C4              __size_of_setup_ir_decoder 0011  
                       __CFG_PWRTE$OFF 0000                    timer0_interrupt@pos 0024  
                            ??_all_off 0070                              ??_leda_on 0071  
                            ??_ledb_on 0071                                 saved_w 007E  
           ??_timer1_interrupt_decoder 0075                __end_of__initialization 001B  
                       __pcstackCOMMON 0070                           __pidataBANK0 01CB  
                       _OPTION_REGbits 0081                             __pbssBANK0 0020  
                           __pmaintext 01C9                             __pintentry 0004  
                     _setup_ir_decoder 01A4                             _exactly_on 00FB  
                              _all_off 01BD      timer1_interrupt_decoder@bit_count 007D  
                              __ptext1 01A4                                __ptext2 0192  
                              __ptext3 001D                                __ptext4 00FB  
                              __ptext5 012E                                __ptext6 0160  
                              __ptext7 01BD                                _leda_on 0160  
                              _ledb_on 012E                           __size_of_ISR 0012  
                            _T1CONbits 0010                                _ir_data 0020  
                 end_of_initialization 001B       __end_of_timer1_interrupt_decoder 00FB  
                            _PORTBbits 0006                              _TRISBbits 0086  
                           leda_on@dir 0070                             leda_on@pos 0073  
                           ledb_on@dir 0070                             ledb_on@pos 0073  
                          ?_exactly_on 0070                    start_initialization 0010  
                          __end_of_ISR 01A4    timer1_interrupt_decoder@state_timer 007C  
                          __pdataBANK0 002B      __size_of_timer1_interrupt_decoder 00DE  
            ?_timer1_interrupt_decoder 0070               __end_of_setup_ir_decoder 01B5  
                          __pbssCOMMON 007C                              ___latbits 0000  
                        __pcstackBANK0 0027                    __size_of_exactly_on 0033  
                      exactly_on@which 0074                               ?_all_off 0070  
                            __pswtext1 01C4                              __pswtext2 01B5  
                             ?_leda_on 0070                               ?_ledb_on 0070  
                    interrupt_function 0004                               _PIE1bits 008C  
                            _move_leds 002B                               _PIR1bits 000C  
                         ??_exactly_on 0074                       __size_of_all_off 0007  
                     __size_of_leda_on 0032                       __size_of_ledb_on 0032  
                   __end_of_exactly_on 012E                          __size_of_main 0002  
                    ?_setup_ir_decoder 0070                             _INTCONbits 000B  
                   ??_setup_ir_decoder 002B                               intlevel1 0000  
