

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed May 16 21:58:14 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F716
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	intentry,global,class=CODE,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	swtext1,local,class=CONST,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	swtext2,local,class=CONST,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    22                           	dabs	1,0x7E,2
    23  0000                     
    24                           ; Version 1.45
    25                           ; Generated 16/11/2017 GMT
    26                           ; 
    27                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC16F716 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     	;# 
    59  0001                     	;# 
    60  0002                     	;# 
    61  0003                     	;# 
    62  0004                     	;# 
    63  0005                     	;# 
    64  0006                     	;# 
    65  0006                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  000E                     	;# 
    70  000E                     	;# 
    71  000F                     	;# 
    72  0010                     	;# 
    73  0011                     	;# 
    74  0012                     	;# 
    75  0015                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0017                     	;# 
    79  0018                     	;# 
    80  0019                     	;# 
    81  001E                     	;# 
    82  001F                     	;# 
    83  0081                     	;# 
    84  0085                     	;# 
    85  0086                     	;# 
    86  0086                     	;# 
    87  008C                     	;# 
    88  008E                     	;# 
    89  0092                     	;# 
    90  009F                     	;# 
    91  0000                     	;# 
    92  0001                     	;# 
    93  0002                     	;# 
    94  0003                     	;# 
    95  0004                     	;# 
    96  0005                     	;# 
    97  0006                     	;# 
    98  0006                     	;# 
    99  000A                     	;# 
   100  000B                     	;# 
   101  000C                     	;# 
   102  000E                     	;# 
   103  000E                     	;# 
   104  000F                     	;# 
   105  0010                     	;# 
   106  0011                     	;# 
   107  0012                     	;# 
   108  0015                     	;# 
   109  0015                     	;# 
   110  0016                     	;# 
   111  0017                     	;# 
   112  0018                     	;# 
   113  0019                     	;# 
   114  001E                     	;# 
   115  001F                     	;# 
   116  0081                     	;# 
   117  0085                     	;# 
   118  0086                     	;# 
   119  0086                     	;# 
   120  008C                     	;# 
   121  008E                     	;# 
   122  0092                     	;# 
   123  009F                     	;# 
   124  0000                     	;# 
   125  0001                     	;# 
   126  0002                     	;# 
   127  0003                     	;# 
   128  0004                     	;# 
   129  0005                     	;# 
   130  0006                     	;# 
   131  0006                     	;# 
   132  000A                     	;# 
   133  000B                     	;# 
   134  000C                     	;# 
   135  000E                     	;# 
   136  000E                     	;# 
   137  000F                     	;# 
   138  0010                     	;# 
   139  0011                     	;# 
   140  0012                     	;# 
   141  0015                     	;# 
   142  0015                     	;# 
   143  0016                     	;# 
   144  0017                     	;# 
   145  0018                     	;# 
   146  0019                     	;# 
   147  001E                     	;# 
   148  001F                     	;# 
   149  0081                     	;# 
   150  0085                     	;# 
   151  0086                     	;# 
   152  0086                     	;# 
   153  008C                     	;# 
   154  008E                     	;# 
   155  0092                     	;# 
   156  009F                     	;# 
   157                           
   158                           	psect	idataBANK0
   159  01E2                     __pidataBANK0:	
   160                           
   161                           ;initializer for _move_leds
   162  01E2  3401               	retlw	1
   163  0006                     _PORTB	set	6
   164  0005                     _PORTA	set	5
   165  000B                     _INTCONbits	set	11
   166  0010                     _T1CONbits	set	16
   167  0006                     _PORTBbits	set	6
   168  000C                     _PIR1bits	set	12
   169  000E                     _TMR1L	set	14
   170  000F                     _TMR1H	set	15
   171  0081                     _OPTION_REGbits	set	129
   172  0086                     _TRISB	set	134
   173  0085                     _TRISA	set	133
   174  008C                     _PIE1bits	set	140
   175  0086                     _TRISBbits	set	134
   176  0433                     _TRISB3	set	1075
   177  042B                     _TRISA3	set	1067
   178  042A                     _TRISA2	set	1066
   179  0428                     _TRISA0	set	1064
   180                           
   181                           ; #config settings
   182  0000                     
   183                           	psect	cinit
   184  0010                     start_initialization:	
   185  0010                     __initialization:	
   186                           
   187                           ; Initialize objects allocated to BANK0
   188  0010  21E2               	fcall	__pidataBANK0	;fetch initializer
   189  0011  00A7               	movwf	__pdataBANK0& (0+127)
   190                           
   191                           ; Clear objects allocated to BANK0
   192  0012  01A0               	clrf	__pbssBANK0& (0+127)
   193  0013  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   194  0014  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   195  0015  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   196  0016  01A4               	clrf	(__pbssBANK0+4)& (0+127)
   197  0017  01A5               	clrf	(__pbssBANK0+5)& (0+127)
   198  0018  01A6               	clrf	(__pbssBANK0+6)& (0+127)
   199                           
   200                           ; Clear objects allocated to COMMON
   201  0019  01FC               	clrf	__pbssCOMMON& (0+127)
   202  001A  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
   203  001B                     end_of_initialization:	
   204                           ;End of C runtime variable initialization code
   205                           
   206  001B                     __end_of__initialization:	
   207  001B  0183               	clrf	3
   208  001C  29E0               	ljmp	_main	;jump to C main() function
   209                           
   210                           	psect	bssCOMMON
   211  007C                     __pbssCOMMON:	
   212  007C                     timer1_interrupt_decoder@state_timer:	
   213  007C                     	ds	1
   214  007D                     timer1_interrupt_decoder@bit_count:	
   215  007D                     	ds	1
   216                           
   217                           	psect	bssBANK0
   218  0020                     __pbssBANK0:	
   219  0020                     _ir_data:	
   220  0020                     	ds	4
   221  0024                     timer0_interrupt@pos:	
   222  0024                     	ds	1
   223  0025                     timer1_interrupt_decoder@decoder_state:	
   224  0025                     	ds	1
   225  0026                     _ir_data_valid:	
   226  0026                     	ds	1
   227                           
   228                           	psect	dataBANK0
   229  0027                     __pdataBANK0:	
   230  0027                     _move_leds:	
   231  0027                     	ds	1
   232                           
   233                           	psect	cstackCOMMON
   234  0070                     __pcstackCOMMON:	
   235  0070                     ?_timer0_interrupt:	
   236  0070                     ?_timer0_setup:	
   237                           ; 1 bytes @ 0x0
   238                           
   239  0070                     ?_timer1_interrupt_decoder:	
   240                           ; 1 bytes @ 0x0
   241                           
   242  0070                     ??_timer1_interrupt_decoder:	
   243                           ; 1 bytes @ 0x0
   244                           
   245  0070                     ?_ISR:	
   246                           ; 1 bytes @ 0x0
   247                           
   248  0070                     ?_main:	
   249                           ; 1 bytes @ 0x0
   250                           
   251  0070                     ?_all_off:	
   252                           ; 1 bytes @ 0x0
   253                           
   254  0070                     ??_all_off:	
   255                           ; 1 bytes @ 0x0
   256                           
   257  0070                     ?_leda_on:	
   258                           ; 1 bytes @ 0x0
   259                           
   260  0070                     ?_ledb_on:	
   261                           ; 1 bytes @ 0x0
   262                           
   263  0070                     leda_on@dir:	
   264                           ; 1 bytes @ 0x0
   265                           
   266  0070                     ledb_on@dir:	
   267                           ; 1 bytes @ 0x0
   268                           
   269                           
   270                           ; 1 bytes @ 0x0
   271  0070                     	ds	1
   272  0071                     ??_leda_on:	
   273  0071                     ??_ledb_on:	
   274                           ; 1 bytes @ 0x1
   275                           
   276                           
   277                           ; 1 bytes @ 0x1
   278  0071                     	ds	2
   279  0073                     leda_on@pos:	
   280  0073                     ledb_on@pos:	
   281                           ; 1 bytes @ 0x3
   282                           
   283                           
   284                           ; 1 bytes @ 0x3
   285  0073                     	ds	1
   286  0074                     ??_timer0_interrupt:	
   287                           
   288                           ; 1 bytes @ 0x4
   289  0074                     	ds	3
   290  0077                     ??_ISR:	
   291                           
   292                           ; 1 bytes @ 0x7
   293  0077                     	ds	5
   294                           
   295                           	psect	cstackBANK0
   296  0000                     __pcstackBANK0:	
   297  0000                     ??_timer0_setup:	
   298  0000                     ??_main:	
   299                           ; 1 bytes @ 0x0
   300                           
   301                           
   302                           	psect	maintext
   303  01E0                     __pmaintext:	
   304                           ; 1 bytes @ 0x0
   305 ;;
   306 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   307 ;;
   308 ;; *************** function _main *****************
   309 ;; Defined at:
   310 ;;		line 36 in file "main.c"
   311 ;; Parameters:    Size  Location     Type
   312 ;;		None
   313 ;; Auto vars:     Size  Location     Type
   314 ;;		None
   315 ;; Return value:  Size  Location     Type
   316 ;;                  1    wreg      void 
   317 ;; Registers used:
   318 ;;		wreg, status,2, status,0, pclath, cstack
   319 ;; Tracked objects:
   320 ;;		On entry : B00/0
   321 ;;		On exit  : 0/0
   322 ;;		Unchanged: 0/0
   323 ;; Data sizes:     COMMON   BANK0   BANK1
   324 ;;      Params:         0       0       0
   325 ;;      Locals:         0       0       0
   326 ;;      Temps:          0       0       0
   327 ;;      Totals:         0       0       0
   328 ;;Total ram usage:        0 bytes
   329 ;; Hardware stack levels required when called:    4
   330 ;; This function calls:
   331 ;;		_timer0_setup
   332 ;; This function is called by:
   333 ;;		Startup code after reset
   334 ;; This function uses a non-reentrant model
   335 ;;
   336                           
   337                           
   338                           ;psect for function _main
   339  01E0                     _main:	
   340                           
   341                           ;main.c: 37: timer0_setup();
   342                           
   343                           ;incstack = 0
   344                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   345  01E0  21CA               	fcall	_timer0_setup
   346  01E1                     l90:	
   347                           ;main.c: 40: for(;;){}
   348                           
   349  01E1  29E1               	goto	l90
   350  01E2                     __end_of_main:	
   351                           
   352                           	psect	text1
   353  01CA                     __ptext1:	
   354 ;; *************** function _timer0_setup *****************
   355 ;; Defined at:
   356 ;;		line 80 in file "leds.c"
   357 ;; Parameters:    Size  Location     Type
   358 ;;		None
   359 ;; Auto vars:     Size  Location     Type
   360 ;;		None
   361 ;; Return value:  Size  Location     Type
   362 ;;                  1    wreg      void 
   363 ;; Registers used:
   364 ;;		wreg, status,2, status,0
   365 ;; Tracked objects:
   366 ;;		On entry : 0/0
   367 ;;		On exit  : 0/0
   368 ;;		Unchanged: 0/0
   369 ;; Data sizes:     COMMON   BANK0   BANK1
   370 ;;      Params:         0       0       0
   371 ;;      Locals:         0       0       0
   372 ;;      Temps:          0       0       0
   373 ;;      Totals:         0       0       0
   374 ;;Total ram usage:        0 bytes
   375 ;; Hardware stack levels used:    1
   376 ;; Hardware stack levels required when called:    3
   377 ;; This function calls:
   378 ;;		Nothing
   379 ;; This function is called by:
   380 ;;		_main
   381 ;; This function uses a non-reentrant model
   382 ;;
   383                           
   384                           
   385                           ;psect for function _timer0_setup
   386  01CA                     _timer0_setup:	
   387                           
   388                           ;leds.c: 81: OPTION_REGbits.PSA = 0;
   389                           
   390                           ;incstack = 0
   391                           ; Regs used in _timer0_setup: [wreg+status,2+status,0]
   392  01CA  1683               	bsf	3,5	;RP0=1, select bank1
   393  01CB  1181               	bcf	1,3	;volatile
   394                           
   395                           ;leds.c: 82: OPTION_REGbits.PS = 0b111;
   396  01CC  3007               	movlw	7
   397  01CD  0481               	iorwf	1,f	;volatile
   398                           
   399                           ;leds.c: 83: OPTION_REGbits.T0CS = 0;
   400  01CE  1281               	bcf	1,5	;volatile
   401                           
   402                           ;leds.c: 84: INTCONbits.T0IF = 0;
   403  01CF  110B               	bcf	11,2	;volatile
   404                           
   405                           ;leds.c: 85: INTCONbits.T0IE = 1;
   406  01D0  168B               	bsf	11,5	;volatile
   407                           
   408                           ;leds.c: 86: INTCONbits.GIE = 1;
   409  01D1  178B               	bsf	11,7	;volatile
   410  01D2  0008               	return
   411  01D3                     __end_of_timer0_setup:	
   412                           
   413                           	psect	text2
   414  018F                     __ptext2:	
   415 ;; *************** function _ISR *****************
   416 ;; Defined at:
   417 ;;		line 23 in file "main.c"
   418 ;; Parameters:    Size  Location     Type
   419 ;;		None
   420 ;; Auto vars:     Size  Location     Type
   421 ;;		None
   422 ;; Return value:  Size  Location     Type
   423 ;;                  1    wreg      void 
   424 ;; Registers used:
   425 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   426 ;; Tracked objects:
   427 ;;		On entry : 0/0
   428 ;;		On exit  : 0/0
   429 ;;		Unchanged: 0/0
   430 ;; Data sizes:     COMMON   BANK0   BANK1
   431 ;;      Params:         0       0       0
   432 ;;      Locals:         0       0       0
   433 ;;      Temps:          5       0       0
   434 ;;      Totals:         5       0       0
   435 ;;Total ram usage:        5 bytes
   436 ;; Hardware stack levels used:    1
   437 ;; Hardware stack levels required when called:    2
   438 ;; This function calls:
   439 ;;		_timer0_interrupt
   440 ;;		_timer1_interrupt_decoder
   441 ;; This function is called by:
   442 ;;		Interrupt level 1
   443 ;; This function uses a non-reentrant model
   444 ;;
   445                           
   446                           
   447                           ;psect for function _ISR
   448  018F                     _ISR:	
   449                           
   450                           ;main.c: 24: if (INTCONbits.T0IF) {
   451  018F  1D0B               	btfss	11,2	;volatile
   452  0190  2992               	goto	i1l907
   453                           
   454                           ;main.c: 25: timer0_interrupt();
   455  0191  20EE               	fcall	_timer0_interrupt
   456  0192                     i1l907:	
   457                           
   458                           ;main.c: 26: }
   459                           ;main.c: 27: if (ir_data_valid) {
   460  0192  1283               	bcf	3,5	;RP0=0, select bank0
   461  0193  0826               	movf	_ir_data_valid,w	;volatile
   462  0194  1903               	btfsc	3,2
   463  0195  299B               	goto	i1l913
   464                           
   465                           ;main.c: 28: move_leds ^= 1;
   466  0196  3001               	movlw	1
   467  0197  00F7               	movwf	??_ISR
   468  0198  0877               	movf	??_ISR,w
   469  0199  06A7               	xorwf	_move_leds,f	;volatile
   470                           
   471                           ;main.c: 29: ir_data_valid = 0;
   472  019A  01A6               	clrf	_ir_data_valid	;volatile
   473  019B                     i1l913:	
   474                           
   475                           ;main.c: 30: }
   476                           ;main.c: 31: if (PIR1bits.TMR1IF && PIE1bits.TMR1IE) {
   477  019B  1C0C               	btfss	12,0	;volatile
   478  019C  29A1               	goto	i1l85
   479  019D  1683               	bsf	3,5	;RP0=1, select bank1
   480  019E  1C0C               	btfss	12,0	;volatile
   481  019F  29A1               	goto	i1l85
   482                           
   483                           ;main.c: 32: timer1_interrupt_decoder();
   484  01A0  201D               	fcall	_timer1_interrupt_decoder
   485  01A1                     i1l85:	
   486  01A1  087B               	movf	??_ISR+4,w
   487  01A2  1283               	bcf	3,5	;RP0=0, select bank0
   488  01A3  00FF               	movwf	127
   489  01A4  087A               	movf	??_ISR+3,w
   490  01A5  008A               	movwf	10
   491  01A6  0879               	movf	??_ISR+2,w
   492  01A7  0084               	movwf	4
   493  01A8  0E78               	swapf	(??_ISR+1)^(0+-128),w
   494  01A9  0083               	movwf	3
   495  01AA  0EFE               	swapf	126,f
   496  01AB  0E7E               	swapf	126,w
   497  01AC  0009               	retfie
   498  01AD                     __end_of_ISR:	
   499                           
   500                           	psect	intentry
   501  0004                     __pintentry:	
   502                           ;incstack = 0
   503                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   504                           
   505  0004                     interrupt_function:	
   506  007E                     saved_w	set	btemp
   507  0004  00FE               	movwf	btemp
   508  0005  0E03               	swapf	3,w
   509  0006  00F8               	movwf	??_ISR+1
   510  0007  0804               	movf	4,w
   511  0008  00F9               	movwf	??_ISR+2
   512  0009  080A               	movf	10,w
   513  000A  00FA               	movwf	??_ISR+3
   514  000B  1283               	bcf	3,5	;RP0=0, select bank0
   515  000C  087F               	movf	btemp+1,w
   516  000D  00FB               	movwf	??_ISR+4
   517  000E  298F               	ljmp	_ISR
   518                           
   519                           	psect	text3
   520  001D                     __ptext3:	
   521 ;; *************** function _timer1_interrupt_decoder *****************
   522 ;; Defined at:
   523 ;;		line 48 in file "ir_decoder.c"
   524 ;; Parameters:    Size  Location     Type
   525 ;;		None
   526 ;; Auto vars:     Size  Location     Type
   527 ;;		None
   528 ;; Return value:  Size  Location     Type
   529 ;;                  1    wreg      void 
   530 ;; Registers used:
   531 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   532 ;; Tracked objects:
   533 ;;		On entry : 0/0
   534 ;;		On exit  : 0/0
   535 ;;		Unchanged: 0/0
   536 ;; Data sizes:     COMMON   BANK0   BANK1
   537 ;;      Params:         0       0       0
   538 ;;      Locals:         0       0       0
   539 ;;      Temps:          7       0       0
   540 ;;      Totals:         7       0       0
   541 ;;Total ram usage:        7 bytes
   542 ;; Hardware stack levels used:    1
   543 ;; This function calls:
   544 ;;		Nothing
   545 ;; This function is called by:
   546 ;;		_ISR
   547 ;; This function uses a non-reentrant model
   548 ;;
   549                           
   550                           
   551                           ;psect for function _timer1_interrupt_decoder
   552  001D                     _timer1_interrupt_decoder:	
   553                           
   554                           ;incstack = 0
   555                           ; Regs used in _timer1_interrupt_decoder: [wreg-fsr0h+status,2+status,0]
   556                           ;ir_decoder.c: 50: static volatile ir_decoder_state_t decoder_state = STATE_IDLE;
   557                           ;ir_decoder.c: 51: static volatile uint8_t bit_count = 0;
   558                           ;ir_decoder.c: 52: static volatile uint8_t state_timer = 0;
   559                           ;ir_decoder.c: 54: do { TMR1H = 255; TMR1L = (255-140); PIR1bits.TMR1IF = 0; } while(0);
   560  001D  30FF               	movlw	255
   561  001E  1283               	bcf	3,5	;RP0=0, select bank0
   562  001F  008F               	movwf	15	;volatile
   563  0020  3073               	movlw	115
   564  0021  008E               	movwf	14	;volatile
   565  0022  100C               	bcf	12,0	;volatile
   566                           
   567                           ;ir_decoder.c: 57: if(ir_data_valid)
   568  0023  0826               	movf	_ir_data_valid,w	;volatile
   569  0024  1D03               	btfss	3,2
   570  0025  0008               	return
   571  0026  28E2               	goto	i1l857
   572  0027                     i1l34:	
   573                           ;ir_decoder.c: 61: case STATE_IDLE:
   574                           
   575                           ;ir_decoder.c: 60: switch (decoder_state) {
   576                           
   577                           ;ir_decoder.c: 58: return;
   578                           
   579                           
   580                           ;ir_decoder.c: 63: if (PORTBbits.RB0)
   581  0027  1806               	btfsc	6,0	;volatile
   582  0028  0008               	return
   583                           
   584                           ;ir_decoder.c: 65: decoder_state = STATE_START;
   585                           
   586                           ;ir_decoder.c: 64: return;
   587  0029  3001               	movlw	1
   588  002A  00F0               	movwf	??_timer1_interrupt_decoder
   589  002B  0870               	movf	??_timer1_interrupt_decoder,w
   590  002C  00A5               	movwf	timer1_interrupt_decoder@decoder_state	;volatile
   591                           
   592                           ;ir_decoder.c: 66: state_timer = 1;
   593  002D  3001               	movlw	1
   594  002E  00F0               	movwf	??_timer1_interrupt_decoder
   595  002F  0870               	movf	??_timer1_interrupt_decoder,w
   596  0030  00FC               	movwf	timer1_interrupt_decoder@state_timer	;volatile
   597                           
   598                           ;ir_decoder.c: 67: bit_count = 0;
   599  0031  01FD               	clrf	timer1_interrupt_decoder@bit_count	;volatile
   600                           
   601                           ;ir_decoder.c: 68: return;
   602  0032  0008               	return
   603  0033                     i1l36:	
   604                           ;ir_decoder.c: 69: case STATE_START:
   605                           
   606                           
   607                           ;ir_decoder.c: 71: if (!PORTBbits.RB0) {
   608  0033  1806               	btfsc	6,0	;volatile
   609  0034  283A               	goto	i1l777
   610                           
   611                           ;ir_decoder.c: 72: state_timer++;
   612  0035  3001               	movlw	1
   613  0036  00F0               	movwf	??_timer1_interrupt_decoder
   614  0037  0870               	movf	??_timer1_interrupt_decoder,w
   615  0038  07FC               	addwf	timer1_interrupt_decoder@state_timer,f	;volatile
   616                           
   617                           ;ir_decoder.c: 73: return;
   618  0039  0008               	return
   619  003A                     i1l777:	
   620                           
   621                           ;ir_decoder.c: 74: }
   622                           ;ir_decoder.c: 76: if (((((9000/140)-2) <= ((state_timer))) && (((state_timer)) <= ((900
      +                          0/140)+2)))) {
   623  003A  303E               	movlw	62
   624  003B  027C               	subwf	timer1_interrupt_decoder@state_timer,w	;volatile
   625  003C  1C03               	skipc
   626  003D  2848               	goto	i1l787
   627  003E  3043               	movlw	67
   628  003F  027C               	subwf	timer1_interrupt_decoder@state_timer,w	;volatile
   629  0040  1803               	skipnc
   630  0041  2848               	goto	i1l787
   631                           
   632                           ;ir_decoder.c: 77: decoder_state = STATE_START_GAP;
   633  0042  3002               	movlw	2
   634  0043  00F0               	movwf	??_timer1_interrupt_decoder
   635  0044  0870               	movf	??_timer1_interrupt_decoder,w
   636  0045  00A5               	movwf	timer1_interrupt_decoder@decoder_state	;volatile
   637                           
   638                           ;ir_decoder.c: 78: state_timer=0;
   639  0046  01FC               	clrf	timer1_interrupt_decoder@state_timer	;volatile
   640                           
   641                           ;ir_decoder.c: 79: return;
   642  0047  0008               	return
   643  0048                     i1l787:	
   644                           
   645                           ;ir_decoder.c: 80: }
   646                           ;ir_decoder.c: 82: decoder_state = STATE_IDLE;
   647  0048  01A5               	clrf	timer1_interrupt_decoder@decoder_state	;volatile
   648                           
   649                           ;ir_decoder.c: 83: return;
   650  0049  0008               	return
   651  004A                     i1l39:	
   652                           ;ir_decoder.c: 84: case STATE_START_GAP:
   653                           
   654                           
   655                           ;ir_decoder.c: 86: if (PORTBbits.RB0) {
   656  004A  1C06               	btfss	6,0	;volatile
   657  004B  2851               	goto	i1l795
   658                           
   659                           ;ir_decoder.c: 87: state_timer++;
   660  004C  3001               	movlw	1
   661  004D  00F0               	movwf	??_timer1_interrupt_decoder
   662  004E  0870               	movf	??_timer1_interrupt_decoder,w
   663  004F  07FC               	addwf	timer1_interrupt_decoder@state_timer,f	;volatile
   664                           
   665                           ;ir_decoder.c: 88: return;
   666  0050  0008               	return
   667  0051                     i1l795:	
   668                           
   669                           ;ir_decoder.c: 89: }
   670                           ;ir_decoder.c: 90: if (!((((4500/140)-2) <= ((state_timer))) && (((state_timer)) <= ((45
      +                          00/140)+2)))) {
   671  0051  301E               	movlw	30
   672  0052  027C               	subwf	timer1_interrupt_decoder@state_timer,w	;volatile
   673  0053  1C03               	skipc
   674  0054  2859               	goto	i1l799
   675  0055  3023               	movlw	35
   676  0056  027C               	subwf	timer1_interrupt_decoder@state_timer,w	;volatile
   677  0057  1C03               	skipc
   678  0058  285B               	goto	i1l803
   679  0059                     i1l799:	
   680                           
   681                           ;ir_decoder.c: 91: decoder_state = STATE_IDLE;
   682  0059  01A5               	clrf	timer1_interrupt_decoder@decoder_state	;volatile
   683                           
   684                           ;ir_decoder.c: 92: return;
   685  005A  0008               	return
   686  005B                     i1l803:	
   687                           
   688                           ;ir_decoder.c: 93: }
   689                           ;ir_decoder.c: 95: state_timer = 0;
   690  005B  01FC               	clrf	timer1_interrupt_decoder@state_timer	;volatile
   691                           
   692                           ;ir_decoder.c: 96: decoder_state = STATE_BURST;
   693  005C  3003               	movlw	3
   694  005D  00F0               	movwf	??_timer1_interrupt_decoder
   695  005E  0870               	movf	??_timer1_interrupt_decoder,w
   696  005F  00A5               	movwf	timer1_interrupt_decoder@decoder_state	;volatile
   697                           
   698                           ;ir_decoder.c: 97: return;
   699  0060  0008               	return
   700  0061                     i1l44:	
   701                           ;ir_decoder.c: 98: case STATE_BURST:
   702                           
   703                           
   704                           ;ir_decoder.c: 99: if (!PORTBbits.RB0) {
   705  0061  1806               	btfsc	6,0	;volatile
   706  0062  2868               	goto	i1l813
   707                           
   708                           ;ir_decoder.c: 100: state_timer++;
   709  0063  3001               	movlw	1
   710  0064  00F0               	movwf	??_timer1_interrupt_decoder
   711  0065  0870               	movf	??_timer1_interrupt_decoder,w
   712  0066  07FC               	addwf	timer1_interrupt_decoder@state_timer,f	;volatile
   713                           
   714                           ;ir_decoder.c: 101: return;
   715  0067  0008               	return
   716  0068                     i1l813:	
   717                           
   718                           ;ir_decoder.c: 102: }
   719                           ;ir_decoder.c: 104: if (!((((562/140)-2) <= ((state_timer))) && (((state_timer)) <= ((56
      +                          2/140)+2)))) {
   720  0068  3002               	movlw	2
   721  0069  027C               	subwf	timer1_interrupt_decoder@state_timer,w	;volatile
   722  006A  1C03               	skipc
   723  006B  2870               	goto	i1l817
   724  006C  3007               	movlw	7
   725  006D  027C               	subwf	timer1_interrupt_decoder@state_timer,w	;volatile
   726  006E  1C03               	skipc
   727  006F  2872               	goto	i1l819
   728  0070                     i1l817:	
   729                           
   730                           ;ir_decoder.c: 105: decoder_state = STATE_IDLE;
   731  0070  01A5               	clrf	timer1_interrupt_decoder@decoder_state	;volatile
   732                           
   733                           ;ir_decoder.c: 106: } else {
   734  0071  0008               	return
   735  0072                     i1l819:	
   736                           
   737                           ;ir_decoder.c: 107: decoder_state = STATE_GAP;
   738  0072  3004               	movlw	4
   739  0073  00F0               	movwf	??_timer1_interrupt_decoder
   740  0074  0870               	movf	??_timer1_interrupt_decoder,w
   741  0075  00A5               	movwf	timer1_interrupt_decoder@decoder_state	;volatile
   742                           
   743                           ;ir_decoder.c: 108: state_timer = 0;
   744  0076  01FC               	clrf	timer1_interrupt_decoder@state_timer	;volatile
   745                           
   746                           ;ir_decoder.c: 109: }
   747                           ;ir_decoder.c: 110: return;
   748  0077  0008               	return
   749  0078                     i1l50:	
   750                           ;ir_decoder.c: 111: case STATE_GAP:
   751                           
   752                           
   753                           ;ir_decoder.c: 112: if (PORTBbits.RB0) {
   754  0078  1C06               	btfss	6,0	;volatile
   755  0079  287F               	goto	i1l829
   756                           
   757                           ;ir_decoder.c: 113: state_timer++;
   758  007A  3001               	movlw	1
   759  007B  00F0               	movwf	??_timer1_interrupt_decoder
   760  007C  0870               	movf	??_timer1_interrupt_decoder,w
   761  007D  07FC               	addwf	timer1_interrupt_decoder@state_timer,f	;volatile
   762                           
   763                           ;ir_decoder.c: 114: return;
   764  007E  0008               	return
   765  007F                     i1l829:	
   766                           
   767                           ;ir_decoder.c: 115: }
   768                           ;ir_decoder.c: 116: if (((((562/140)-2) <= ((state_timer))) && (((state_timer)) <= ((562
      +                          /140)+2)))) {
   769  007F  3002               	movlw	2
   770  0080  027C               	subwf	timer1_interrupt_decoder@state_timer,w	;volatile
   771  0081  1C03               	skipc
   772  0082  28A7               	goto	i1l835
   773  0083  3007               	movlw	7
   774  0084  027C               	subwf	timer1_interrupt_decoder@state_timer,w	;volatile
   775  0085  1803               	skipnc
   776  0086  28A7               	goto	i1l835
   777                           
   778                           ;ir_decoder.c: 118: ir_data &= ~(1u << (31u-bit_count));
   779  0087  037D               	decf	timer1_interrupt_decoder@bit_count,w
   780  0088  3AFF               	xorlw	255
   781  0089  3E1F               	addlw	31
   782  008A  00F0               	movwf	??_timer1_interrupt_decoder
   783  008B  0AF0               	incf	??_timer1_interrupt_decoder,f
   784  008C  3001               	movlw	1
   785  008D  00F1               	movwf	??_timer1_interrupt_decoder+1
   786  008E  3000               	movlw	0
   787  008F  00F2               	movwf	??_timer1_interrupt_decoder+2
   788  0090  2894               	goto	u58_24
   789  0091                     u58_25:	
   790  0091  1003               	clrc
   791  0092  0DF1               	rlf	??_timer1_interrupt_decoder+1,f
   792  0093  0DF2               	rlf	??_timer1_interrupt_decoder+2,f
   793  0094                     u58_24:	
   794  0094  0BF0               	decfsz	??_timer1_interrupt_decoder,f
   795  0095  2891               	goto	u58_25
   796  0096  09F1               	comf	??_timer1_interrupt_decoder+1,f
   797  0097  09F2               	comf	??_timer1_interrupt_decoder+2,f
   798  0098  0871               	movf	??_timer1_interrupt_decoder+1,w
   799  0099  00F3               	movwf	??_timer1_interrupt_decoder+3
   800  009A  0872               	movf	??_timer1_interrupt_decoder+2,w
   801  009B  00F4               	movwf	??_timer1_interrupt_decoder+4
   802  009C  01F5               	clrf	??_timer1_interrupt_decoder+5
   803  009D  01F6               	clrf	??_timer1_interrupt_decoder+6
   804  009E  0873               	movf	??_timer1_interrupt_decoder+3,w
   805  009F  05A0               	andwf	_ir_data,f	;volatile
   806  00A0  0874               	movf	??_timer1_interrupt_decoder+4,w
   807  00A1  05A1               	andwf	_ir_data+1,f	;volatile
   808  00A2  0875               	movf	??_timer1_interrupt_decoder+5,w
   809  00A3  05A2               	andwf	_ir_data+2,f	;volatile
   810  00A4  0876               	movf	??_timer1_interrupt_decoder+6,w
   811  00A5  05A3               	andwf	_ir_data+3,f	;volatile
   812                           
   813                           ;ir_decoder.c: 119: } else if (((((1675/140)-2) <= ((state_timer))) && (((state_timer)) 
      +                          <= ((1675/140)+2)))) {
   814  00A6  28CF               	goto	i1l845
   815  00A7                     i1l835:	
   816  00A7  3009               	movlw	9
   817  00A8  027C               	subwf	timer1_interrupt_decoder@state_timer,w	;volatile
   818  00A9  1C03               	skipc
   819  00AA  28CD               	goto	i1l841
   820  00AB  300E               	movlw	14
   821  00AC  027C               	subwf	timer1_interrupt_decoder@state_timer,w	;volatile
   822  00AD  1803               	skipnc
   823  00AE  28CD               	goto	i1l841
   824                           
   825                           ;ir_decoder.c: 121: ir_data |= (1u << (31u-bit_count));
   826  00AF  037D               	decf	timer1_interrupt_decoder@bit_count,w
   827  00B0  3AFF               	xorlw	255
   828  00B1  3E1F               	addlw	31
   829  00B2  00F0               	movwf	??_timer1_interrupt_decoder
   830  00B3  0AF0               	incf	??_timer1_interrupt_decoder,f
   831  00B4  3001               	movlw	1
   832  00B5  00F1               	movwf	??_timer1_interrupt_decoder+1
   833  00B6  3000               	movlw	0
   834  00B7  00F2               	movwf	??_timer1_interrupt_decoder+2
   835  00B8  28BC               	goto	u61_24
   836  00B9                     u61_25:	
   837  00B9  1003               	clrc
   838  00BA  0DF1               	rlf	??_timer1_interrupt_decoder+1,f
   839  00BB  0DF2               	rlf	??_timer1_interrupt_decoder+2,f
   840  00BC                     u61_24:	
   841  00BC  0BF0               	decfsz	??_timer1_interrupt_decoder,f
   842  00BD  28B9               	goto	u61_25
   843  00BE  0871               	movf	??_timer1_interrupt_decoder+1,w
   844  00BF  00F3               	movwf	??_timer1_interrupt_decoder+3
   845  00C0  0872               	movf	??_timer1_interrupt_decoder+2,w
   846  00C1  00F4               	movwf	??_timer1_interrupt_decoder+4
   847  00C2  01F5               	clrf	??_timer1_interrupt_decoder+5
   848  00C3  01F6               	clrf	??_timer1_interrupt_decoder+6
   849  00C4  0873               	movf	??_timer1_interrupt_decoder+3,w
   850  00C5  04A0               	iorwf	_ir_data,f	;volatile
   851  00C6  0874               	movf	??_timer1_interrupt_decoder+4,w
   852  00C7  04A1               	iorwf	_ir_data+1,f	;volatile
   853  00C8  0875               	movf	??_timer1_interrupt_decoder+5,w
   854  00C9  04A2               	iorwf	_ir_data+2,f	;volatile
   855  00CA  0876               	movf	??_timer1_interrupt_decoder+6,w
   856  00CB  04A3               	iorwf	_ir_data+3,f	;volatile
   857                           
   858                           ;ir_decoder.c: 122: } else {
   859  00CC  28CF               	goto	i1l845
   860  00CD                     i1l841:	
   861                           
   862                           ;ir_decoder.c: 124: decoder_state = STATE_IDLE;
   863  00CD  01A5               	clrf	timer1_interrupt_decoder@decoder_state	;volatile
   864                           
   865                           ;ir_decoder.c: 125: return;
   866  00CE  0008               	return
   867  00CF                     i1l845:	
   868                           
   869                           ;ir_decoder.c: 126: }
   870                           ;ir_decoder.c: 128: bit_count++;
   871  00CF  3001               	movlw	1
   872  00D0  00F0               	movwf	??_timer1_interrupt_decoder
   873  00D1  0870               	movf	??_timer1_interrupt_decoder,w
   874  00D2  07FD               	addwf	timer1_interrupt_decoder@bit_count,f	;volatile
   875                           
   876                           ;ir_decoder.c: 129: if (bit_count == 32) {
   877  00D3  3020               	movlw	32
   878  00D4  067D               	xorwf	timer1_interrupt_decoder@bit_count,w	;volatile
   879  00D5  1D03               	btfss	3,2
   880  00D6  28DD               	goto	i1l851
   881                           
   882                           ;ir_decoder.c: 130: ir_data_valid = 1;
   883  00D7  3001               	movlw	1
   884  00D8  00F0               	movwf	??_timer1_interrupt_decoder
   885  00D9  0870               	movf	??_timer1_interrupt_decoder,w
   886  00DA  00A6               	movwf	_ir_data_valid	;volatile
   887                           
   888                           ;ir_decoder.c: 131: decoder_state = STATE_IDLE;
   889  00DB  01A5               	clrf	timer1_interrupt_decoder@decoder_state	;volatile
   890                           
   891                           ;ir_decoder.c: 132: } else {
   892  00DC  0008               	return
   893  00DD                     i1l851:	
   894                           
   895                           ;ir_decoder.c: 133: decoder_state = STATE_BURST;
   896  00DD  3003               	movlw	3
   897  00DE  00F0               	movwf	??_timer1_interrupt_decoder
   898  00DF  0870               	movf	??_timer1_interrupt_decoder,w
   899  00E0  00A5               	movwf	timer1_interrupt_decoder@decoder_state	;volatile
   900                           
   901                           ;ir_decoder.c: 136: }
   902                           
   903                           ;ir_decoder.c: 134: }
   904                           ;ir_decoder.c: 135: return;
   905  00E1  0008               	return
   906  00E2                     i1l857:	
   907  00E2  0825               	movf	timer1_interrupt_decoder@decoder_state,w	;volatile
   908                           
   909                           ; Switch size 1, requested type "space"
   910                           ; Number of cases is 5, Range of values is 0 to 4
   911                           ; switch strategies available:
   912                           ; Name         Instructions Cycles
   913                           ; direct_byte           11     6 (fixed)
   914                           ; simple_byte           16     9 (average)
   915                           ; jumptable            260     6 (fixed)
   916                           ;	Chosen strategy is direct_byte
   917  00E3  0084               	movwf	4
   918  00E4  3005               	movlw	5
   919  00E5  0204               	subwf	4,w
   920  00E6  1803               	skipnc
   921  00E7  0008               	return
   922  00E8  3001               	movlw	high i1S961
   923  00E9  008A               	movwf	10
   924  00EA  30DB               	movlw	low i1S961
   925  00EB  0704               	addwf	4,w
   926  00EC  0082               	movwf	2
   927  00ED  0008               	return
   928  00EE                     __end_of_timer1_interrupt_decoder:	
   929                           
   930                           	psect	swtext1
   931  01DB                     __pswtext1:	
   932  01DB                     i1S961:	
   933  01DB  2827               	ljmp	i1l34
   934  01DC  2833               	ljmp	i1l36
   935  01DD  284A               	ljmp	i1l39
   936  01DE  2861               	ljmp	i1l44
   937  01DF  2878               	ljmp	i1l50
   938                           
   939                           	psect	text4
   940  00EE                     __ptext4:	
   941 ;; *************** function _timer0_interrupt *****************
   942 ;; Defined at:
   943 ;;		line 46 in file "leds.c"
   944 ;; Parameters:    Size  Location     Type
   945 ;;		None
   946 ;; Auto vars:     Size  Location     Type
   947 ;;		None
   948 ;; Return value:  Size  Location     Type
   949 ;;                  1    wreg      void 
   950 ;; Registers used:
   951 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   952 ;; Tracked objects:
   953 ;;		On entry : 0/0
   954 ;;		On exit  : 0/0
   955 ;;		Unchanged: 0/0
   956 ;; Data sizes:     COMMON   BANK0   BANK1
   957 ;;      Params:         0       0       0
   958 ;;      Locals:         0       0       0
   959 ;;      Temps:          1       0       0
   960 ;;      Totals:         1       0       0
   961 ;;Total ram usage:        1 bytes
   962 ;; Hardware stack levels used:    1
   963 ;; Hardware stack levels required when called:    1
   964 ;; This function calls:
   965 ;;		_all_off
   966 ;;		_leda_on
   967 ;;		_ledb_on
   968 ;; This function is called by:
   969 ;;		_ISR
   970 ;; This function uses a non-reentrant model
   971 ;;
   972                           
   973                           
   974                           ;psect for function _timer0_interrupt
   975  00EE                     _timer0_interrupt:	
   976                           
   977                           ;leds.c: 47: static volatile uint8_t pos = 0;
   978                           ;leds.c: 48: pos++;
   979                           
   980                           ;incstack = 0
   981                           ; Regs used in _timer0_interrupt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   982  00EE  3001               	movlw	1
   983  00EF  00F4               	movwf	??_timer0_interrupt
   984  00F0  0874               	movf	??_timer0_interrupt,w
   985  00F1  1283               	bcf	3,5	;RP0=0, select bank0
   986  00F2  07A4               	addwf	timer0_interrupt@pos,f	;volatile
   987                           
   988                           ;leds.c: 49: pos &= 7;
   989  00F3  3007               	movlw	7
   990  00F4  00F4               	movwf	??_timer0_interrupt
   991  00F5  0874               	movf	??_timer0_interrupt,w
   992  00F6  05A4               	andwf	timer0_interrupt@pos,f	;volatile
   993                           
   994                           ;leds.c: 50: all_off();
   995  00F7  21AD               	fcall	_all_off
   996                           
   997                           ;leds.c: 51: switch (pos) {
   998  00F8  291D               	goto	i1l885
   999  00F9                     i1l867:	
  1000                           ;leds.c: 52: case 0:
  1001                           
  1002                           
  1003                           ;leds.c: 53: leda_on(0, 0);
  1004  00F9  01F0               	clrf	leda_on@dir
  1005  00FA  3000               	movlw	0
  1006  00FB  215D               	fcall	_leda_on
  1007                           
  1008                           ;leds.c: 54: break;
  1009  00FC  2929               	goto	i1l132
  1010  00FD                     i1l869:	
  1011                           ;leds.c: 55: case 1:
  1012                           
  1013                           
  1014                           ;leds.c: 56: leda_on(2, 0);
  1015  00FD  01F0               	clrf	leda_on@dir
  1016  00FE  3002               	movlw	2
  1017  00FF  215D               	fcall	_leda_on
  1018                           
  1019                           ;leds.c: 57: break;
  1020  0100  2929               	goto	i1l132
  1021  0101                     i1l871:	
  1022                           ;leds.c: 58: case 2:
  1023                           
  1024                           
  1025                           ;leds.c: 59: ledb_on(3, 0);
  1026  0101  01F0               	clrf	ledb_on@dir
  1027  0102  3003               	movlw	3
  1028  0103  212B               	fcall	_ledb_on
  1029                           
  1030                           ;leds.c: 60: break;
  1031  0104  2929               	goto	i1l132
  1032  0105                     i1l873:	
  1033                           ;leds.c: 61: case 3:
  1034                           
  1035                           
  1036                           ;leds.c: 62: ledb_on(3, 1);
  1037  0105  01F0               	clrf	ledb_on@dir
  1038  0106  0AF0               	incf	ledb_on@dir,f
  1039  0107  3003               	movlw	3
  1040  0108  212B               	fcall	_ledb_on
  1041                           
  1042                           ;leds.c: 63: break;
  1043  0109  2929               	goto	i1l132
  1044  010A                     i1l875:	
  1045                           ;leds.c: 64: case 4:
  1046                           
  1047                           
  1048                           ;leds.c: 65: leda_on(0, 1);
  1049  010A  01F0               	clrf	leda_on@dir
  1050  010B  0AF0               	incf	leda_on@dir,f
  1051  010C  3000               	movlw	0
  1052  010D  215D               	fcall	_leda_on
  1053                           
  1054                           ;leds.c: 66: break;
  1055  010E  2929               	goto	i1l132
  1056  010F                     i1l877:	
  1057                           ;leds.c: 67: case 5:
  1058                           
  1059                           
  1060                           ;leds.c: 68: leda_on(2, 1);
  1061  010F  01F0               	clrf	leda_on@dir
  1062  0110  0AF0               	incf	leda_on@dir,f
  1063  0111  3002               	movlw	2
  1064  0112  215D               	fcall	_leda_on
  1065                           
  1066                           ;leds.c: 69: break;
  1067  0113  2929               	goto	i1l132
  1068  0114                     i1l879:	
  1069                           ;leds.c: 70: case 6:
  1070                           
  1071                           
  1072                           ;leds.c: 71: leda_on(3, 0);
  1073  0114  01F0               	clrf	leda_on@dir
  1074  0115  3003               	movlw	3
  1075  0116  215D               	fcall	_leda_on
  1076                           
  1077                           ;leds.c: 72: break;
  1078  0117  2929               	goto	i1l132
  1079  0118                     i1l881:	
  1080                           ;leds.c: 73: case 7:
  1081                           
  1082                           
  1083                           ;leds.c: 74: leda_on(3, 1);
  1084  0118  01F0               	clrf	leda_on@dir
  1085  0119  0AF0               	incf	leda_on@dir,f
  1086  011A  3003               	movlw	3
  1087  011B  215D               	fcall	_leda_on
  1088                           
  1089                           ;leds.c: 76: }
  1090                           
  1091                           ;leds.c: 75: break;
  1092  011C  2929               	goto	i1l132
  1093  011D                     i1l885:	
  1094  011D  1283               	bcf	3,5	;RP0=0, select bank0
  1095  011E  0824               	movf	timer0_interrupt@pos,w	;volatile
  1096                           
  1097                           ; Switch size 1, requested type "space"
  1098                           ; Number of cases is 8, Range of values is 0 to 7
  1099                           ; switch strategies available:
  1100                           ; Name         Instructions Cycles
  1101                           ; direct_byte           14     6 (fixed)
  1102                           ; simple_byte           25    13 (average)
  1103                           ; jumptable            260     6 (fixed)
  1104                           ;	Chosen strategy is direct_byte
  1105  011F  0084               	movwf	4
  1106  0120  3008               	movlw	8
  1107  0121  0204               	subwf	4,w
  1108  0122  1803               	skipnc
  1109  0123  2929               	goto	i1l132
  1110  0124  3001               	movlw	high i1S963
  1111  0125  008A               	movwf	10
  1112  0126  30D3               	movlw	low i1S963
  1113  0127  0704               	addwf	4,w
  1114  0128  0082               	movwf	2
  1115  0129                     i1l132:	
  1116                           
  1117                           ;leds.c: 77: INTCONbits.T0IF = 0;
  1118  0129  110B               	bcf	11,2	;volatile
  1119  012A  0008               	return
  1120  012B                     __end_of_timer0_interrupt:	
  1121                           
  1122                           	psect	swtext2
  1123  01D3                     __pswtext2:	
  1124  01D3                     i1S963:	
  1125  01D3  28F9               	ljmp	i1l867
  1126  01D4  28FD               	ljmp	i1l869
  1127  01D5  2901               	ljmp	i1l871
  1128  01D6  2905               	ljmp	i1l873
  1129  01D7  290A               	ljmp	i1l875
  1130  01D8  290F               	ljmp	i1l877
  1131  01D9  2914               	ljmp	i1l879
  1132  01DA  2918               	ljmp	i1l881
  1133                           
  1134                           	psect	text5
  1135  012B                     __ptext5:	
  1136 ;; *************** function _ledb_on *****************
  1137 ;; Defined at:
  1138 ;;		line 29 in file "leds.c"
  1139 ;; Parameters:    Size  Location     Type
  1140 ;;  pos             1    wreg     unsigned char 
  1141 ;;  dir             1    0[COMMON] unsigned char 
  1142 ;; Auto vars:     Size  Location     Type
  1143 ;;  pos             1    3[COMMON] unsigned char 
  1144 ;; Return value:  Size  Location     Type
  1145 ;;                  1    wreg      void 
  1146 ;; Registers used:
  1147 ;;		wreg, status,2, status,0
  1148 ;; Tracked objects:
  1149 ;;		On entry : 0/0
  1150 ;;		On exit  : 0/0
  1151 ;;		Unchanged: 0/0
  1152 ;; Data sizes:     COMMON   BANK0   BANK1
  1153 ;;      Params:         1       0       0
  1154 ;;      Locals:         1       0       0
  1155 ;;      Temps:          2       0       0
  1156 ;;      Totals:         4       0       0
  1157 ;;Total ram usage:        4 bytes
  1158 ;; Hardware stack levels used:    1
  1159 ;; This function calls:
  1160 ;;		Nothing
  1161 ;; This function is called by:
  1162 ;;		_timer0_interrupt
  1163 ;; This function uses a non-reentrant model
  1164 ;;
  1165                           
  1166                           
  1167                           ;psect for function _ledb_on
  1168  012B                     _ledb_on:	
  1169                           
  1170                           ;incstack = 0
  1171                           ; Regs used in _ledb_on: [wreg+status,2+status,0]
  1172                           ;ledb_on@pos stored from wreg
  1173  012B  00F3               	movwf	ledb_on@pos
  1174                           
  1175                           ;leds.c: 30: if (dir)
  1176  012C  0870               	movf	ledb_on@dir,w
  1177  012D  1903               	btfsc	3,2
  1178  012E  293E               	goto	i1l755
  1179                           
  1180                           ;leds.c: 31: PORTB |= (1u<<pos);
  1181  012F  3001               	movlw	1
  1182  0130  00F1               	movwf	??_ledb_on
  1183  0131  0A73               	incf	ledb_on@pos,w
  1184  0132  2935               	goto	u41_24
  1185  0133                     u41_25:	
  1186  0133  1003               	clrc
  1187  0134  0DF1               	rlf	??_ledb_on,f
  1188  0135                     u41_24:	
  1189  0135  3EFF               	addlw	-1
  1190  0136  1D03               	skipz
  1191  0137  2933               	goto	u41_25
  1192  0138  0871               	movf	??_ledb_on,w
  1193  0139  00F2               	movwf	??_ledb_on+1
  1194  013A  0872               	movf	??_ledb_on+1,w
  1195  013B  1283               	bcf	3,5	;RP0=0, select bank0
  1196  013C  0486               	iorwf	6,f	;volatile
  1197  013D  294D               	goto	i1l124
  1198  013E                     i1l755:	
  1199                           
  1200                           ;leds.c: 32: else
  1201                           ;leds.c: 33: PORTB &= ~(1u<<pos);
  1202  013E  3001               	movlw	1
  1203  013F  00F1               	movwf	??_ledb_on
  1204  0140  0A73               	incf	ledb_on@pos,w
  1205  0141  2944               	goto	u42_24
  1206  0142                     u42_25:	
  1207  0142  1003               	clrc
  1208  0143  0DF1               	rlf	??_ledb_on,f
  1209  0144                     u42_24:	
  1210  0144  3EFF               	addlw	-1
  1211  0145  1D03               	skipz
  1212  0146  2942               	goto	u42_25
  1213  0147  0871               	movf	??_ledb_on,w
  1214  0148  3AFF               	xorlw	255
  1215  0149  00F2               	movwf	??_ledb_on+1
  1216  014A  0872               	movf	??_ledb_on+1,w
  1217  014B  1283               	bcf	3,5	;RP0=0, select bank0
  1218  014C  0586               	andwf	6,f	;volatile
  1219  014D                     i1l124:	
  1220                           
  1221                           ;leds.c: 34: TRISB &= ~(1u<<pos);
  1222  014D  3001               	movlw	1
  1223  014E  00F1               	movwf	??_ledb_on
  1224  014F  0A73               	incf	ledb_on@pos,w
  1225  0150  2953               	goto	u43_24
  1226  0151                     u43_25:	
  1227  0151  1003               	clrc
  1228  0152  0DF1               	rlf	??_ledb_on,f
  1229  0153                     u43_24:	
  1230  0153  3EFF               	addlw	-1
  1231  0154  1D03               	skipz
  1232  0155  2951               	goto	u43_25
  1233  0156  0871               	movf	??_ledb_on,w
  1234  0157  3AFF               	xorlw	255
  1235  0158  00F2               	movwf	??_ledb_on+1
  1236  0159  0872               	movf	??_ledb_on+1,w
  1237  015A  1683               	bsf	3,5	;RP0=1, select bank1
  1238  015B  0586               	andwf	6,f	;volatile
  1239  015C  0008               	return
  1240  015D                     __end_of_ledb_on:	
  1241                           
  1242                           	psect	text6
  1243  015D                     __ptext6:	
  1244 ;; *************** function _leda_on *****************
  1245 ;; Defined at:
  1246 ;;		line 18 in file "leds.c"
  1247 ;; Parameters:    Size  Location     Type
  1248 ;;  pos             1    wreg     unsigned char 
  1249 ;;  dir             1    0[COMMON] unsigned char 
  1250 ;; Auto vars:     Size  Location     Type
  1251 ;;  pos             1    3[COMMON] unsigned char 
  1252 ;; Return value:  Size  Location     Type
  1253 ;;                  1    wreg      void 
  1254 ;; Registers used:
  1255 ;;		wreg, status,2, status,0
  1256 ;; Tracked objects:
  1257 ;;		On entry : 0/0
  1258 ;;		On exit  : 0/0
  1259 ;;		Unchanged: 0/0
  1260 ;; Data sizes:     COMMON   BANK0   BANK1
  1261 ;;      Params:         1       0       0
  1262 ;;      Locals:         1       0       0
  1263 ;;      Temps:          2       0       0
  1264 ;;      Totals:         4       0       0
  1265 ;;Total ram usage:        4 bytes
  1266 ;; Hardware stack levels used:    1
  1267 ;; This function calls:
  1268 ;;		Nothing
  1269 ;; This function is called by:
  1270 ;;		_timer0_interrupt
  1271 ;; This function uses a non-reentrant model
  1272 ;;
  1273                           
  1274                           
  1275                           ;psect for function _leda_on
  1276  015D                     _leda_on:	
  1277                           
  1278                           ;incstack = 0
  1279                           ; Regs used in _leda_on: [wreg+status,2+status,0]
  1280                           ;leda_on@pos stored from wreg
  1281  015D  00F3               	movwf	leda_on@pos
  1282                           
  1283                           ;leds.c: 19: if (dir)
  1284  015E  0870               	movf	leda_on@dir,w
  1285  015F  1903               	btfsc	3,2
  1286  0160  2970               	goto	i1l749
  1287                           
  1288                           ;leds.c: 20: PORTA |= (1u<<pos);
  1289  0161  3001               	movlw	1
  1290  0162  00F1               	movwf	??_leda_on
  1291  0163  0A73               	incf	leda_on@pos,w
  1292  0164  2967               	goto	u37_24
  1293  0165                     u37_25:	
  1294  0165  1003               	clrc
  1295  0166  0DF1               	rlf	??_leda_on,f
  1296  0167                     u37_24:	
  1297  0167  3EFF               	addlw	-1
  1298  0168  1D03               	skipz
  1299  0169  2965               	goto	u37_25
  1300  016A  0871               	movf	??_leda_on,w
  1301  016B  00F2               	movwf	??_leda_on+1
  1302  016C  0872               	movf	??_leda_on+1,w
  1303  016D  1283               	bcf	3,5	;RP0=0, select bank0
  1304  016E  0485               	iorwf	5,f	;volatile
  1305  016F  297F               	goto	i1l119
  1306  0170                     i1l749:	
  1307                           
  1308                           ;leds.c: 21: else
  1309                           ;leds.c: 22: PORTA &= ~(1u<<pos);
  1310  0170  3001               	movlw	1
  1311  0171  00F1               	movwf	??_leda_on
  1312  0172  0A73               	incf	leda_on@pos,w
  1313  0173  2976               	goto	u38_24
  1314  0174                     u38_25:	
  1315  0174  1003               	clrc
  1316  0175  0DF1               	rlf	??_leda_on,f
  1317  0176                     u38_24:	
  1318  0176  3EFF               	addlw	-1
  1319  0177  1D03               	skipz
  1320  0178  2974               	goto	u38_25
  1321  0179  0871               	movf	??_leda_on,w
  1322  017A  3AFF               	xorlw	255
  1323  017B  00F2               	movwf	??_leda_on+1
  1324  017C  0872               	movf	??_leda_on+1,w
  1325  017D  1283               	bcf	3,5	;RP0=0, select bank0
  1326  017E  0585               	andwf	5,f	;volatile
  1327  017F                     i1l119:	
  1328                           
  1329                           ;leds.c: 23: TRISA &= ~(1u<<pos);
  1330  017F  3001               	movlw	1
  1331  0180  00F1               	movwf	??_leda_on
  1332  0181  0A73               	incf	leda_on@pos,w
  1333  0182  2985               	goto	u39_24
  1334  0183                     u39_25:	
  1335  0183  1003               	clrc
  1336  0184  0DF1               	rlf	??_leda_on,f
  1337  0185                     u39_24:	
  1338  0185  3EFF               	addlw	-1
  1339  0186  1D03               	skipz
  1340  0187  2983               	goto	u39_25
  1341  0188  0871               	movf	??_leda_on,w
  1342  0189  3AFF               	xorlw	255
  1343  018A  00F2               	movwf	??_leda_on+1
  1344  018B  0872               	movf	??_leda_on+1,w
  1345  018C  1683               	bsf	3,5	;RP0=1, select bank1
  1346  018D  0585               	andwf	5,f	;volatile
  1347  018E  0008               	return
  1348  018F                     __end_of_leda_on:	
  1349                           
  1350                           	psect	text7
  1351  01AD                     __ptext7:	
  1352 ;; *************** function _all_off *****************
  1353 ;; Defined at:
  1354 ;;		line 10 in file "leds.c"
  1355 ;; Parameters:    Size  Location     Type
  1356 ;;		None
  1357 ;; Auto vars:     Size  Location     Type
  1358 ;;		None
  1359 ;; Return value:  Size  Location     Type
  1360 ;;                  1    wreg      void 
  1361 ;; Registers used:
  1362 ;;		wreg, status,2, status,0
  1363 ;; Tracked objects:
  1364 ;;		On entry : 0/0
  1365 ;;		On exit  : 0/0
  1366 ;;		Unchanged: 0/0
  1367 ;; Data sizes:     COMMON   BANK0   BANK1
  1368 ;;      Params:         0       0       0
  1369 ;;      Locals:         0       0       0
  1370 ;;      Temps:          2       0       0
  1371 ;;      Totals:         2       0       0
  1372 ;;Total ram usage:        2 bytes
  1373 ;; Hardware stack levels used:    1
  1374 ;; This function calls:
  1375 ;;		Nothing
  1376 ;; This function is called by:
  1377 ;;		_timer0_interrupt
  1378 ;; This function uses a non-reentrant model
  1379 ;;
  1380                           
  1381                           
  1382                           ;psect for function _all_off
  1383  01AD                     _all_off:	
  1384                           
  1385                           ;leds.c: 11: TRISA |= TRISA0 | TRISA2 | TRISA3;
  1386                           
  1387                           ;incstack = 0
  1388                           ; Regs used in _all_off: [wreg+status,2+status,0]
  1389  01AD  1683               	bsf	3,5	;RP0=1, select bank1
  1390  01AE  1D85               	btfss	5,3	;volatile
  1391  01AF  29B2               	goto	u34_20
  1392  01B0  3001               	movlw	1
  1393  01B1  29B3               	goto	u34_22
  1394  01B2                     u34_20:	
  1395  01B2  3000               	movlw	0
  1396  01B3                     u34_22:	
  1397  01B3  00F0               	movwf	??_all_off
  1398  01B4  3000               	movlw	0
  1399  01B5  1805               	btfsc	5,0	;volatile
  1400  01B6  3801               	iorlw	1
  1401  01B7  1905               	btfsc	5,2	;volatile
  1402  01B8  3801               	iorlw	1
  1403  01B9  3800               	iorlw	0
  1404  01BA  1903               	btfsc	3,2
  1405  01BB  29BE               	goto	u35_20
  1406  01BC  3001               	movlw	1
  1407  01BD  29BF               	goto	u35_22
  1408  01BE                     u35_20:	
  1409  01BE  3000               	movlw	0
  1410  01BF                     u35_22:	
  1411  01BF  0470               	iorwf	??_all_off,w
  1412  01C0  00F1               	movwf	??_all_off+1
  1413  01C1  0871               	movf	??_all_off+1,w
  1414  01C2  0485               	iorwf	5,f	;volatile
  1415                           
  1416                           ;leds.c: 12: TRISB |= TRISB3;
  1417  01C3  3000               	movlw	0
  1418  01C4  1986               	btfsc	6,3	;volatile
  1419  01C5  3001               	movlw	1
  1420  01C6  00F0               	movwf	??_all_off
  1421  01C7  0870               	movf	??_all_off,w
  1422  01C8  0486               	iorwf	6,f	;volatile
  1423  01C9  0008               	return
  1424  01CA                     __end_of_all_off:	
  1425  007E                     btemp	set	126	;btemp
  1426  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80      0       8
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_timer1_interrupt_decoder
    _timer0_interrupt->_leda_on
    _timer0_interrupt->_ledb_on

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                       _timer0_setup
 ---------------------------------------------------------------------------------
 (1) _timer0_setup                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  5     5      0     520
                                              7 COMMON     5     5      0
                   _timer0_interrupt
           _timer1_interrupt_decoder
 ---------------------------------------------------------------------------------
 (3) _timer1_interrupt_decoder                             7     7      0       0
                                              0 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (3) _timer0_interrupt                                     1     1      0     520
                                              4 COMMON     1     1      0
                            _all_off
                            _leda_on
                            _ledb_on
 ---------------------------------------------------------------------------------
 (4) _ledb_on                                              4     3      1     174
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (4) _leda_on                                              4     3      1     346
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (4) _all_off                                              2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _timer0_setup

 _ISR (ROOT)
   _timer0_interrupt
     _all_off
     _leda_on
     _ledb_on
   _timer1_interrupt_decoder

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK1               20      0       0       5        0.0%
BITBANK1            20      0       0       7        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0       8       4       10.0%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      C       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      16       8        0.0%
ABS                  0      0      16       6        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed May 16 21:58:14 2018

             _timer1_interrupt_decoder 001D                                      pc 0002  
                          __CFG_CP$OFF 0000                                     l90 01E1  
                                   fsr 0004                                    _ISR 018F  
                                  fsr0 0004                           __CFG_FOSC$XT 0000  
                                 ?_ISR 0070                                   i1l50 0078  
                                 i1l34 0027                                   i1l44 0061  
                                 i1l36 0033                                   i1l39 004A  
                                 i1l85 01A1  timer1_interrupt_decoder@decoder_state 0025  
                                 _main 01E0                                   btemp 007E  
                                 start 000F                                  ??_ISR 0077  
                                ?_main 0070                          __CFG_WDTE$OFF 0000  
                                i1S961 01DB                                  i1S963 01D3  
                                i1l124 014D                                  i1l132 0129  
                                i1l119 017F                                  i1l803 005B  
                                i1l813 0068                                  i1l841 00CD  
                                i1l817 0070                                  i1l913 019B  
                                i1l755 013E                                  i1l851 00DD  
                                i1l835 00A7                                  i1l819 0072  
                                i1l907 0192                                  i1l749 0170  
                                i1l845 00CF                                  i1l829 007F  
                                i1l871 0101                                  i1l881 0118  
                                i1l873 0105                                  i1l777 003A  
                                i1l857 00E2                                  i1l875 010A  
                                i1l867 00F9                                  i1l795 0051  
                                i1l787 0048                                  i1l877 010F  
                                i1l869 00FD                                  i1l885 011D  
                                i1l879 0114                                  i1l799 0059  
                                _TMR1H 000F                                  u41_24 0135  
                                u41_25 0133                                  _TMR1L 000E  
                                u34_20 01B2                                  u34_22 01B3  
                                u42_24 0144                                  u42_25 0142  
                                u35_20 01BE                                  _PORTA 0005  
                                u35_22 01BF                                  _PORTB 0006  
                                u43_24 0153                                  u43_25 0151  
                                u37_24 0167                                  u61_24 00BC  
                                u37_25 0165                                  u61_25 00B9  
                                u38_24 0176                                  u38_25 0174  
                                u39_24 0185                                  u39_25 0183  
                                _TRISA 0085                                  _TRISB 0086  
                                u58_24 0094                                  u58_25 0091  
                      __end_of_all_off 01CA                         __CFG_BODENV$40 0000  
                      __end_of_leda_on 018F                        __end_of_ledb_on 015D  
                       __CFG_BOREN$OFF 0000                                  pclath 000A  
                                status 0003                                  wtemp0 007E  
                      __initialization 0010                           __end_of_main 01E2  
                               ??_main 0000                          _ir_data_valid 0026  
                     _timer0_interrupt 00EE                                 _TRISA0 0428  
                               _TRISA2 042A                                 _TRISA3 042B  
                               _TRISB3 0433                         __CFG_PWRTE$OFF 0000  
                  timer0_interrupt@pos 0024                              ??_all_off 0070  
                            ??_leda_on 0071                              ??_ledb_on 0071  
                               saved_w 007E             ??_timer1_interrupt_decoder 0070  
              __end_of__initialization 001B                         __pcstackCOMMON 0070  
                         __pidataBANK0 01E2                         _OPTION_REGbits 0081  
                           __pbssBANK0 0020                             __pmaintext 01E0  
                           __pintentry 0004                                _all_off 01AD  
             __end_of_timer0_interrupt 012B      timer1_interrupt_decoder@bit_count 007D  
                              __ptext1 01CA                                __ptext2 018F  
                              __ptext3 001D                                __ptext4 00EE  
                              __ptext5 012B                                __ptext6 015D  
                              __ptext7 01AD                          ?_timer0_setup 0070  
                              _leda_on 015D                                _ledb_on 012B  
                         __size_of_ISR 001E                              _T1CONbits 0010  
                              _ir_data 0020                   end_of_initialization 001B  
     __end_of_timer1_interrupt_decoder 00EE                         ??_timer0_setup 0000  
                            _PORTBbits 0006                              _TRISBbits 0086  
                           leda_on@dir 0070                             leda_on@pos 0073  
                           ledb_on@dir 0070                             ledb_on@pos 0073  
                  start_initialization 0010                            __end_of_ISR 01AD  
  timer1_interrupt_decoder@state_timer 007C                            __pdataBANK0 0027  
    __size_of_timer1_interrupt_decoder 00D1              ?_timer1_interrupt_decoder 0070  
                          __pbssCOMMON 007C                              ___latbits 0000  
                        __pcstackBANK0 0000                   __end_of_timer0_setup 01D3  
                             ?_all_off 0070                              __pswtext1 01DB  
                            __pswtext2 01D3                      ?_timer0_interrupt 0070  
                             ?_leda_on 0070                               ?_ledb_on 0070  
                   ??_timer0_interrupt 0074                      interrupt_function 0004  
                             _PIE1bits 008C                              _move_leds 0027  
                             _PIR1bits 000C                       __size_of_all_off 001D  
                     __size_of_leda_on 0032                       __size_of_ledb_on 0032  
                __size_of_timer0_setup 0009                          __size_of_main 0002  
                         _timer0_setup 01CA                             _INTCONbits 000B  
                             intlevel1 0000              __size_of_timer0_interrupt 003D  
