

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed May 16 16:18:32 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F716
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	intentry,global,class=CODE,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	swtext1,local,class=CONST,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	swtext2,local,class=CONST,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    20                           	dabs	1,0x7E,2
    21  0000                     
    22                           ; Version 1.45
    23                           ; Generated 16/11/2017 GMT
    24                           ; 
    25                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC16F716 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     	;# 
    57  0001                     	;# 
    58  0002                     	;# 
    59  0003                     	;# 
    60  0004                     	;# 
    61  0005                     	;# 
    62  0006                     	;# 
    63  0006                     	;# 
    64  000A                     	;# 
    65  000B                     	;# 
    66  000C                     	;# 
    67  000E                     	;# 
    68  000E                     	;# 
    69  000F                     	;# 
    70  0010                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0015                     	;# 
    74  0015                     	;# 
    75  0016                     	;# 
    76  0017                     	;# 
    77  0018                     	;# 
    78  0019                     	;# 
    79  001E                     	;# 
    80  001F                     	;# 
    81  0081                     	;# 
    82  0085                     	;# 
    83  0086                     	;# 
    84  0086                     	;# 
    85  008C                     	;# 
    86  008E                     	;# 
    87  0092                     	;# 
    88  009F                     	;# 
    89  0000                     	;# 
    90  0001                     	;# 
    91  0002                     	;# 
    92  0003                     	;# 
    93  0004                     	;# 
    94  0005                     	;# 
    95  0006                     	;# 
    96  0006                     	;# 
    97  000A                     	;# 
    98  000B                     	;# 
    99  000C                     	;# 
   100  000E                     	;# 
   101  000E                     	;# 
   102  000F                     	;# 
   103  0010                     	;# 
   104  0011                     	;# 
   105  0012                     	;# 
   106  0015                     	;# 
   107  0015                     	;# 
   108  0016                     	;# 
   109  0017                     	;# 
   110  0018                     	;# 
   111  0019                     	;# 
   112  001E                     	;# 
   113  001F                     	;# 
   114  0081                     	;# 
   115  0085                     	;# 
   116  0086                     	;# 
   117  0086                     	;# 
   118  008C                     	;# 
   119  008E                     	;# 
   120  0092                     	;# 
   121  009F                     	;# 
   122  0000                     	;# 
   123  0001                     	;# 
   124  0002                     	;# 
   125  0003                     	;# 
   126  0004                     	;# 
   127  0005                     	;# 
   128  0006                     	;# 
   129  0006                     	;# 
   130  000A                     	;# 
   131  000B                     	;# 
   132  000C                     	;# 
   133  000E                     	;# 
   134  000E                     	;# 
   135  000F                     	;# 
   136  0010                     	;# 
   137  0011                     	;# 
   138  0012                     	;# 
   139  0015                     	;# 
   140  0015                     	;# 
   141  0016                     	;# 
   142  0017                     	;# 
   143  0018                     	;# 
   144  0019                     	;# 
   145  001E                     	;# 
   146  001F                     	;# 
   147  0081                     	;# 
   148  0085                     	;# 
   149  0086                     	;# 
   150  0086                     	;# 
   151  008C                     	;# 
   152  008E                     	;# 
   153  0092                     	;# 
   154  009F                     	;# 
   155  0006                     _PORTB	set	6
   156  0005                     _PORTA	set	5
   157  000B                     _INTCONbits	set	11
   158  0010                     _T1CONbits	set	16
   159  0006                     _PORTBbits	set	6
   160  000C                     _PIR1bits	set	12
   161  000E                     _TMR1L	set	14
   162  000F                     _TMR1H	set	15
   163  0086                     _TRISB	set	134
   164  0085                     _TRISA	set	133
   165  008C                     _PIE1bits	set	140
   166  0086                     _TRISBbits	set	134
   167  0433                     _TRISB3	set	1075
   168  042B                     _TRISA3	set	1067
   169  042A                     _TRISA2	set	1066
   170  0428                     _TRISA0	set	1064
   171                           
   172                           	psect	cinit
   173  0010                     start_initialization:	
   174                           ; #config settings
   175                           
   176  0010                     __initialization:	
   177                           
   178                           ; Clear objects allocated to COMMON
   179  0010  01FB               	clrf	__pbssCOMMON& (0+127)
   180  0011  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
   181  0012  01FD               	clrf	(__pbssCOMMON+2)& (0+127)
   182                           
   183                           ; Clear objects allocated to BANK0
   184  0013  1283               	bcf	3,5	;RP0=0, select bank0
   185  0014  01A0               	clrf	__pbssBANK0& (0+127)
   186  0015  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   187  0016  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   188  0017  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   189  0018  01A4               	clrf	(__pbssBANK0+4)& (0+127)
   190  0019  01A5               	clrf	(__pbssBANK0+5)& (0+127)
   191  001A                     end_of_initialization:	
   192                           ;End of C runtime variable initialization code
   193                           
   194  001A                     __end_of__initialization:	
   195  001A  0183               	clrf	3
   196  001B  29D7               	ljmp	_main	;jump to C main() function
   197                           
   198                           	psect	bssCOMMON
   199  007B                     __pbssCOMMON:	
   200  007B                     timer1_interrupt_decoder@state_timer:	
   201  007B                     	ds	1
   202  007C                     timer1_interrupt_decoder@bit_count:	
   203  007C                     	ds	1
   204  007D                     _ir_data_valid:	
   205  007D                     	ds	1
   206                           
   207                           	psect	bssBANK0
   208  0020                     __pbssBANK0:	
   209  0020                     _ir_data:	
   210  0020                     	ds	4
   211  0024                     timer0_interrupt@pos:	
   212  0024                     	ds	1
   213  0025                     timer1_interrupt_decoder@decoder_state:	
   214  0025                     	ds	1
   215                           
   216                           	psect	cstackCOMMON
   217  0070                     __pcstackCOMMON:	
   218  0070                     ?_timer0_interrupt:	
   219  0070                     ?_timer1_interrupt_decoder:	
   220                           ; 1 bytes @ 0x0
   221                           
   222  0070                     ??_timer1_interrupt_decoder:	
   223                           ; 1 bytes @ 0x0
   224                           
   225  0070                     ?_setup_ir_decoder:	
   226                           ; 1 bytes @ 0x0
   227                           
   228  0070                     ?_isr:	
   229                           ; 1 bytes @ 0x0
   230                           
   231  0070                     ?_main:	
   232                           ; 1 bytes @ 0x0
   233                           
   234  0070                     ?_all_off:	
   235                           ; 1 bytes @ 0x0
   236                           
   237  0070                     ??_all_off:	
   238                           ; 1 bytes @ 0x0
   239                           
   240  0070                     ?_leda_on:	
   241                           ; 1 bytes @ 0x0
   242                           
   243  0070                     ?_ledb_on:	
   244                           ; 1 bytes @ 0x0
   245                           
   246  0070                     leda_on@dir:	
   247                           ; 1 bytes @ 0x0
   248                           
   249  0070                     ledb_on@dir:	
   250                           ; 1 bytes @ 0x0
   251                           
   252                           
   253                           ; 1 bytes @ 0x0
   254  0070                     	ds	1
   255  0071                     ??_leda_on:	
   256  0071                     ??_ledb_on:	
   257                           ; 1 bytes @ 0x1
   258                           
   259                           
   260                           ; 1 bytes @ 0x1
   261  0071                     	ds	2
   262  0073                     leda_on@pos:	
   263  0073                     ledb_on@pos:	
   264                           ; 1 bytes @ 0x3
   265                           
   266                           
   267                           ; 1 bytes @ 0x3
   268  0073                     	ds	1
   269  0074                     ??_timer0_interrupt:	
   270                           
   271                           ; 1 bytes @ 0x4
   272  0074                     	ds	3
   273  0077                     ??_isr:	
   274                           
   275                           ; 1 bytes @ 0x7
   276  0077                     	ds	4
   277                           
   278                           	psect	cstackBANK0
   279  0000                     __pcstackBANK0:	
   280  0000                     ??_setup_ir_decoder:	
   281  0000                     ??_main:	
   282                           ; 1 bytes @ 0x0
   283                           
   284                           
   285                           	psect	maintext
   286  01D7                     __pmaintext:	
   287                           ; 1 bytes @ 0x0
   288 ;;
   289 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   290 ;;
   291 ;; *************** function _main *****************
   292 ;; Defined at:
   293 ;;		line 23 in file "main.c"
   294 ;; Parameters:    Size  Location     Type
   295 ;;		None
   296 ;; Auto vars:     Size  Location     Type
   297 ;;		None
   298 ;; Return value:  Size  Location     Type
   299 ;;                  1    wreg      void 
   300 ;; Registers used:
   301 ;;		wreg, status,2, status,0, pclath, cstack
   302 ;; Tracked objects:
   303 ;;		On entry : B00/0
   304 ;;		On exit  : 0/0
   305 ;;		Unchanged: 0/0
   306 ;; Data sizes:     COMMON   BANK0   BANK1
   307 ;;      Params:         0       0       0
   308 ;;      Locals:         0       0       0
   309 ;;      Temps:          0       0       0
   310 ;;      Totals:         0       0       0
   311 ;;Total ram usage:        0 bytes
   312 ;; Hardware stack levels required when called:    4
   313 ;; This function calls:
   314 ;;		_setup_ir_decoder
   315 ;; This function is called by:
   316 ;;		Startup code after reset
   317 ;; This function uses a non-reentrant model
   318 ;;
   319                           
   320                           
   321                           ;psect for function _main
   322  01D7                     _main:	
   323                           
   324                           ;main.c: 24: setup_ir_decoder();
   325                           
   326                           ;incstack = 0
   327                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   328  01D7  21B9               	fcall	_setup_ir_decoder
   329  01D8                     l87:	
   330                           ;main.c: 26: for(;;){}
   331                           
   332  01D8  29D8               	goto	l87
   333  01D9                     __end_of_main:	
   334                           
   335                           	psect	text1
   336  01B9                     __ptext1:	
   337 ;; *************** function _setup_ir_decoder *****************
   338 ;; Defined at:
   339 ;;		line 139 in file "ir_decoder.c"
   340 ;; Parameters:    Size  Location     Type
   341 ;;		None
   342 ;; Auto vars:     Size  Location     Type
   343 ;;		None
   344 ;; Return value:  Size  Location     Type
   345 ;;                  1    wreg      void 
   346 ;; Registers used:
   347 ;;		wreg
   348 ;; Tracked objects:
   349 ;;		On entry : 0/0
   350 ;;		On exit  : 0/0
   351 ;;		Unchanged: 0/0
   352 ;; Data sizes:     COMMON   BANK0   BANK1
   353 ;;      Params:         0       0       0
   354 ;;      Locals:         0       0       0
   355 ;;      Temps:          0       0       0
   356 ;;      Totals:         0       0       0
   357 ;;Total ram usage:        0 bytes
   358 ;; Hardware stack levels used:    1
   359 ;; Hardware stack levels required when called:    3
   360 ;; This function calls:
   361 ;;		Nothing
   362 ;; This function is called by:
   363 ;;		_main
   364 ;; This function uses a non-reentrant model
   365 ;;
   366                           
   367                           
   368                           ;psect for function _setup_ir_decoder
   369  01B9                     _setup_ir_decoder:	
   370                           
   371                           ;ir_decoder.c: 141: TRISBbits.TRISB0 = 1;
   372                           
   373                           ;incstack = 0
   374                           ; Regs used in _setup_ir_decoder: [wreg]
   375  01B9  1683               	bsf	3,5	;RP0=1, select bank1
   376  01BA  1406               	bsf	6,0	;volatile
   377                           
   378                           ;ir_decoder.c: 143: T1CONbits.T1OSCEN = 1;
   379  01BB  1283               	bcf	3,5	;RP0=0, select bank0
   380  01BC  1590               	bsf	16,3	;volatile
   381                           
   382                           ;ir_decoder.c: 144: T1CONbits.T1SYNC = 1;
   383  01BD  1510               	bsf	16,2	;volatile
   384                           
   385                           ;ir_decoder.c: 145: T1CONbits.TMR1ON = 1;
   386  01BE  1410               	bsf	16,0	;volatile
   387                           
   388                           ;ir_decoder.c: 146: PIE1bits.TMR1IE = 1;
   389  01BF  1683               	bsf	3,5	;RP0=1, select bank1
   390  01C0  140C               	bsf	12,0	;volatile
   391                           
   392                           ;ir_decoder.c: 147: INTCONbits.PEIE = 1;
   393  01C1  170B               	bsf	11,6	;volatile
   394                           
   395                           ;ir_decoder.c: 148: INTCONbits.GIE = 1;
   396  01C2  178B               	bsf	11,7	;volatile
   397                           
   398                           ;ir_decoder.c: 149: do { TMR1H = 255; TMR1L = (255-140); PIR1bits.TMR1IF = 0; } while(0)
      +                          ;
   399  01C3  30FF               	movlw	255
   400  01C4  1283               	bcf	3,5	;RP0=0, select bank0
   401  01C5  008F               	movwf	15	;volatile
   402  01C6  3073               	movlw	115
   403  01C7  008E               	movwf	14	;volatile
   404  01C8  100C               	bcf	12,0	;volatile
   405  01C9  0008               	return
   406  01CA                     __end_of_setup_ir_decoder:	
   407                           
   408                           	psect	text2
   409  01A4                     __ptext2:	
   410 ;; *************** function _isr *****************
   411 ;; Defined at:
   412 ;;		line 14 in file "main.c"
   413 ;; Parameters:    Size  Location     Type
   414 ;;		None
   415 ;; Auto vars:     Size  Location     Type
   416 ;;		None
   417 ;; Return value:  Size  Location     Type
   418 ;;                  1    wreg      void 
   419 ;; Registers used:
   420 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   421 ;; Tracked objects:
   422 ;;		On entry : 0/0
   423 ;;		On exit  : 0/0
   424 ;;		Unchanged: 0/0
   425 ;; Data sizes:     COMMON   BANK0   BANK1
   426 ;;      Params:         0       0       0
   427 ;;      Locals:         0       0       0
   428 ;;      Temps:          4       0       0
   429 ;;      Totals:         4       0       0
   430 ;;Total ram usage:        4 bytes
   431 ;; Hardware stack levels used:    1
   432 ;; Hardware stack levels required when called:    2
   433 ;; This function calls:
   434 ;;		_timer0_interrupt
   435 ;;		_timer1_interrupt_decoder
   436 ;; This function is called by:
   437 ;;		Interrupt level 1
   438 ;; This function uses a non-reentrant model
   439 ;;
   440                           
   441                           
   442                           ;psect for function _isr
   443  01A4                     _isr:	
   444                           
   445                           ;main.c: 15: if (PIR1bits.TMR1IF && PIE1bits.TMR1IE) {
   446  01A4  1C0C               	btfss	12,0	;volatile
   447  01A5  29AA               	goto	i1l871
   448  01A6  1683               	bsf	3,5	;RP0=1, select bank1
   449  01A7  1C0C               	btfss	12,0	;volatile
   450  01A8  29AA               	goto	i1l871
   451                           
   452                           ;main.c: 16: timer1_interrupt_decoder();
   453  01A9  201C               	fcall	_timer1_interrupt_decoder
   454  01AA                     i1l871:	
   455                           
   456                           ;main.c: 17: }
   457                           ;main.c: 18: if (INTCONbits.T0IF) {
   458  01AA  1D0B               	btfss	11,2	;volatile
   459  01AB  29AD               	goto	i1l82
   460                           
   461                           ;main.c: 19: timer0_interrupt();
   462  01AC  20E7               	fcall	_timer0_interrupt
   463  01AD                     i1l82:	
   464  01AD  087A               	movf	??_isr+3,w
   465  01AE  1283               	bcf	3,5	;RP0=0, select bank0
   466  01AF  00FF               	movwf	127
   467  01B0  0879               	movf	??_isr+2,w
   468  01B1  008A               	movwf	10
   469  01B2  0878               	movf	??_isr+1,w
   470  01B3  0084               	movwf	4
   471  01B4  0E77               	swapf	??_isr^(0+-128),w
   472  01B5  0083               	movwf	3
   473  01B6  0EFE               	swapf	126,f
   474  01B7  0E7E               	swapf	126,w
   475  01B8  0009               	retfie
   476  01B9                     __end_of_isr:	
   477                           
   478                           	psect	intentry
   479  0004                     __pintentry:	
   480                           ;incstack = 0
   481                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   482                           
   483  0004                     interrupt_function:	
   484  007E                     saved_w	set	btemp
   485  0004  00FE               	movwf	btemp
   486  0005  0E03               	swapf	3,w
   487  0006  00F7               	movwf	??_isr
   488  0007  0804               	movf	4,w
   489  0008  00F8               	movwf	??_isr+1
   490  0009  080A               	movf	10,w
   491  000A  00F9               	movwf	??_isr+2
   492  000B  1283               	bcf	3,5	;RP0=0, select bank0
   493  000C  087F               	movf	btemp+1,w
   494  000D  00FA               	movwf	??_isr+3
   495  000E  29A4               	ljmp	_isr
   496                           
   497                           	psect	text3
   498  001C                     __ptext3:	
   499 ;; *************** function _timer1_interrupt_decoder *****************
   500 ;; Defined at:
   501 ;;		line 48 in file "ir_decoder.c"
   502 ;; Parameters:    Size  Location     Type
   503 ;;		None
   504 ;; Auto vars:     Size  Location     Type
   505 ;;		None
   506 ;; Return value:  Size  Location     Type
   507 ;;                  1    wreg      void 
   508 ;; Registers used:
   509 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   510 ;; Tracked objects:
   511 ;;		On entry : 0/0
   512 ;;		On exit  : 0/0
   513 ;;		Unchanged: 0/0
   514 ;; Data sizes:     COMMON   BANK0   BANK1
   515 ;;      Params:         0       0       0
   516 ;;      Locals:         0       0       0
   517 ;;      Temps:          7       0       0
   518 ;;      Totals:         7       0       0
   519 ;;Total ram usage:        7 bytes
   520 ;; Hardware stack levels used:    1
   521 ;; This function calls:
   522 ;;		Nothing
   523 ;; This function is called by:
   524 ;;		_isr
   525 ;; This function uses a non-reentrant model
   526 ;;
   527                           
   528                           
   529                           ;psect for function _timer1_interrupt_decoder
   530  001C                     _timer1_interrupt_decoder:	
   531                           
   532                           ;incstack = 0
   533                           ; Regs used in _timer1_interrupt_decoder: [wreg-fsr0h+status,2+status,0]
   534                           ;ir_decoder.c: 50: static ir_decoder_state_t decoder_state = STATE_IDLE;
   535                           ;ir_decoder.c: 51: static uint8_t bit_count = 0;
   536                           ;ir_decoder.c: 52: static uint8_t state_timer = 0;
   537                           ;ir_decoder.c: 54: do { TMR1H = 255; TMR1L = (255-140); PIR1bits.TMR1IF = 0; } while(0);
   538  001C  30FF               	movlw	255
   539  001D  1283               	bcf	3,5	;RP0=0, select bank0
   540  001E  008F               	movwf	15	;volatile
   541  001F  3073               	movlw	115
   542  0020  008E               	movwf	14	;volatile
   543  0021  100C               	bcf	12,0	;volatile
   544                           
   545                           ;ir_decoder.c: 57: if(ir_data_valid)
   546  0022  087D               	movf	_ir_data_valid,w
   547  0023  1D03               	btfss	3,2
   548  0024  0008               	return
   549  0025  28DB               	goto	i1l825
   550  0026                     i1l34:	
   551                           ;ir_decoder.c: 61: case STATE_IDLE:
   552                           
   553                           ;ir_decoder.c: 60: switch (decoder_state) {
   554                           
   555                           ;ir_decoder.c: 58: return;
   556                           
   557                           
   558                           ;ir_decoder.c: 63: if (PORTBbits.RB0)
   559  0026  1806               	btfsc	6,0	;volatile
   560  0027  0008               	return
   561                           
   562                           ;ir_decoder.c: 65: decoder_state = STATE_START;
   563                           
   564                           ;ir_decoder.c: 64: return;
   565  0028  01A5               	clrf	timer1_interrupt_decoder@decoder_state
   566  0029  0AA5               	incf	timer1_interrupt_decoder@decoder_state,f
   567                           
   568                           ;ir_decoder.c: 66: state_timer = 1;
   569  002A  01FB               	clrf	timer1_interrupt_decoder@state_timer
   570  002B  0AFB               	incf	timer1_interrupt_decoder@state_timer,f
   571                           
   572                           ;ir_decoder.c: 67: bit_count = 0;
   573  002C  01FC               	clrf	timer1_interrupt_decoder@bit_count
   574                           
   575                           ;ir_decoder.c: 68: return;
   576  002D  0008               	return
   577  002E                     i1l36:	
   578                           ;ir_decoder.c: 69: case STATE_START:
   579                           
   580                           
   581                           ;ir_decoder.c: 71: if (!PORTBbits.RB0) {
   582  002E  1806               	btfsc	6,0	;volatile
   583  002F  2835               	goto	i1l745
   584                           
   585                           ;ir_decoder.c: 72: state_timer++;
   586  0030  3001               	movlw	1
   587  0031  00F0               	movwf	??_timer1_interrupt_decoder
   588  0032  0870               	movf	??_timer1_interrupt_decoder,w
   589  0033  07FB               	addwf	timer1_interrupt_decoder@state_timer,f
   590                           
   591                           ;ir_decoder.c: 73: return;
   592  0034  0008               	return
   593  0035                     i1l745:	
   594                           
   595                           ;ir_decoder.c: 74: }
   596                           ;ir_decoder.c: 76: if (((((9000/140)-2) <= ((state_timer))) && (((state_timer)) <= ((900
      +                          0/140)+2)))) {
   597  0035  303E               	movlw	62
   598  0036  027B               	subwf	timer1_interrupt_decoder@state_timer,w
   599  0037  1C03               	skipc
   600  0038  2843               	goto	i1l755
   601  0039  3043               	movlw	67
   602  003A  027B               	subwf	timer1_interrupt_decoder@state_timer,w
   603  003B  1803               	skipnc
   604  003C  2843               	goto	i1l755
   605                           
   606                           ;ir_decoder.c: 77: decoder_state = STATE_START_GAP;
   607  003D  3002               	movlw	2
   608  003E  00F0               	movwf	??_timer1_interrupt_decoder
   609  003F  0870               	movf	??_timer1_interrupt_decoder,w
   610  0040  00A5               	movwf	timer1_interrupt_decoder@decoder_state
   611                           
   612                           ;ir_decoder.c: 78: state_timer=0;
   613  0041  01FB               	clrf	timer1_interrupt_decoder@state_timer
   614                           
   615                           ;ir_decoder.c: 79: return;
   616  0042  0008               	return
   617  0043                     i1l755:	
   618                           
   619                           ;ir_decoder.c: 80: }
   620                           ;ir_decoder.c: 82: decoder_state = STATE_IDLE;
   621  0043  01A5               	clrf	timer1_interrupt_decoder@decoder_state
   622                           
   623                           ;ir_decoder.c: 83: return;
   624  0044  0008               	return
   625  0045                     i1l39:	
   626                           ;ir_decoder.c: 84: case STATE_START_GAP:
   627                           
   628                           
   629                           ;ir_decoder.c: 86: if (PORTBbits.RB0) {
   630  0045  1C06               	btfss	6,0	;volatile
   631  0046  284C               	goto	i1l763
   632                           
   633                           ;ir_decoder.c: 87: state_timer++;
   634  0047  3001               	movlw	1
   635  0048  00F0               	movwf	??_timer1_interrupt_decoder
   636  0049  0870               	movf	??_timer1_interrupt_decoder,w
   637  004A  07FB               	addwf	timer1_interrupt_decoder@state_timer,f
   638                           
   639                           ;ir_decoder.c: 88: return;
   640  004B  0008               	return
   641  004C                     i1l763:	
   642                           
   643                           ;ir_decoder.c: 89: }
   644                           ;ir_decoder.c: 90: if (!((((4500/140)-2) <= ((state_timer))) && (((state_timer)) <= ((45
      +                          00/140)+2)))) {
   645  004C  301E               	movlw	30
   646  004D  027B               	subwf	timer1_interrupt_decoder@state_timer,w
   647  004E  1C03               	skipc
   648  004F  2854               	goto	i1l767
   649  0050  3023               	movlw	35
   650  0051  027B               	subwf	timer1_interrupt_decoder@state_timer,w
   651  0052  1C03               	skipc
   652  0053  2856               	goto	i1l771
   653  0054                     i1l767:	
   654                           
   655                           ;ir_decoder.c: 91: decoder_state = STATE_IDLE;
   656  0054  01A5               	clrf	timer1_interrupt_decoder@decoder_state
   657                           
   658                           ;ir_decoder.c: 92: return;
   659  0055  0008               	return
   660  0056                     i1l771:	
   661                           
   662                           ;ir_decoder.c: 93: }
   663                           ;ir_decoder.c: 95: state_timer = 0;
   664  0056  01FB               	clrf	timer1_interrupt_decoder@state_timer
   665                           
   666                           ;ir_decoder.c: 96: decoder_state = STATE_BURST;
   667  0057  3003               	movlw	3
   668  0058  00F0               	movwf	??_timer1_interrupt_decoder
   669  0059  0870               	movf	??_timer1_interrupt_decoder,w
   670  005A  00A5               	movwf	timer1_interrupt_decoder@decoder_state
   671                           
   672                           ;ir_decoder.c: 97: return;
   673  005B  0008               	return
   674  005C                     i1l44:	
   675                           ;ir_decoder.c: 98: case STATE_BURST:
   676                           
   677                           
   678                           ;ir_decoder.c: 99: if (!PORTBbits.RB0) {
   679  005C  1806               	btfsc	6,0	;volatile
   680  005D  2863               	goto	i1l781
   681                           
   682                           ;ir_decoder.c: 100: state_timer++;
   683  005E  3001               	movlw	1
   684  005F  00F0               	movwf	??_timer1_interrupt_decoder
   685  0060  0870               	movf	??_timer1_interrupt_decoder,w
   686  0061  07FB               	addwf	timer1_interrupt_decoder@state_timer,f
   687                           
   688                           ;ir_decoder.c: 101: return;
   689  0062  0008               	return
   690  0063                     i1l781:	
   691                           
   692                           ;ir_decoder.c: 102: }
   693                           ;ir_decoder.c: 104: if (!((((562/140)-2) <= ((state_timer))) && (((state_timer)) <= ((56
      +                          2/140)+2)))) {
   694  0063  3002               	movlw	2
   695  0064  027B               	subwf	timer1_interrupt_decoder@state_timer,w
   696  0065  1C03               	skipc
   697  0066  286B               	goto	i1l785
   698  0067  3007               	movlw	7
   699  0068  027B               	subwf	timer1_interrupt_decoder@state_timer,w
   700  0069  1C03               	skipc
   701  006A  286D               	goto	i1l787
   702  006B                     i1l785:	
   703                           
   704                           ;ir_decoder.c: 105: decoder_state = STATE_IDLE;
   705  006B  01A5               	clrf	timer1_interrupt_decoder@decoder_state
   706                           
   707                           ;ir_decoder.c: 106: } else {
   708  006C  0008               	return
   709  006D                     i1l787:	
   710                           
   711                           ;ir_decoder.c: 107: decoder_state = STATE_GAP;
   712  006D  3004               	movlw	4
   713  006E  00F0               	movwf	??_timer1_interrupt_decoder
   714  006F  0870               	movf	??_timer1_interrupt_decoder,w
   715  0070  00A5               	movwf	timer1_interrupt_decoder@decoder_state
   716                           
   717                           ;ir_decoder.c: 108: state_timer = 0;
   718  0071  01FB               	clrf	timer1_interrupt_decoder@state_timer
   719                           
   720                           ;ir_decoder.c: 109: }
   721                           ;ir_decoder.c: 110: return;
   722  0072  0008               	return
   723  0073                     i1l50:	
   724                           ;ir_decoder.c: 111: case STATE_GAP:
   725                           
   726                           
   727                           ;ir_decoder.c: 112: if (PORTBbits.RB0) {
   728  0073  1C06               	btfss	6,0	;volatile
   729  0074  287A               	goto	i1l797
   730                           
   731                           ;ir_decoder.c: 113: state_timer++;
   732  0075  3001               	movlw	1
   733  0076  00F0               	movwf	??_timer1_interrupt_decoder
   734  0077  0870               	movf	??_timer1_interrupt_decoder,w
   735  0078  07FB               	addwf	timer1_interrupt_decoder@state_timer,f
   736                           
   737                           ;ir_decoder.c: 114: return;
   738  0079  0008               	return
   739  007A                     i1l797:	
   740                           
   741                           ;ir_decoder.c: 115: }
   742                           ;ir_decoder.c: 116: if (((((562/140)-2) <= ((state_timer))) && (((state_timer)) <= ((562
      +                          /140)+2)))) {
   743  007A  3002               	movlw	2
   744  007B  027B               	subwf	timer1_interrupt_decoder@state_timer,w
   745  007C  1C03               	skipc
   746  007D  28A2               	goto	i1l803
   747  007E  3007               	movlw	7
   748  007F  027B               	subwf	timer1_interrupt_decoder@state_timer,w
   749  0080  1803               	skipnc
   750  0081  28A2               	goto	i1l803
   751                           
   752                           ;ir_decoder.c: 118: ir_data &= ~(1u << (31u-bit_count));
   753  0082  037C               	decf	timer1_interrupt_decoder@bit_count,w
   754  0083  3AFF               	xorlw	255
   755  0084  3E1F               	addlw	31
   756  0085  00F0               	movwf	??_timer1_interrupt_decoder
   757  0086  0AF0               	incf	??_timer1_interrupt_decoder,f
   758  0087  3001               	movlw	1
   759  0088  00F1               	movwf	??_timer1_interrupt_decoder+1
   760  0089  3000               	movlw	0
   761  008A  00F2               	movwf	??_timer1_interrupt_decoder+2
   762  008B  288F               	goto	u57_24
   763  008C                     u57_25:	
   764  008C  1003               	clrc
   765  008D  0DF1               	rlf	??_timer1_interrupt_decoder+1,f
   766  008E  0DF2               	rlf	??_timer1_interrupt_decoder+2,f
   767  008F                     u57_24:	
   768  008F  0BF0               	decfsz	??_timer1_interrupt_decoder,f
   769  0090  288C               	goto	u57_25
   770  0091  09F1               	comf	??_timer1_interrupt_decoder+1,f
   771  0092  09F2               	comf	??_timer1_interrupt_decoder+2,f
   772  0093  0871               	movf	??_timer1_interrupt_decoder+1,w
   773  0094  00F3               	movwf	??_timer1_interrupt_decoder+3
   774  0095  0872               	movf	??_timer1_interrupt_decoder+2,w
   775  0096  00F4               	movwf	??_timer1_interrupt_decoder+4
   776  0097  01F5               	clrf	??_timer1_interrupt_decoder+5
   777  0098  01F6               	clrf	??_timer1_interrupt_decoder+6
   778  0099  0873               	movf	??_timer1_interrupt_decoder+3,w
   779  009A  05A0               	andwf	_ir_data,f
   780  009B  0874               	movf	??_timer1_interrupt_decoder+4,w
   781  009C  05A1               	andwf	_ir_data+1,f
   782  009D  0875               	movf	??_timer1_interrupt_decoder+5,w
   783  009E  05A2               	andwf	_ir_data+2,f
   784  009F  0876               	movf	??_timer1_interrupt_decoder+6,w
   785  00A0  05A3               	andwf	_ir_data+3,f
   786                           
   787                           ;ir_decoder.c: 119: } else if (((((1675/140)-2) <= ((state_timer))) && (((state_timer)) 
      +                          <= ((1675/140)+2)))) {
   788  00A1  28CA               	goto	i1l813
   789  00A2                     i1l803:	
   790  00A2  3009               	movlw	9
   791  00A3  027B               	subwf	timer1_interrupt_decoder@state_timer,w
   792  00A4  1C03               	skipc
   793  00A5  28C8               	goto	i1l809
   794  00A6  300E               	movlw	14
   795  00A7  027B               	subwf	timer1_interrupt_decoder@state_timer,w
   796  00A8  1803               	skipnc
   797  00A9  28C8               	goto	i1l809
   798                           
   799                           ;ir_decoder.c: 121: ir_data |= (1u << (31u-bit_count));
   800  00AA  037C               	decf	timer1_interrupt_decoder@bit_count,w
   801  00AB  3AFF               	xorlw	255
   802  00AC  3E1F               	addlw	31
   803  00AD  00F0               	movwf	??_timer1_interrupt_decoder
   804  00AE  0AF0               	incf	??_timer1_interrupt_decoder,f
   805  00AF  3001               	movlw	1
   806  00B0  00F1               	movwf	??_timer1_interrupt_decoder+1
   807  00B1  3000               	movlw	0
   808  00B2  00F2               	movwf	??_timer1_interrupt_decoder+2
   809  00B3  28B7               	goto	u60_24
   810  00B4                     u60_25:	
   811  00B4  1003               	clrc
   812  00B5  0DF1               	rlf	??_timer1_interrupt_decoder+1,f
   813  00B6  0DF2               	rlf	??_timer1_interrupt_decoder+2,f
   814  00B7                     u60_24:	
   815  00B7  0BF0               	decfsz	??_timer1_interrupt_decoder,f
   816  00B8  28B4               	goto	u60_25
   817  00B9  0871               	movf	??_timer1_interrupt_decoder+1,w
   818  00BA  00F3               	movwf	??_timer1_interrupt_decoder+3
   819  00BB  0872               	movf	??_timer1_interrupt_decoder+2,w
   820  00BC  00F4               	movwf	??_timer1_interrupt_decoder+4
   821  00BD  01F5               	clrf	??_timer1_interrupt_decoder+5
   822  00BE  01F6               	clrf	??_timer1_interrupt_decoder+6
   823  00BF  0873               	movf	??_timer1_interrupt_decoder+3,w
   824  00C0  04A0               	iorwf	_ir_data,f
   825  00C1  0874               	movf	??_timer1_interrupt_decoder+4,w
   826  00C2  04A1               	iorwf	_ir_data+1,f
   827  00C3  0875               	movf	??_timer1_interrupt_decoder+5,w
   828  00C4  04A2               	iorwf	_ir_data+2,f
   829  00C5  0876               	movf	??_timer1_interrupt_decoder+6,w
   830  00C6  04A3               	iorwf	_ir_data+3,f
   831                           
   832                           ;ir_decoder.c: 122: } else {
   833  00C7  28CA               	goto	i1l813
   834  00C8                     i1l809:	
   835                           
   836                           ;ir_decoder.c: 124: decoder_state = STATE_IDLE;
   837  00C8  01A5               	clrf	timer1_interrupt_decoder@decoder_state
   838                           
   839                           ;ir_decoder.c: 125: return;
   840  00C9  0008               	return
   841  00CA                     i1l813:	
   842                           
   843                           ;ir_decoder.c: 126: }
   844                           ;ir_decoder.c: 128: bit_count++;
   845  00CA  3001               	movlw	1
   846  00CB  00F0               	movwf	??_timer1_interrupt_decoder
   847  00CC  0870               	movf	??_timer1_interrupt_decoder,w
   848  00CD  07FC               	addwf	timer1_interrupt_decoder@bit_count,f
   849                           
   850                           ;ir_decoder.c: 129: if (bit_count == 32) {
   851  00CE  3020               	movlw	32
   852  00CF  067C               	xorwf	timer1_interrupt_decoder@bit_count,w
   853  00D0  1D03               	btfss	3,2
   854  00D1  28D6               	goto	i1l819
   855                           
   856                           ;ir_decoder.c: 130: ir_data_valid = 1;
   857  00D2  01FD               	clrf	_ir_data_valid
   858  00D3  0AFD               	incf	_ir_data_valid,f
   859                           
   860                           ;ir_decoder.c: 131: decoder_state = STATE_IDLE;
   861  00D4  01A5               	clrf	timer1_interrupt_decoder@decoder_state
   862                           
   863                           ;ir_decoder.c: 132: } else {
   864  00D5  0008               	return
   865  00D6                     i1l819:	
   866                           
   867                           ;ir_decoder.c: 133: decoder_state = STATE_BURST;
   868  00D6  3003               	movlw	3
   869  00D7  00F0               	movwf	??_timer1_interrupt_decoder
   870  00D8  0870               	movf	??_timer1_interrupt_decoder,w
   871  00D9  00A5               	movwf	timer1_interrupt_decoder@decoder_state
   872                           
   873                           ;ir_decoder.c: 136: }
   874                           
   875                           ;ir_decoder.c: 134: }
   876                           ;ir_decoder.c: 135: return;
   877  00DA  0008               	return
   878  00DB                     i1l825:	
   879  00DB  0825               	movf	timer1_interrupt_decoder@decoder_state,w
   880                           
   881                           ; Switch size 1, requested type "space"
   882                           ; Number of cases is 5, Range of values is 0 to 4
   883                           ; switch strategies available:
   884                           ; Name         Instructions Cycles
   885                           ; direct_byte           11     6 (fixed)
   886                           ; simple_byte           16     9 (average)
   887                           ; jumptable            260     6 (fixed)
   888                           ;	Chosen strategy is direct_byte
   889  00DC  0084               	movwf	4
   890  00DD  3005               	movlw	5
   891  00DE  0204               	subwf	4,w
   892  00DF  1803               	skipnc
   893  00E0  0008               	return
   894  00E1  3001               	movlw	high i1S917
   895  00E2  008A               	movwf	10
   896  00E3  30D2               	movlw	low i1S917
   897  00E4  0704               	addwf	4,w
   898  00E5  0082               	movwf	2
   899  00E6  0008               	return
   900  00E7                     __end_of_timer1_interrupt_decoder:	
   901                           
   902                           	psect	swtext1
   903  01D2                     __pswtext1:	
   904  01D2                     i1S917:	
   905  01D2  2826               	ljmp	i1l34
   906  01D3  282E               	ljmp	i1l36
   907  01D4  2845               	ljmp	i1l39
   908  01D5  285C               	ljmp	i1l44
   909  01D6  2873               	ljmp	i1l50
   910                           
   911                           	psect	text4
   912  00E7                     __ptext4:	
   913 ;; *************** function _timer0_interrupt *****************
   914 ;; Defined at:
   915 ;;		line 46 in file "leds.c"
   916 ;; Parameters:    Size  Location     Type
   917 ;;		None
   918 ;; Auto vars:     Size  Location     Type
   919 ;;		None
   920 ;; Return value:  Size  Location     Type
   921 ;;                  1    wreg      void 
   922 ;; Registers used:
   923 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   924 ;; Tracked objects:
   925 ;;		On entry : 0/0
   926 ;;		On exit  : 0/0
   927 ;;		Unchanged: 0/0
   928 ;; Data sizes:     COMMON   BANK0   BANK1
   929 ;;      Params:         0       0       0
   930 ;;      Locals:         0       0       0
   931 ;;      Temps:          1       0       0
   932 ;;      Totals:         1       0       0
   933 ;;Total ram usage:        1 bytes
   934 ;; Hardware stack levels used:    1
   935 ;; Hardware stack levels required when called:    1
   936 ;; This function calls:
   937 ;;		_all_off
   938 ;;		_leda_on
   939 ;;		_ledb_on
   940 ;; This function is called by:
   941 ;;		_isr
   942 ;; This function uses a non-reentrant model
   943 ;;
   944                           
   945                           
   946                           ;psect for function _timer0_interrupt
   947  00E7                     _timer0_interrupt:	
   948                           
   949                           ;leds.c: 47: static uint8_t pos = 0;
   950                           ;leds.c: 48: pos++;
   951                           
   952                           ;incstack = 0
   953                           ; Regs used in _timer0_interrupt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   954  00E7  3001               	movlw	1
   955  00E8  00F4               	movwf	??_timer0_interrupt
   956  00E9  0874               	movf	??_timer0_interrupt,w
   957  00EA  1283               	bcf	3,5	;RP0=0, select bank0
   958  00EB  07A4               	addwf	timer0_interrupt@pos,f
   959                           
   960                           ;leds.c: 49: pos &= 7;
   961  00EC  3007               	movlw	7
   962  00ED  00F4               	movwf	??_timer0_interrupt
   963  00EE  0874               	movf	??_timer0_interrupt,w
   964  00EF  05A4               	andwf	timer0_interrupt@pos,f
   965                           
   966                           ;leds.c: 50: all_off();
   967  00F0  2187               	fcall	_all_off
   968                           
   969                           ;leds.c: 51: switch (pos) {
   970  00F1  2916               	goto	i1l859
   971  00F2                     i1l841:	
   972                           ;leds.c: 52: case 0:
   973                           
   974                           
   975                           ;leds.c: 53: leda_on(0, 0);
   976  00F2  01F0               	clrf	leda_on@dir
   977  00F3  3000               	movlw	0
   978  00F4  2155               	fcall	_leda_on
   979                           
   980                           ;leds.c: 54: break;
   981  00F5  0008               	return
   982  00F6                     i1l843:	
   983                           ;leds.c: 55: case 1:
   984                           
   985                           
   986                           ;leds.c: 56: leda_on(2, 0);
   987  00F6  01F0               	clrf	leda_on@dir
   988  00F7  3002               	movlw	2
   989  00F8  2155               	fcall	_leda_on
   990                           
   991                           ;leds.c: 57: break;
   992  00F9  0008               	return
   993  00FA                     i1l845:	
   994                           ;leds.c: 58: case 2:
   995                           
   996                           
   997                           ;leds.c: 59: ledb_on(3, 0);
   998  00FA  01F0               	clrf	ledb_on@dir
   999  00FB  3003               	movlw	3
  1000  00FC  2123               	fcall	_ledb_on
  1001                           
  1002                           ;leds.c: 60: break;
  1003  00FD  0008               	return
  1004  00FE                     i1l847:	
  1005                           ;leds.c: 61: case 3:
  1006                           
  1007                           
  1008                           ;leds.c: 62: ledb_on(3, 1);
  1009  00FE  01F0               	clrf	ledb_on@dir
  1010  00FF  0AF0               	incf	ledb_on@dir,f
  1011  0100  3003               	movlw	3
  1012  0101  2123               	fcall	_ledb_on
  1013                           
  1014                           ;leds.c: 63: break;
  1015  0102  0008               	return
  1016  0103                     i1l849:	
  1017                           ;leds.c: 64: case 4:
  1018                           
  1019                           
  1020                           ;leds.c: 65: leda_on(0, 1);
  1021  0103  01F0               	clrf	leda_on@dir
  1022  0104  0AF0               	incf	leda_on@dir,f
  1023  0105  3000               	movlw	0
  1024  0106  2155               	fcall	_leda_on
  1025                           
  1026                           ;leds.c: 66: break;
  1027  0107  0008               	return
  1028  0108                     i1l851:	
  1029                           ;leds.c: 67: case 5:
  1030                           
  1031                           
  1032                           ;leds.c: 68: leda_on(2, 1);
  1033  0108  01F0               	clrf	leda_on@dir
  1034  0109  0AF0               	incf	leda_on@dir,f
  1035  010A  3002               	movlw	2
  1036  010B  2155               	fcall	_leda_on
  1037                           
  1038                           ;leds.c: 69: break;
  1039  010C  0008               	return
  1040  010D                     i1l853:	
  1041                           ;leds.c: 70: case 6:
  1042                           
  1043                           
  1044                           ;leds.c: 71: leda_on(3, 0);
  1045  010D  01F0               	clrf	leda_on@dir
  1046  010E  3003               	movlw	3
  1047  010F  2155               	fcall	_leda_on
  1048                           
  1049                           ;leds.c: 72: break;
  1050  0110  0008               	return
  1051  0111                     i1l855:	
  1052                           ;leds.c: 73: case 7:
  1053                           
  1054                           
  1055                           ;leds.c: 74: leda_on(3, 1);
  1056  0111  01F0               	clrf	leda_on@dir
  1057  0112  0AF0               	incf	leda_on@dir,f
  1058  0113  3003               	movlw	3
  1059  0114  2155               	fcall	_leda_on
  1060                           
  1061                           ;leds.c: 76: }
  1062                           
  1063                           ;leds.c: 75: break;
  1064  0115  0008               	return
  1065  0116                     i1l859:	
  1066  0116  1283               	bcf	3,5	;RP0=0, select bank0
  1067  0117  0824               	movf	timer0_interrupt@pos,w
  1068                           
  1069                           ; Switch size 1, requested type "space"
  1070                           ; Number of cases is 8, Range of values is 0 to 7
  1071                           ; switch strategies available:
  1072                           ; Name         Instructions Cycles
  1073                           ; direct_byte           14     6 (fixed)
  1074                           ; simple_byte           25    13 (average)
  1075                           ; jumptable            260     6 (fixed)
  1076                           ;	Chosen strategy is direct_byte
  1077  0118  0084               	movwf	4
  1078  0119  3008               	movlw	8
  1079  011A  0204               	subwf	4,w
  1080  011B  1803               	skipnc
  1081  011C  0008               	return
  1082  011D  3001               	movlw	high i1S919
  1083  011E  008A               	movwf	10
  1084  011F  30CA               	movlw	low i1S919
  1085  0120  0704               	addwf	4,w
  1086  0121  0082               	movwf	2
  1087  0122  0008               	return
  1088  0123                     __end_of_timer0_interrupt:	
  1089                           
  1090                           	psect	swtext2
  1091  01CA                     __pswtext2:	
  1092  01CA                     i1S919:	
  1093  01CA  28F2               	ljmp	i1l841
  1094  01CB  28F6               	ljmp	i1l843
  1095  01CC  28FA               	ljmp	i1l845
  1096  01CD  28FE               	ljmp	i1l847
  1097  01CE  2903               	ljmp	i1l849
  1098  01CF  2908               	ljmp	i1l851
  1099  01D0  290D               	ljmp	i1l853
  1100  01D1  2911               	ljmp	i1l855
  1101                           
  1102                           	psect	text5
  1103  0123                     __ptext5:	
  1104 ;; *************** function _ledb_on *****************
  1105 ;; Defined at:
  1106 ;;		line 29 in file "leds.c"
  1107 ;; Parameters:    Size  Location     Type
  1108 ;;  pos             1    wreg     unsigned char 
  1109 ;;  dir             1    0[COMMON] unsigned char 
  1110 ;; Auto vars:     Size  Location     Type
  1111 ;;  pos             1    3[COMMON] unsigned char 
  1112 ;; Return value:  Size  Location     Type
  1113 ;;                  1    wreg      void 
  1114 ;; Registers used:
  1115 ;;		wreg, status,2, status,0
  1116 ;; Tracked objects:
  1117 ;;		On entry : 0/0
  1118 ;;		On exit  : 0/0
  1119 ;;		Unchanged: 0/0
  1120 ;; Data sizes:     COMMON   BANK0   BANK1
  1121 ;;      Params:         1       0       0
  1122 ;;      Locals:         1       0       0
  1123 ;;      Temps:          2       0       0
  1124 ;;      Totals:         4       0       0
  1125 ;;Total ram usage:        4 bytes
  1126 ;; Hardware stack levels used:    1
  1127 ;; This function calls:
  1128 ;;		Nothing
  1129 ;; This function is called by:
  1130 ;;		_timer0_interrupt
  1131 ;; This function uses a non-reentrant model
  1132 ;;
  1133                           
  1134                           
  1135                           ;psect for function _ledb_on
  1136  0123                     _ledb_on:	
  1137                           
  1138                           ;incstack = 0
  1139                           ; Regs used in _ledb_on: [wreg+status,2+status,0]
  1140                           ;ledb_on@pos stored from wreg
  1141  0123  00F3               	movwf	ledb_on@pos
  1142                           
  1143                           ;leds.c: 30: if (dir)
  1144  0124  0870               	movf	ledb_on@dir,w
  1145  0125  1903               	btfsc	3,2
  1146  0126  2936               	goto	i1l725
  1147                           
  1148                           ;leds.c: 31: PORTB |= (1u<<pos);
  1149  0127  3001               	movlw	1
  1150  0128  00F1               	movwf	??_ledb_on
  1151  0129  0A73               	incf	ledb_on@pos,w
  1152  012A  292D               	goto	u40_24
  1153  012B                     u40_25:	
  1154  012B  1003               	clrc
  1155  012C  0DF1               	rlf	??_ledb_on,f
  1156  012D                     u40_24:	
  1157  012D  3EFF               	addlw	-1
  1158  012E  1D03               	skipz
  1159  012F  292B               	goto	u40_25
  1160  0130  0871               	movf	??_ledb_on,w
  1161  0131  00F2               	movwf	??_ledb_on+1
  1162  0132  0872               	movf	??_ledb_on+1,w
  1163  0133  1283               	bcf	3,5	;RP0=0, select bank0
  1164  0134  0486               	iorwf	6,f	;volatile
  1165  0135  2945               	goto	i1l117
  1166  0136                     i1l725:	
  1167                           
  1168                           ;leds.c: 32: else
  1169                           ;leds.c: 33: PORTB &= ~(1u<<pos);
  1170  0136  3001               	movlw	1
  1171  0137  00F1               	movwf	??_ledb_on
  1172  0138  0A73               	incf	ledb_on@pos,w
  1173  0139  293C               	goto	u41_24
  1174  013A                     u41_25:	
  1175  013A  1003               	clrc
  1176  013B  0DF1               	rlf	??_ledb_on,f
  1177  013C                     u41_24:	
  1178  013C  3EFF               	addlw	-1
  1179  013D  1D03               	skipz
  1180  013E  293A               	goto	u41_25
  1181  013F  0871               	movf	??_ledb_on,w
  1182  0140  3AFF               	xorlw	255
  1183  0141  00F2               	movwf	??_ledb_on+1
  1184  0142  0872               	movf	??_ledb_on+1,w
  1185  0143  1283               	bcf	3,5	;RP0=0, select bank0
  1186  0144  0586               	andwf	6,f	;volatile
  1187  0145                     i1l117:	
  1188                           
  1189                           ;leds.c: 34: TRISB &= ~(1u<<pos);
  1190  0145  3001               	movlw	1
  1191  0146  00F1               	movwf	??_ledb_on
  1192  0147  0A73               	incf	ledb_on@pos,w
  1193  0148  294B               	goto	u42_24
  1194  0149                     u42_25:	
  1195  0149  1003               	clrc
  1196  014A  0DF1               	rlf	??_ledb_on,f
  1197  014B                     u42_24:	
  1198  014B  3EFF               	addlw	-1
  1199  014C  1D03               	skipz
  1200  014D  2949               	goto	u42_25
  1201  014E  0871               	movf	??_ledb_on,w
  1202  014F  3AFF               	xorlw	255
  1203  0150  00F2               	movwf	??_ledb_on+1
  1204  0151  0872               	movf	??_ledb_on+1,w
  1205  0152  1683               	bsf	3,5	;RP0=1, select bank1
  1206  0153  0586               	andwf	6,f	;volatile
  1207  0154  0008               	return
  1208  0155                     __end_of_ledb_on:	
  1209                           
  1210                           	psect	text6
  1211  0155                     __ptext6:	
  1212 ;; *************** function _leda_on *****************
  1213 ;; Defined at:
  1214 ;;		line 18 in file "leds.c"
  1215 ;; Parameters:    Size  Location     Type
  1216 ;;  pos             1    wreg     unsigned char 
  1217 ;;  dir             1    0[COMMON] unsigned char 
  1218 ;; Auto vars:     Size  Location     Type
  1219 ;;  pos             1    3[COMMON] unsigned char 
  1220 ;; Return value:  Size  Location     Type
  1221 ;;                  1    wreg      void 
  1222 ;; Registers used:
  1223 ;;		wreg, status,2, status,0
  1224 ;; Tracked objects:
  1225 ;;		On entry : 0/0
  1226 ;;		On exit  : 0/0
  1227 ;;		Unchanged: 0/0
  1228 ;; Data sizes:     COMMON   BANK0   BANK1
  1229 ;;      Params:         1       0       0
  1230 ;;      Locals:         1       0       0
  1231 ;;      Temps:          2       0       0
  1232 ;;      Totals:         4       0       0
  1233 ;;Total ram usage:        4 bytes
  1234 ;; Hardware stack levels used:    1
  1235 ;; This function calls:
  1236 ;;		Nothing
  1237 ;; This function is called by:
  1238 ;;		_timer0_interrupt
  1239 ;; This function uses a non-reentrant model
  1240 ;;
  1241                           
  1242                           
  1243                           ;psect for function _leda_on
  1244  0155                     _leda_on:	
  1245                           
  1246                           ;incstack = 0
  1247                           ; Regs used in _leda_on: [wreg+status,2+status,0]
  1248                           ;leda_on@pos stored from wreg
  1249  0155  00F3               	movwf	leda_on@pos
  1250                           
  1251                           ;leds.c: 19: if (dir)
  1252  0156  0870               	movf	leda_on@dir,w
  1253  0157  1903               	btfsc	3,2
  1254  0158  2968               	goto	i1l719
  1255                           
  1256                           ;leds.c: 20: PORTA |= (1u<<pos);
  1257  0159  3001               	movlw	1
  1258  015A  00F1               	movwf	??_leda_on
  1259  015B  0A73               	incf	leda_on@pos,w
  1260  015C  295F               	goto	u36_24
  1261  015D                     u36_25:	
  1262  015D  1003               	clrc
  1263  015E  0DF1               	rlf	??_leda_on,f
  1264  015F                     u36_24:	
  1265  015F  3EFF               	addlw	-1
  1266  0160  1D03               	skipz
  1267  0161  295D               	goto	u36_25
  1268  0162  0871               	movf	??_leda_on,w
  1269  0163  00F2               	movwf	??_leda_on+1
  1270  0164  0872               	movf	??_leda_on+1,w
  1271  0165  1283               	bcf	3,5	;RP0=0, select bank0
  1272  0166  0485               	iorwf	5,f	;volatile
  1273  0167  2977               	goto	i1l112
  1274  0168                     i1l719:	
  1275                           
  1276                           ;leds.c: 21: else
  1277                           ;leds.c: 22: PORTA &= ~(1u<<pos);
  1278  0168  3001               	movlw	1
  1279  0169  00F1               	movwf	??_leda_on
  1280  016A  0A73               	incf	leda_on@pos,w
  1281  016B  296E               	goto	u37_24
  1282  016C                     u37_25:	
  1283  016C  1003               	clrc
  1284  016D  0DF1               	rlf	??_leda_on,f
  1285  016E                     u37_24:	
  1286  016E  3EFF               	addlw	-1
  1287  016F  1D03               	skipz
  1288  0170  296C               	goto	u37_25
  1289  0171  0871               	movf	??_leda_on,w
  1290  0172  3AFF               	xorlw	255
  1291  0173  00F2               	movwf	??_leda_on+1
  1292  0174  0872               	movf	??_leda_on+1,w
  1293  0175  1283               	bcf	3,5	;RP0=0, select bank0
  1294  0176  0585               	andwf	5,f	;volatile
  1295  0177                     i1l112:	
  1296                           
  1297                           ;leds.c: 23: TRISA &= ~(1u<<pos);
  1298  0177  3001               	movlw	1
  1299  0178  00F1               	movwf	??_leda_on
  1300  0179  0A73               	incf	leda_on@pos,w
  1301  017A  297D               	goto	u38_24
  1302  017B                     u38_25:	
  1303  017B  1003               	clrc
  1304  017C  0DF1               	rlf	??_leda_on,f
  1305  017D                     u38_24:	
  1306  017D  3EFF               	addlw	-1
  1307  017E  1D03               	skipz
  1308  017F  297B               	goto	u38_25
  1309  0180  0871               	movf	??_leda_on,w
  1310  0181  3AFF               	xorlw	255
  1311  0182  00F2               	movwf	??_leda_on+1
  1312  0183  0872               	movf	??_leda_on+1,w
  1313  0184  1683               	bsf	3,5	;RP0=1, select bank1
  1314  0185  0585               	andwf	5,f	;volatile
  1315  0186  0008               	return
  1316  0187                     __end_of_leda_on:	
  1317                           
  1318                           	psect	text7
  1319  0187                     __ptext7:	
  1320 ;; *************** function _all_off *****************
  1321 ;; Defined at:
  1322 ;;		line 10 in file "leds.c"
  1323 ;; Parameters:    Size  Location     Type
  1324 ;;		None
  1325 ;; Auto vars:     Size  Location     Type
  1326 ;;		None
  1327 ;; Return value:  Size  Location     Type
  1328 ;;                  1    wreg      void 
  1329 ;; Registers used:
  1330 ;;		wreg, status,2, status,0
  1331 ;; Tracked objects:
  1332 ;;		On entry : 0/0
  1333 ;;		On exit  : 0/0
  1334 ;;		Unchanged: 0/0
  1335 ;; Data sizes:     COMMON   BANK0   BANK1
  1336 ;;      Params:         0       0       0
  1337 ;;      Locals:         0       0       0
  1338 ;;      Temps:          2       0       0
  1339 ;;      Totals:         2       0       0
  1340 ;;Total ram usage:        2 bytes
  1341 ;; Hardware stack levels used:    1
  1342 ;; This function calls:
  1343 ;;		Nothing
  1344 ;; This function is called by:
  1345 ;;		_timer0_interrupt
  1346 ;; This function uses a non-reentrant model
  1347 ;;
  1348                           
  1349                           
  1350                           ;psect for function _all_off
  1351  0187                     _all_off:	
  1352                           
  1353                           ;leds.c: 11: TRISA |= TRISA0 | TRISA2 | TRISA3;
  1354                           
  1355                           ;incstack = 0
  1356                           ; Regs used in _all_off: [wreg+status,2+status,0]
  1357  0187  1683               	bsf	3,5	;RP0=1, select bank1
  1358  0188  1D85               	btfss	5,3	;volatile
  1359  0189  298C               	goto	u33_20
  1360  018A  3001               	movlw	1
  1361  018B  298D               	goto	u33_22
  1362  018C                     u33_20:	
  1363  018C  3000               	movlw	0
  1364  018D                     u33_22:	
  1365  018D  00F0               	movwf	??_all_off
  1366  018E  3000               	movlw	0
  1367  018F  1805               	btfsc	5,0	;volatile
  1368  0190  3801               	iorlw	1
  1369  0191  1905               	btfsc	5,2	;volatile
  1370  0192  3801               	iorlw	1
  1371  0193  3800               	iorlw	0
  1372  0194  1903               	btfsc	3,2
  1373  0195  2998               	goto	u34_20
  1374  0196  3001               	movlw	1
  1375  0197  2999               	goto	u34_22
  1376  0198                     u34_20:	
  1377  0198  3000               	movlw	0
  1378  0199                     u34_22:	
  1379  0199  0470               	iorwf	??_all_off,w
  1380  019A  00F1               	movwf	??_all_off+1
  1381  019B  0871               	movf	??_all_off+1,w
  1382  019C  0485               	iorwf	5,f	;volatile
  1383                           
  1384                           ;leds.c: 12: TRISB |= TRISB3;
  1385  019D  3000               	movlw	0
  1386  019E  1986               	btfsc	6,3	;volatile
  1387  019F  3001               	movlw	1
  1388  01A0  00F0               	movwf	??_all_off
  1389  01A1  0870               	movf	??_all_off,w
  1390  01A2  0486               	iorwf	6,f	;volatile
  1391  01A3  0008               	return
  1392  01A4                     __end_of_all_off:	
  1393  007E                     btemp	set	126	;btemp
  1394  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      14
    BANK0            80      0       6
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_timer1_interrupt_decoder
    _timer0_interrupt->_leda_on
    _timer0_interrupt->_ledb_on

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                   _setup_ir_decoder
 ---------------------------------------------------------------------------------
 (1) _setup_ir_decoder                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _isr                                                  4     4      0     520
                                              7 COMMON     4     4      0
                   _timer0_interrupt
           _timer1_interrupt_decoder
 ---------------------------------------------------------------------------------
 (3) _timer1_interrupt_decoder                             7     7      0       0
                                              0 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (3) _timer0_interrupt                                     1     1      0     520
                                              4 COMMON     1     1      0
                            _all_off
                            _leda_on
                            _ledb_on
 ---------------------------------------------------------------------------------
 (4) _ledb_on                                              4     3      1     174
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (4) _leda_on                                              4     3      1     346
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (4) _all_off                                              2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setup_ir_decoder

 _isr (ROOT)
   _timer0_interrupt
     _all_off
     _leda_on
     _ledb_on
   _timer1_interrupt_decoder

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      B       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50      0       6       4        7.5%
BANK1               20      0       0       5        0.0%
ABS                  0      0      14       6        0.0%
BITBANK1            20      0       0       7        0.0%
DATA                 0      0      14       8        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed May 16 16:18:32 2018

             _timer1_interrupt_decoder 001C                                      pc 0002  
                                   l87 01D8                                     fsr 0004  
                                  _isr 01A4                                    fsr0 0004  
                                 ?_isr 0070                                   i1l50 0073  
                                 i1l34 0026                                   i1l44 005C  
                                 i1l36 002E                                   i1l39 0045  
                                 i1l82 01AD  timer1_interrupt_decoder@decoder_state 0025  
                                 _main 01D7                                   btemp 007E  
                                 start 000F                                  ??_isr 0077  
                                ?_main 0070                                  i1S917 01D2  
                                i1S919 01CA                                  i1l112 0177  
                                i1l117 0145                                  i1l803 00A2  
                                i1l725 0136                                  i1l813 00CA  
                                i1l719 0168                                  i1l841 00F2  
                                i1l809 00C8                                  i1l745 0035  
                                i1l825 00DB                                  i1l851 0108  
                                i1l843 00F6                                  i1l819 00D6  
                                i1l771 0056                                  i1l763 004C  
                                i1l755 0043                                  i1l853 010D  
                                i1l845 00FA                                  i1l781 0063  
                                i1l855 0111                                  i1l847 00FE  
                                i1l767 0054                                  i1l871 01AA  
                                i1l849 0103                                  i1l785 006B  
                                i1l859 0116                                  i1l787 006D  
                                i1l797 007A                                  u40_24 012D  
                                u40_25 012B                                  u33_20 018C  
                                u33_22 018D                                  _TMR1H 000F  
                                u41_24 013C                                  u41_25 013A  
                                _TMR1L 000E                                  u34_20 0198  
                                u34_22 0199                                  u42_24 014B  
                                u42_25 0149                                  _PORTA 0005  
                                _PORTB 0006                                  u36_24 015F  
                                u60_24 00B7                                  u36_25 015D  
                                u60_25 00B4                                  u37_24 016E  
                                u37_25 016C                                  u38_24 017D  
                                u38_25 017B                                  _TRISA 0085  
                                u57_24 008F                                  _TRISB 0086  
                                u57_25 008C                        __end_of_all_off 01A4  
                      __end_of_leda_on 0187                        __end_of_ledb_on 0155  
                                pclath 000A                                  status 0003  
                                wtemp0 007E                        __initialization 0010  
                         __end_of_main 01D9                                 ??_main 0000  
                        _ir_data_valid 007D                       _timer0_interrupt 00E7  
            __size_of_setup_ir_decoder 0011                                 _TRISA0 0428  
                               _TRISA2 042A                                 _TRISA3 042B  
                               _TRISB3 0433                    timer0_interrupt@pos 0024  
                            ??_all_off 0070                              ??_leda_on 0071  
                            ??_ledb_on 0071                                 saved_w 007E  
           ??_timer1_interrupt_decoder 0070                __end_of__initialization 001A  
                       __pcstackCOMMON 0070                             __pbssBANK0 0020  
                           __pmaintext 01D7                             __pintentry 0004  
                     _setup_ir_decoder 01B9                                _all_off 0187  
             __end_of_timer0_interrupt 0123      timer1_interrupt_decoder@bit_count 007C  
                              __ptext1 01B9                                __ptext2 01A4  
                              __ptext3 001C                                __ptext4 00E7  
                              __ptext5 0123                                __ptext6 0155  
                              __ptext7 0187                                _leda_on 0155  
                              _ledb_on 0123                              _T1CONbits 0010  
                              _ir_data 0020                           __size_of_isr 0015  
                 end_of_initialization 001A       __end_of_timer1_interrupt_decoder 00E7  
                            _PORTBbits 0006                              _TRISBbits 0086  
                           leda_on@dir 0070                             leda_on@pos 0073  
                           ledb_on@dir 0070                             ledb_on@pos 0073  
                  start_initialization 0010                            __end_of_isr 01B9  
  timer1_interrupt_decoder@state_timer 007B      __size_of_timer1_interrupt_decoder 00CB  
            ?_timer1_interrupt_decoder 0070               __end_of_setup_ir_decoder 01CA  
                          __pbssCOMMON 007B                              ___latbits 0000  
                        __pcstackBANK0 0000                               ?_all_off 0070  
                            __pswtext1 01D2                              __pswtext2 01CA  
                    ?_timer0_interrupt 0070                               ?_leda_on 0070  
                             ?_ledb_on 0070                     ??_timer0_interrupt 0074  
                    interrupt_function 0004                               _PIE1bits 008C  
                             _PIR1bits 000C                       __size_of_all_off 001D  
                     __size_of_leda_on 0032                       __size_of_ledb_on 0032  
                        __size_of_main 0002                      ?_setup_ir_decoder 0070  
                           _INTCONbits 000B                     ??_setup_ir_decoder 0000  
                             intlevel1 0000              __size_of_timer0_interrupt 003C  
