

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri May 18 23:31:02 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F716
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	intentry,global,class=CODE,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	swtext1,local,class=CONST,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	swtext2,local,class=CONST,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    22                           	dabs	1,0x7E,2
    23  0000                     
    24                           ; Version 1.45
    25                           ; Generated 16/11/2017 GMT
    26                           ; 
    27                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC16F716 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     	;# 
    59  0001                     	;# 
    60  0002                     	;# 
    61  0003                     	;# 
    62  0004                     	;# 
    63  0005                     	;# 
    64  0006                     	;# 
    65  0006                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  000E                     	;# 
    70  000E                     	;# 
    71  000F                     	;# 
    72  0010                     	;# 
    73  0011                     	;# 
    74  0012                     	;# 
    75  0015                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0017                     	;# 
    79  0018                     	;# 
    80  0019                     	;# 
    81  001E                     	;# 
    82  001F                     	;# 
    83  0081                     	;# 
    84  0085                     	;# 
    85  0086                     	;# 
    86  0086                     	;# 
    87  008C                     	;# 
    88  008E                     	;# 
    89  0092                     	;# 
    90  009F                     	;# 
    91  0000                     	;# 
    92  0001                     	;# 
    93  0002                     	;# 
    94  0003                     	;# 
    95  0004                     	;# 
    96  0005                     	;# 
    97  0006                     	;# 
    98  0006                     	;# 
    99  000A                     	;# 
   100  000B                     	;# 
   101  000C                     	;# 
   102  000E                     	;# 
   103  000E                     	;# 
   104  000F                     	;# 
   105  0010                     	;# 
   106  0011                     	;# 
   107  0012                     	;# 
   108  0015                     	;# 
   109  0015                     	;# 
   110  0016                     	;# 
   111  0017                     	;# 
   112  0018                     	;# 
   113  0019                     	;# 
   114  001E                     	;# 
   115  001F                     	;# 
   116  0081                     	;# 
   117  0085                     	;# 
   118  0086                     	;# 
   119  0086                     	;# 
   120  008C                     	;# 
   121  008E                     	;# 
   122  0092                     	;# 
   123  009F                     	;# 
   124  0000                     	;# 
   125  0001                     	;# 
   126  0002                     	;# 
   127  0003                     	;# 
   128  0004                     	;# 
   129  0005                     	;# 
   130  0006                     	;# 
   131  0006                     	;# 
   132  000A                     	;# 
   133  000B                     	;# 
   134  000C                     	;# 
   135  000E                     	;# 
   136  000E                     	;# 
   137  000F                     	;# 
   138  0010                     	;# 
   139  0011                     	;# 
   140  0012                     	;# 
   141  0015                     	;# 
   142  0015                     	;# 
   143  0016                     	;# 
   144  0017                     	;# 
   145  0018                     	;# 
   146  0019                     	;# 
   147  001E                     	;# 
   148  001F                     	;# 
   149  0081                     	;# 
   150  0085                     	;# 
   151  0086                     	;# 
   152  0086                     	;# 
   153  008C                     	;# 
   154  008E                     	;# 
   155  0092                     	;# 
   156  009F                     	;# 
   157                           
   158                           	psect	idataBANK0
   159  01C9                     __pidataBANK0:	
   160                           
   161                           ;initializer for _move_leds
   162  01C9  3401               	retlw	1
   163  0006                     _PORTB	set	6
   164  0005                     _PORTA	set	5
   165  000B                     _INTCONbits	set	11
   166  0010                     _T1CONbits	set	16
   167  0006                     _PORTBbits	set	6
   168  000C                     _PIR1bits	set	12
   169  000E                     _TMR1L	set	14
   170  000F                     _TMR1H	set	15
   171  0081                     _OPTION_REGbits	set	129
   172  0086                     _TRISB	set	134
   173  0085                     _TRISA	set	133
   174  008C                     _PIE1bits	set	140
   175  0086                     _TRISBbits	set	134
   176                           
   177                           ; #config settings
   178  0000                     
   179                           	psect	cinit
   180  0010                     start_initialization:	
   181  0010                     __initialization:	
   182                           
   183                           ; Initialize objects allocated to BANK0
   184  0010  21C9               	fcall	__pidataBANK0	;fetch initializer
   185  0011  00AB               	movwf	__pdataBANK0& (0+127)
   186                           
   187                           ; Clear objects allocated to BANK0
   188  0012  01A0               	clrf	__pbssBANK0& (0+127)
   189  0013  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   190  0014  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   191  0015  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   192  0016  01A4               	clrf	(__pbssBANK0+4)& (0+127)
   193  0017  01A5               	clrf	(__pbssBANK0+5)& (0+127)
   194  0018  01A6               	clrf	(__pbssBANK0+6)& (0+127)
   195                           
   196                           ; Clear objects allocated to COMMON
   197  0019  01FC               	clrf	__pbssCOMMON& (0+127)
   198  001A  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
   199  001B                     end_of_initialization:	
   200                           ;End of C runtime variable initialization code
   201                           
   202  001B                     __end_of__initialization:	
   203  001B  0183               	clrf	3
   204  001C  29C7               	ljmp	_main	;jump to C main() function
   205                           
   206                           	psect	bssCOMMON
   207  007C                     __pbssCOMMON:	
   208  007C                     timer1_interrupt_decoder@state_timer:	
   209  007C                     	ds	1
   210  007D                     timer1_interrupt_decoder@bit_count:	
   211  007D                     	ds	1
   212                           
   213                           	psect	bssBANK0
   214  0020                     __pbssBANK0:	
   215  0020                     _ir_data:	
   216  0020                     	ds	4
   217  0024                     timer0_interrupt@pos:	
   218  0024                     	ds	1
   219  0025                     timer1_interrupt_decoder@decoder_state:	
   220  0025                     	ds	1
   221  0026                     _ir_data_valid:	
   222  0026                     	ds	1
   223                           
   224                           	psect	dataBANK0
   225  002B                     __pdataBANK0:	
   226  002B                     _move_leds:	
   227  002B                     	ds	1
   228                           
   229                           	psect	cstackCOMMON
   230  0070                     __pcstackCOMMON:	
   231  0070                     ?_exactly_on:	
   232  0070                     ?_all_off:	
   233                           ; 1 bytes @ 0x0
   234                           
   235  0070                     ??_all_off:	
   236                           ; 1 bytes @ 0x0
   237                           
   238  0070                     ?_leda_on:	
   239                           ; 1 bytes @ 0x0
   240                           
   241  0070                     ?_ledb_on:	
   242                           ; 1 bytes @ 0x0
   243                           
   244  0070                     ?_timer1_interrupt_decoder:	
   245                           ; 1 bytes @ 0x0
   246                           
   247  0070                     ?_setup_ir_decoder:	
   248                           ; 1 bytes @ 0x0
   249                           
   250  0070                     ?_ISR:	
   251                           ; 1 bytes @ 0x0
   252                           
   253  0070                     ?_main:	
   254                           ; 1 bytes @ 0x0
   255                           
   256  0070                     leda_on@dir:	
   257                           ; 1 bytes @ 0x0
   258                           
   259  0070                     ledb_on@dir:	
   260                           ; 1 bytes @ 0x0
   261                           
   262                           
   263                           ; 1 bytes @ 0x0
   264  0070                     	ds	1
   265  0071                     ??_leda_on:	
   266  0071                     ??_ledb_on:	
   267                           ; 1 bytes @ 0x1
   268                           
   269                           
   270                           ; 1 bytes @ 0x1
   271  0071                     	ds	2
   272  0073                     leda_on@pos:	
   273  0073                     ledb_on@pos:	
   274                           ; 1 bytes @ 0x3
   275                           
   276                           
   277                           ; 1 bytes @ 0x3
   278  0073                     	ds	1
   279  0074                     ??_exactly_on:	
   280  0074                     exactly_on@which:	
   281                           ; 1 bytes @ 0x4
   282                           
   283                           
   284                           ; 1 bytes @ 0x4
   285  0074                     	ds	1
   286  0075                     ??_timer1_interrupt_decoder:	
   287                           
   288                           ; 1 bytes @ 0x5
   289  0075                     	ds	7
   290                           
   291                           	psect	cstackBANK0
   292  0027                     __pcstackBANK0:	
   293  0027                     ??_ISR:	
   294                           
   295                           ; 1 bytes @ 0x0
   296  0027                     	ds	4
   297  002B                     ??_setup_ir_decoder:	
   298  002B                     ??_main:	
   299                           ; 1 bytes @ 0x4
   300                           
   301                           
   302                           	psect	maintext
   303  01C7                     __pmaintext:	
   304                           ; 1 bytes @ 0x4
   305 ;;
   306 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   307 ;;
   308 ;; *************** function _main *****************
   309 ;; Defined at:
   310 ;;		line 38 in file "main.c"
   311 ;; Parameters:    Size  Location     Type
   312 ;;		None
   313 ;; Auto vars:     Size  Location     Type
   314 ;;		None
   315 ;; Return value:  Size  Location     Type
   316 ;;                  1    wreg      void 
   317 ;; Registers used:
   318 ;;		wreg, status,2, status,0, pclath, cstack
   319 ;; Tracked objects:
   320 ;;		On entry : B00/0
   321 ;;		On exit  : 0/0
   322 ;;		Unchanged: 0/0
   323 ;; Data sizes:     COMMON   BANK0   BANK1
   324 ;;      Params:         0       0       0
   325 ;;      Locals:         0       0       0
   326 ;;      Temps:          0       0       0
   327 ;;      Totals:         0       0       0
   328 ;;Total ram usage:        0 bytes
   329 ;; Hardware stack levels required when called:    5
   330 ;; This function calls:
   331 ;;		_setup_ir_decoder
   332 ;; This function is called by:
   333 ;;		Startup code after reset
   334 ;; This function uses a non-reentrant model
   335 ;;
   336                           
   337                           
   338                           ;psect for function _main
   339  01C7                     _main:	
   340                           
   341                           ;main.c: 40: setup_ir_decoder();
   342                           
   343                           ;incstack = 0
   344                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   345  01C7  21A2               	fcall	_setup_ir_decoder
   346  01C8                     l84:	
   347                           ;main.c: 42: for(;;){}
   348                           
   349  01C8  29C8               	goto	l84
   350  01C9                     __end_of_main:	
   351                           
   352                           	psect	text1
   353  01A2                     __ptext1:	
   354 ;; *************** function _setup_ir_decoder *****************
   355 ;; Defined at:
   356 ;;		line 145 in file "ir_decoder.c"
   357 ;; Parameters:    Size  Location     Type
   358 ;;		None
   359 ;; Auto vars:     Size  Location     Type
   360 ;;		None
   361 ;; Return value:  Size  Location     Type
   362 ;;                  1    wreg      void 
   363 ;; Registers used:
   364 ;;		wreg
   365 ;; Tracked objects:
   366 ;;		On entry : 0/0
   367 ;;		On exit  : 0/0
   368 ;;		Unchanged: 0/0
   369 ;; Data sizes:     COMMON   BANK0   BANK1
   370 ;;      Params:         0       0       0
   371 ;;      Locals:         0       0       0
   372 ;;      Temps:          0       0       0
   373 ;;      Totals:         0       0       0
   374 ;;Total ram usage:        0 bytes
   375 ;; Hardware stack levels used:    1
   376 ;; Hardware stack levels required when called:    4
   377 ;; This function calls:
   378 ;;		Nothing
   379 ;; This function is called by:
   380 ;;		_main
   381 ;; This function uses a non-reentrant model
   382 ;;
   383                           
   384                           
   385                           ;psect for function _setup_ir_decoder
   386  01A2                     _setup_ir_decoder:	
   387                           
   388                           ;ir_decoder.c: 147: TRISBbits.TRISB0 = 1;
   389                           
   390                           ;incstack = 0
   391                           ; Regs used in _setup_ir_decoder: [wreg]
   392  01A2  1683               	bsf	3,5	;RP0=1, select bank1
   393  01A3  1406               	bsf	6,0	;volatile
   394                           
   395                           ;ir_decoder.c: 149: T1CONbits.T1OSCEN = 1;
   396  01A4  1283               	bcf	3,5	;RP0=0, select bank0
   397  01A5  1590               	bsf	16,3	;volatile
   398                           
   399                           ;ir_decoder.c: 150: T1CONbits.T1SYNC = 1;
   400  01A6  1510               	bsf	16,2	;volatile
   401                           
   402                           ;ir_decoder.c: 151: T1CONbits.TMR1ON = 1;
   403  01A7  1410               	bsf	16,0	;volatile
   404                           
   405                           ;ir_decoder.c: 152: PIE1bits.TMR1IE = 1;
   406  01A8  1683               	bsf	3,5	;RP0=1, select bank1
   407  01A9  140C               	bsf	12,0	;volatile
   408                           
   409                           ;ir_decoder.c: 153: INTCONbits.PEIE = 1;
   410  01AA  170B               	bsf	11,6	;volatile
   411                           
   412                           ;ir_decoder.c: 154: INTCONbits.GIE = 1;
   413  01AB  178B               	bsf	11,7	;volatile
   414                           
   415                           ;ir_decoder.c: 155: do { TMR1H = 255; TMR1L = (255-140); PIR1bits.TMR1IF = 0; } while(0)
      +                          ;
   416  01AC  30FF               	movlw	255
   417  01AD  1283               	bcf	3,5	;RP0=0, select bank0
   418  01AE  008F               	movwf	15	;volatile
   419  01AF  3073               	movlw	115
   420  01B0  008E               	movwf	14	;volatile
   421  01B1  100C               	bcf	12,0	;volatile
   422  01B2  0008               	return
   423  01B3                     __end_of_setup_ir_decoder:	
   424                           
   425                           	psect	text2
   426  0190                     __ptext2:	
   427 ;; *************** function _ISR *****************
   428 ;; Defined at:
   429 ;;		line 23 in file "main.c"
   430 ;; Parameters:    Size  Location     Type
   431 ;;		None
   432 ;; Auto vars:     Size  Location     Type
   433 ;;		None
   434 ;; Return value:  Size  Location     Type
   435 ;;                  1    wreg      void 
   436 ;; Registers used:
   437 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   438 ;; Tracked objects:
   439 ;;		On entry : 0/0
   440 ;;		On exit  : 0/0
   441 ;;		Unchanged: 0/0
   442 ;; Data sizes:     COMMON   BANK0   BANK1
   443 ;;      Params:         0       0       0
   444 ;;      Locals:         0       0       0
   445 ;;      Temps:          0       4       0
   446 ;;      Totals:         0       4       0
   447 ;;Total ram usage:        4 bytes
   448 ;; Hardware stack levels used:    1
   449 ;; Hardware stack levels required when called:    3
   450 ;; This function calls:
   451 ;;		_timer1_interrupt_decoder
   452 ;; This function is called by:
   453 ;;		Interrupt level 1
   454 ;; This function uses a non-reentrant model
   455 ;;
   456                           
   457                           
   458                           ;psect for function _ISR
   459  0190                     _ISR:	
   460                           
   461                           ;main.c: 33: if (PIR1bits.TMR1IF && PIE1bits.TMR1IE) {
   462  0190  1C0C               	btfss	12,0	;volatile
   463  0191  2996               	goto	i1l79
   464  0192  1683               	bsf	3,5	;RP0=1, select bank1
   465  0193  1C0C               	btfss	12,0	;volatile
   466  0194  2996               	goto	i1l79
   467                           
   468                           ;main.c: 34: timer1_interrupt_decoder();
   469  0195  201D               	fcall	_timer1_interrupt_decoder
   470  0196                     i1l79:	
   471  0196  1283               	bcf	3,5	;RP0=0, select bank0
   472  0197  082A               	movf	??_ISR+3,w
   473  0198  00FF               	movwf	127
   474  0199  0829               	movf	??_ISR+2,w
   475  019A  008A               	movwf	10
   476  019B  0828               	movf	??_ISR+1,w
   477  019C  0084               	movwf	4
   478  019D  0E27               	swapf	??_ISR^0,w
   479  019E  0083               	movwf	3
   480  019F  0EFE               	swapf	126,f
   481  01A0  0E7E               	swapf	126,w
   482  01A1  0009               	retfie
   483  01A2                     __end_of_ISR:	
   484                           
   485                           	psect	intentry
   486  0004                     __pintentry:	
   487                           ;incstack = 0
   488                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   489                           
   490  0004                     interrupt_function:	
   491  007E                     saved_w	set	btemp
   492  0004  00FE               	movwf	btemp
   493  0005  0E03               	swapf	3,w
   494  0006  1283               	bcf	3,5	;RP0=0, select bank0
   495  0007  00A7               	movwf	??_ISR
   496  0008  0804               	movf	4,w
   497  0009  00A8               	movwf	??_ISR+1
   498  000A  080A               	movf	10,w
   499  000B  00A9               	movwf	??_ISR+2
   500  000C  087F               	movf	btemp+1,w
   501  000D  00AA               	movwf	??_ISR+3
   502  000E  2990               	ljmp	_ISR
   503                           
   504                           	psect	text3
   505  001D                     __ptext3:	
   506 ;; *************** function _timer1_interrupt_decoder *****************
   507 ;; Defined at:
   508 ;;		line 49 in file "ir_decoder.c"
   509 ;; Parameters:    Size  Location     Type
   510 ;;		None
   511 ;; Auto vars:     Size  Location     Type
   512 ;;		None
   513 ;; Return value:  Size  Location     Type
   514 ;;                  1    wreg      void 
   515 ;; Registers used:
   516 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   517 ;; Tracked objects:
   518 ;;		On entry : 0/0
   519 ;;		On exit  : 0/0
   520 ;;		Unchanged: 0/0
   521 ;; Data sizes:     COMMON   BANK0   BANK1
   522 ;;      Params:         0       0       0
   523 ;;      Locals:         0       0       0
   524 ;;      Temps:          7       0       0
   525 ;;      Totals:         7       0       0
   526 ;;Total ram usage:        7 bytes
   527 ;; Hardware stack levels used:    1
   528 ;; Hardware stack levels required when called:    2
   529 ;; This function calls:
   530 ;;		_exactly_on
   531 ;; This function is called by:
   532 ;;		_ISR
   533 ;; This function uses a non-reentrant model
   534 ;;
   535                           
   536                           
   537                           ;psect for function _timer1_interrupt_decoder
   538  001D                     _timer1_interrupt_decoder:	
   539                           
   540                           ;incstack = 0
   541                           ; Regs used in _timer1_interrupt_decoder: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   542                           ;ir_decoder.c: 51: static volatile ir_decoder_state_t decoder_state = STATE_IDLE;
   543                           ;ir_decoder.c: 52: static volatile uint8_t bit_count = 0;
   544                           ;ir_decoder.c: 53: static volatile uint8_t state_timer = 0;
   545                           ;ir_decoder.c: 55: do { TMR1H = 255; TMR1L = (255-140); PIR1bits.TMR1IF = 0; } while(0);
   546  001D  30FF               	movlw	255
   547  001E  1283               	bcf	3,5	;RP0=0, select bank0
   548  001F  008F               	movwf	15	;volatile
   549  0020  3073               	movlw	115
   550  0021  008E               	movwf	14	;volatile
   551  0022  100C               	bcf	12,0	;volatile
   552                           
   553                           ;ir_decoder.c: 58: if(ir_data_valid)
   554  0023  0826               	movf	_ir_data_valid,w	;volatile
   555  0024  1D03               	btfss	3,2
   556  0025  0008               	return
   557  0026  28F1               	goto	i1l948
   558  0027                     i1l36:	
   559                           ;ir_decoder.c: 62: case STATE_IDLE:
   560                           
   561                           ;ir_decoder.c: 61: switch (decoder_state) {
   562                           
   563                           ;ir_decoder.c: 59: return;
   564                           
   565                           
   566                           ;ir_decoder.c: 64: if (PORTBbits.RB0)
   567  0027  1806               	btfsc	6,0	;volatile
   568  0028  0008               	return
   569                           
   570                           ;ir_decoder.c: 66: decoder_state = STATE_START;
   571                           
   572                           ;ir_decoder.c: 65: return;
   573  0029  3001               	movlw	1
   574  002A  00F5               	movwf	??_timer1_interrupt_decoder
   575  002B  0875               	movf	??_timer1_interrupt_decoder,w
   576  002C  00A5               	movwf	timer1_interrupt_decoder@decoder_state	;volatile
   577                           
   578                           ;ir_decoder.c: 67: state_timer = 1;
   579  002D  3001               	movlw	1
   580  002E  00F5               	movwf	??_timer1_interrupt_decoder
   581  002F  0875               	movf	??_timer1_interrupt_decoder,w
   582  0030  00FC               	movwf	timer1_interrupt_decoder@state_timer	;volatile
   583                           
   584                           ;ir_decoder.c: 68: bit_count = 0;
   585  0031  01FD               	clrf	timer1_interrupt_decoder@bit_count	;volatile
   586                           
   587                           ;ir_decoder.c: 69: return;
   588  0032  0008               	return
   589  0033                     i1l846:	
   590                           ;ir_decoder.c: 70: case STATE_START:
   591                           
   592                           
   593                           ;ir_decoder.c: 72: exactly_on(1);
   594  0033  3001               	movlw	1
   595  0034  20FD               	fcall	_exactly_on
   596                           
   597                           ;ir_decoder.c: 73: if (!PORTBbits.RB0) {
   598  0035  1283               	bcf	3,5	;RP0=0, select bank0
   599  0036  1806               	btfsc	6,0	;volatile
   600  0037  283D               	goto	i1l854
   601                           
   602                           ;ir_decoder.c: 74: state_timer++;
   603  0038  3001               	movlw	1
   604  0039  00F5               	movwf	??_timer1_interrupt_decoder
   605  003A  0875               	movf	??_timer1_interrupt_decoder,w
   606  003B  07FC               	addwf	timer1_interrupt_decoder@state_timer,f	;volatile
   607                           
   608                           ;ir_decoder.c: 75: return;
   609  003C  0008               	return
   610  003D                     i1l854:	
   611                           
   612                           ;ir_decoder.c: 76: }
   613                           ;ir_decoder.c: 78: if ((((((9000/140)*(100-20)/100)) <= ((state_timer))) && (((state_tim
      +                          er)) <= ((9000/140)*(100+20)/100)))) {
   614  003D  3033               	movlw	51
   615  003E  027C               	subwf	timer1_interrupt_decoder@state_timer,w	;volatile
   616  003F  1C03               	skipc
   617  0040  284B               	goto	i1l864
   618  0041  304D               	movlw	77
   619  0042  027C               	subwf	timer1_interrupt_decoder@state_timer,w	;volatile
   620  0043  1803               	skipnc
   621  0044  284B               	goto	i1l864
   622                           
   623                           ;ir_decoder.c: 79: decoder_state = STATE_START_GAP;
   624  0045  3002               	movlw	2
   625  0046  00F5               	movwf	??_timer1_interrupt_decoder
   626  0047  0875               	movf	??_timer1_interrupt_decoder,w
   627  0048  00A5               	movwf	timer1_interrupt_decoder@decoder_state	;volatile
   628                           
   629                           ;ir_decoder.c: 80: state_timer=0;
   630  0049  01FC               	clrf	timer1_interrupt_decoder@state_timer	;volatile
   631                           
   632                           ;ir_decoder.c: 81: return;
   633  004A  0008               	return
   634  004B                     i1l864:	
   635                           
   636                           ;ir_decoder.c: 82: }
   637                           ;ir_decoder.c: 84: decoder_state = STATE_IDLE;
   638  004B  01A5               	clrf	timer1_interrupt_decoder@decoder_state	;volatile
   639                           
   640                           ;ir_decoder.c: 85: return;
   641  004C  0008               	return
   642  004D                     i1l868:	
   643                           ;ir_decoder.c: 86: case STATE_START_GAP:
   644                           
   645                           
   646                           ;ir_decoder.c: 88: exactly_on(2);
   647  004D  3002               	movlw	2
   648  004E  20FD               	fcall	_exactly_on
   649                           
   650                           ;ir_decoder.c: 89: if (PORTBbits.RB0) {
   651  004F  1283               	bcf	3,5	;RP0=0, select bank0
   652  0050  1C06               	btfss	6,0	;volatile
   653  0051  2857               	goto	i1l876
   654                           
   655                           ;ir_decoder.c: 90: state_timer++;
   656  0052  3001               	movlw	1
   657  0053  00F5               	movwf	??_timer1_interrupt_decoder
   658  0054  0875               	movf	??_timer1_interrupt_decoder,w
   659  0055  07FC               	addwf	timer1_interrupt_decoder@state_timer,f	;volatile
   660                           
   661                           ;ir_decoder.c: 91: return;
   662  0056  0008               	return
   663  0057                     i1l876:	
   664                           
   665                           ;ir_decoder.c: 92: }
   666                           ;ir_decoder.c: 93: if (!(((((4500/140)*(100-20)/100)) <= ((state_timer))) && (((state_ti
      +                          mer)) <= ((4500/140)*(100+20)/100)))) {
   667  0057  3019               	movlw	25
   668  0058  027C               	subwf	timer1_interrupt_decoder@state_timer,w	;volatile
   669  0059  1C03               	skipc
   670  005A  285F               	goto	i1l880
   671  005B  3027               	movlw	39
   672  005C  027C               	subwf	timer1_interrupt_decoder@state_timer,w	;volatile
   673  005D  1C03               	skipc
   674  005E  2861               	goto	i1l884
   675  005F                     i1l880:	
   676                           
   677                           ;ir_decoder.c: 94: decoder_state = STATE_IDLE;
   678  005F  01A5               	clrf	timer1_interrupt_decoder@decoder_state	;volatile
   679                           
   680                           ;ir_decoder.c: 95: return;
   681  0060  0008               	return
   682  0061                     i1l884:	
   683                           
   684                           ;ir_decoder.c: 96: }
   685                           ;ir_decoder.c: 98: state_timer = 0;
   686  0061  01FC               	clrf	timer1_interrupt_decoder@state_timer	;volatile
   687                           
   688                           ;ir_decoder.c: 99: decoder_state = STATE_BURST;
   689  0062  3003               	movlw	3
   690  0063  00F5               	movwf	??_timer1_interrupt_decoder
   691  0064  0875               	movf	??_timer1_interrupt_decoder,w
   692  0065  00A5               	movwf	timer1_interrupt_decoder@decoder_state	;volatile
   693                           
   694                           ;ir_decoder.c: 100: return;
   695  0066  0008               	return
   696  0067                     i1l890:	
   697                           ;ir_decoder.c: 101: case STATE_BURST:
   698                           
   699                           
   700                           ;ir_decoder.c: 102: exactly_on(3);
   701  0067  3003               	movlw	3
   702  0068  20FD               	fcall	_exactly_on
   703                           
   704                           ;ir_decoder.c: 103: if (!PORTBbits.RB0) {
   705  0069  1283               	bcf	3,5	;RP0=0, select bank0
   706  006A  1806               	btfsc	6,0	;volatile
   707  006B  2871               	goto	i1l898
   708                           
   709                           ;ir_decoder.c: 104: state_timer++;
   710  006C  3001               	movlw	1
   711  006D  00F5               	movwf	??_timer1_interrupt_decoder
   712  006E  0875               	movf	??_timer1_interrupt_decoder,w
   713  006F  07FC               	addwf	timer1_interrupt_decoder@state_timer,f	;volatile
   714                           
   715                           ;ir_decoder.c: 105: return;
   716  0070  0008               	return
   717  0071                     i1l898:	
   718                           
   719                           ;ir_decoder.c: 106: }
   720                           ;ir_decoder.c: 108: if (!(((((562/140)*(100-20)/100)) <= ((state_timer))) && (((state_ti
      +                          mer)) <= ((562/140)*(100+20)/100)))) {
   721  0071  3003               	movlw	3
   722  0072  027C               	subwf	timer1_interrupt_decoder@state_timer,w	;volatile
   723  0073  1C03               	skipc
   724  0074  2879               	goto	i1l902
   725  0075  3005               	movlw	5
   726  0076  027C               	subwf	timer1_interrupt_decoder@state_timer,w	;volatile
   727  0077  1C03               	skipc
   728  0078  287B               	goto	i1l904
   729  0079                     i1l902:	
   730                           
   731                           ;ir_decoder.c: 109: decoder_state = STATE_IDLE;
   732  0079  01A5               	clrf	timer1_interrupt_decoder@decoder_state	;volatile
   733                           
   734                           ;ir_decoder.c: 110: } else {
   735  007A  0008               	return
   736  007B                     i1l904:	
   737                           
   738                           ;ir_decoder.c: 111: decoder_state = STATE_GAP;
   739  007B  3004               	movlw	4
   740  007C  00F5               	movwf	??_timer1_interrupt_decoder
   741  007D  0875               	movf	??_timer1_interrupt_decoder,w
   742  007E  00A5               	movwf	timer1_interrupt_decoder@decoder_state	;volatile
   743                           
   744                           ;ir_decoder.c: 112: state_timer = 0;
   745  007F  01FC               	clrf	timer1_interrupt_decoder@state_timer	;volatile
   746                           
   747                           ;ir_decoder.c: 113: }
   748                           ;ir_decoder.c: 114: return;
   749  0080  0008               	return
   750  0081                     i1l910:	
   751                           ;ir_decoder.c: 115: case STATE_GAP:
   752                           
   753                           
   754                           ;ir_decoder.c: 116: exactly_on(4);
   755  0081  3004               	movlw	4
   756  0082  20FD               	fcall	_exactly_on
   757                           
   758                           ;ir_decoder.c: 117: if (PORTBbits.RB0) {
   759  0083  1283               	bcf	3,5	;RP0=0, select bank0
   760  0084  1C06               	btfss	6,0	;volatile
   761  0085  288B               	goto	i1l918
   762                           
   763                           ;ir_decoder.c: 118: state_timer++;
   764  0086  3001               	movlw	1
   765  0087  00F5               	movwf	??_timer1_interrupt_decoder
   766  0088  0875               	movf	??_timer1_interrupt_decoder,w
   767  0089  07FC               	addwf	timer1_interrupt_decoder@state_timer,f	;volatile
   768                           
   769                           ;ir_decoder.c: 119: return;
   770  008A  0008               	return
   771  008B                     i1l918:	
   772                           
   773                           ;ir_decoder.c: 120: }
   774                           ;ir_decoder.c: 121: if ((((((562/140)*(100-20)/100)) <= ((state_timer))) && (((state_tim
      +                          er)) <= ((562/140)*(100+20)/100)))) {
   775  008B  3003               	movlw	3
   776  008C  027C               	subwf	timer1_interrupt_decoder@state_timer,w	;volatile
   777  008D  1C03               	skipc
   778  008E  28B3               	goto	i1l924
   779  008F  3005               	movlw	5
   780  0090  027C               	subwf	timer1_interrupt_decoder@state_timer,w	;volatile
   781  0091  1803               	skipnc
   782  0092  28B3               	goto	i1l924
   783                           
   784                           ;ir_decoder.c: 123: ir_data &= ~(1u << (31u-bit_count));
   785  0093  037D               	decf	timer1_interrupt_decoder@bit_count,w
   786  0094  3AFF               	xorlw	255
   787  0095  3E1F               	addlw	31
   788  0096  00F5               	movwf	??_timer1_interrupt_decoder
   789  0097  0AF5               	incf	??_timer1_interrupt_decoder,f
   790  0098  3001               	movlw	1
   791  0099  00F6               	movwf	??_timer1_interrupt_decoder+1
   792  009A  3000               	movlw	0
   793  009B  00F7               	movwf	??_timer1_interrupt_decoder+2
   794  009C  28A0               	goto	u52_24
   795  009D                     u52_25:	
   796  009D  1003               	clrc
   797  009E  0DF6               	rlf	??_timer1_interrupt_decoder+1,f
   798  009F  0DF7               	rlf	??_timer1_interrupt_decoder+2,f
   799  00A0                     u52_24:	
   800  00A0  0BF5               	decfsz	??_timer1_interrupt_decoder,f
   801  00A1  289D               	goto	u52_25
   802  00A2  09F6               	comf	??_timer1_interrupt_decoder+1,f
   803  00A3  09F7               	comf	??_timer1_interrupt_decoder+2,f
   804  00A4  0876               	movf	??_timer1_interrupt_decoder+1,w
   805  00A5  00F8               	movwf	??_timer1_interrupt_decoder+3
   806  00A6  0877               	movf	??_timer1_interrupt_decoder+2,w
   807  00A7  00F9               	movwf	??_timer1_interrupt_decoder+4
   808  00A8  01FA               	clrf	??_timer1_interrupt_decoder+5
   809  00A9  01FB               	clrf	??_timer1_interrupt_decoder+6
   810  00AA  0878               	movf	??_timer1_interrupt_decoder+3,w
   811  00AB  05A0               	andwf	_ir_data,f	;volatile
   812  00AC  0879               	movf	??_timer1_interrupt_decoder+4,w
   813  00AD  05A1               	andwf	_ir_data+1,f	;volatile
   814  00AE  087A               	movf	??_timer1_interrupt_decoder+5,w
   815  00AF  05A2               	andwf	_ir_data+2,f	;volatile
   816  00B0  087B               	movf	??_timer1_interrupt_decoder+6,w
   817  00B1  05A3               	andwf	_ir_data+3,f	;volatile
   818                           
   819                           ;ir_decoder.c: 124: } else if ((((((1675/140)*(100-20)/100)) <= ((state_timer))) && (((s
      +                          tate_timer)) <= ((1675/140)*(100+20)/100)))) {
   820  00B2  28DB               	goto	i1l934
   821  00B3                     i1l924:	
   822  00B3  3008               	movlw	8
   823  00B4  027C               	subwf	timer1_interrupt_decoder@state_timer,w	;volatile
   824  00B5  1C03               	skipc
   825  00B6  28D9               	goto	i1l930
   826  00B7  300E               	movlw	14
   827  00B8  027C               	subwf	timer1_interrupt_decoder@state_timer,w	;volatile
   828  00B9  1803               	skipnc
   829  00BA  28D9               	goto	i1l930
   830                           
   831                           ;ir_decoder.c: 126: ir_data |= (1u << (31u-bit_count));
   832  00BB  037D               	decf	timer1_interrupt_decoder@bit_count,w
   833  00BC  3AFF               	xorlw	255
   834  00BD  3E1F               	addlw	31
   835  00BE  00F5               	movwf	??_timer1_interrupt_decoder
   836  00BF  0AF5               	incf	??_timer1_interrupt_decoder,f
   837  00C0  3001               	movlw	1
   838  00C1  00F6               	movwf	??_timer1_interrupt_decoder+1
   839  00C2  3000               	movlw	0
   840  00C3  00F7               	movwf	??_timer1_interrupt_decoder+2
   841  00C4  28C8               	goto	u55_24
   842  00C5                     u55_25:	
   843  00C5  1003               	clrc
   844  00C6  0DF6               	rlf	??_timer1_interrupt_decoder+1,f
   845  00C7  0DF7               	rlf	??_timer1_interrupt_decoder+2,f
   846  00C8                     u55_24:	
   847  00C8  0BF5               	decfsz	??_timer1_interrupt_decoder,f
   848  00C9  28C5               	goto	u55_25
   849  00CA  0876               	movf	??_timer1_interrupt_decoder+1,w
   850  00CB  00F8               	movwf	??_timer1_interrupt_decoder+3
   851  00CC  0877               	movf	??_timer1_interrupt_decoder+2,w
   852  00CD  00F9               	movwf	??_timer1_interrupt_decoder+4
   853  00CE  01FA               	clrf	??_timer1_interrupt_decoder+5
   854  00CF  01FB               	clrf	??_timer1_interrupt_decoder+6
   855  00D0  0878               	movf	??_timer1_interrupt_decoder+3,w
   856  00D1  04A0               	iorwf	_ir_data,f	;volatile
   857  00D2  0879               	movf	??_timer1_interrupt_decoder+4,w
   858  00D3  04A1               	iorwf	_ir_data+1,f	;volatile
   859  00D4  087A               	movf	??_timer1_interrupt_decoder+5,w
   860  00D5  04A2               	iorwf	_ir_data+2,f	;volatile
   861  00D6  087B               	movf	??_timer1_interrupt_decoder+6,w
   862  00D7  04A3               	iorwf	_ir_data+3,f	;volatile
   863                           
   864                           ;ir_decoder.c: 127: } else {
   865  00D8  28DB               	goto	i1l934
   866  00D9                     i1l930:	
   867                           
   868                           ;ir_decoder.c: 129: decoder_state = STATE_IDLE;
   869  00D9  01A5               	clrf	timer1_interrupt_decoder@decoder_state	;volatile
   870                           
   871                           ;ir_decoder.c: 130: return;
   872  00DA  0008               	return
   873  00DB                     i1l934:	
   874                           
   875                           ;ir_decoder.c: 131: }
   876                           ;ir_decoder.c: 133: bit_count++;
   877  00DB  3001               	movlw	1
   878  00DC  00F5               	movwf	??_timer1_interrupt_decoder
   879  00DD  0875               	movf	??_timer1_interrupt_decoder,w
   880  00DE  07FD               	addwf	timer1_interrupt_decoder@bit_count,f	;volatile
   881                           
   882                           ;ir_decoder.c: 134: if (bit_count == 32) {
   883  00DF  3020               	movlw	32
   884  00E0  067D               	xorwf	timer1_interrupt_decoder@bit_count,w	;volatile
   885  00E1  1D03               	btfss	3,2
   886  00E2  28EB               	goto	i1l942
   887                           
   888                           ;ir_decoder.c: 135: ir_data_valid = 1;
   889  00E3  3001               	movlw	1
   890  00E4  00F5               	movwf	??_timer1_interrupt_decoder
   891  00E5  0875               	movf	??_timer1_interrupt_decoder,w
   892  00E6  00A6               	movwf	_ir_data_valid	;volatile
   893                           
   894                           ;ir_decoder.c: 136: decoder_state = STATE_IDLE;
   895  00E7  01A5               	clrf	timer1_interrupt_decoder@decoder_state	;volatile
   896                           
   897                           ;ir_decoder.c: 137: exactly_on(5);
   898  00E8  3005               	movlw	5
   899  00E9  20FD               	fcall	_exactly_on
   900                           
   901                           ;ir_decoder.c: 138: } else {
   902  00EA  0008               	return
   903  00EB                     i1l942:	
   904                           
   905                           ;ir_decoder.c: 139: decoder_state = STATE_BURST;
   906  00EB  3003               	movlw	3
   907  00EC  00F5               	movwf	??_timer1_interrupt_decoder
   908  00ED  0875               	movf	??_timer1_interrupt_decoder,w
   909  00EE  1283               	bcf	3,5	;RP0=0, select bank0
   910  00EF  00A5               	movwf	timer1_interrupt_decoder@decoder_state	;volatile
   911                           
   912                           ;ir_decoder.c: 142: }
   913                           
   914                           ;ir_decoder.c: 140: }
   915                           ;ir_decoder.c: 141: return;
   916  00F0  0008               	return
   917  00F1                     i1l948:	
   918  00F1  0825               	movf	timer1_interrupt_decoder@decoder_state,w	;volatile
   919                           
   920                           ; Switch size 1, requested type "space"
   921                           ; Number of cases is 5, Range of values is 0 to 4
   922                           ; switch strategies available:
   923                           ; Name         Instructions Cycles
   924                           ; direct_byte           11     6 (fixed)
   925                           ; simple_byte           16     9 (average)
   926                           ; jumptable            260     6 (fixed)
   927                           ;	Chosen strategy is direct_byte
   928  00F2  0084               	movwf	4
   929  00F3  3005               	movlw	5
   930  00F4  0204               	subwf	4,w
   931  00F5  1803               	skipnc
   932  00F6  0008               	return
   933  00F7  3001               	movlw	high i1S1036
   934  00F8  008A               	movwf	10
   935  00F9  30C2               	movlw	low i1S1036
   936  00FA  0704               	addwf	4,w
   937  00FB  0082               	movwf	2
   938  00FC  0008               	return
   939  00FD                     __end_of_timer1_interrupt_decoder:	
   940                           
   941                           	psect	swtext1
   942  01C2                     __pswtext1:	
   943  01C2                     i1S1036:	
   944  01C2  2827               	ljmp	i1l36
   945  01C3  2833               	ljmp	i1l846
   946  01C4  284D               	ljmp	i1l868
   947  01C5  2867               	ljmp	i1l890
   948  01C6  2881               	ljmp	i1l910
   949                           
   950                           	psect	text4
   951  00FD                     __ptext4:	
   952 ;; *************** function _exactly_on *****************
   953 ;; Defined at:
   954 ;;		line 23 in file "leds.c"
   955 ;; Parameters:    Size  Location     Type
   956 ;;  which           1    wreg     unsigned char 
   957 ;; Auto vars:     Size  Location     Type
   958 ;;  which           1    4[COMMON] unsigned char 
   959 ;; Return value:  Size  Location     Type
   960 ;;                  1    wreg      void 
   961 ;; Registers used:
   962 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   963 ;; Tracked objects:
   964 ;;		On entry : 0/0
   965 ;;		On exit  : 0/0
   966 ;;		Unchanged: 0/0
   967 ;; Data sizes:     COMMON   BANK0   BANK1
   968 ;;      Params:         0       0       0
   969 ;;      Locals:         1       0       0
   970 ;;      Temps:          0       0       0
   971 ;;      Totals:         1       0       0
   972 ;;Total ram usage:        1 bytes
   973 ;; Hardware stack levels used:    1
   974 ;; Hardware stack levels required when called:    1
   975 ;; This function calls:
   976 ;;		_all_off
   977 ;;		_leda_on
   978 ;;		_ledb_on
   979 ;; This function is called by:
   980 ;;		_timer1_interrupt_decoder
   981 ;; This function uses a non-reentrant model
   982 ;;
   983                           
   984                           
   985                           ;psect for function _exactly_on
   986  00FD                     _exactly_on:	
   987                           
   988                           ;incstack = 0
   989                           ; Regs used in _exactly_on: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   990                           ;exactly_on@which stored from wreg
   991  00FD  00F4               	movwf	exactly_on@which
   992                           
   993                           ;leds.c: 24: all_off();
   994  00FE  21BB               	fcall	_all_off
   995                           
   996                           ;leds.c: 25: switch (which) {
   997  00FF  2924               	goto	i1l824
   998  0100                     i1l806:	
   999                           ;leds.c: 26: case 0:
  1000                           
  1001                           
  1002                           ;leds.c: 27: leda_on(0, 0);
  1003  0100  01F0               	clrf	leda_on@dir
  1004  0101  3000               	movlw	0
  1005  0102  2160               	fcall	_leda_on
  1006                           
  1007                           ;leds.c: 28: break;
  1008  0103  0008               	return
  1009  0104                     i1l808:	
  1010                           ;leds.c: 29: case 1:
  1011                           
  1012                           
  1013                           ;leds.c: 30: leda_on(2, 0);
  1014  0104  01F0               	clrf	leda_on@dir
  1015  0105  3002               	movlw	2
  1016  0106  2160               	fcall	_leda_on
  1017                           
  1018                           ;leds.c: 31: break;
  1019  0107  0008               	return
  1020  0108                     i1l810:	
  1021                           ;leds.c: 32: case 2:
  1022                           
  1023                           
  1024                           ;leds.c: 33: ledb_on(3, 0);
  1025  0108  01F0               	clrf	ledb_on@dir
  1026  0109  3003               	movlw	3
  1027  010A  2130               	fcall	_ledb_on
  1028                           
  1029                           ;leds.c: 34: break;
  1030  010B  0008               	return
  1031  010C                     i1l812:	
  1032                           ;leds.c: 35: case 3:
  1033                           
  1034                           
  1035                           ;leds.c: 36: ledb_on(3, 1);
  1036  010C  01F0               	clrf	ledb_on@dir
  1037  010D  0AF0               	incf	ledb_on@dir,f
  1038  010E  3003               	movlw	3
  1039  010F  2130               	fcall	_ledb_on
  1040                           
  1041                           ;leds.c: 37: break;
  1042  0110  0008               	return
  1043  0111                     i1l814:	
  1044                           ;leds.c: 38: case 4:
  1045                           
  1046                           
  1047                           ;leds.c: 39: leda_on(0, 1);
  1048  0111  01F0               	clrf	leda_on@dir
  1049  0112  0AF0               	incf	leda_on@dir,f
  1050  0113  3000               	movlw	0
  1051  0114  2160               	fcall	_leda_on
  1052                           
  1053                           ;leds.c: 40: break;
  1054  0115  0008               	return
  1055  0116                     i1l816:	
  1056                           ;leds.c: 41: case 5:
  1057                           
  1058                           
  1059                           ;leds.c: 42: leda_on(2, 1);
  1060  0116  01F0               	clrf	leda_on@dir
  1061  0117  0AF0               	incf	leda_on@dir,f
  1062  0118  3002               	movlw	2
  1063  0119  2160               	fcall	_leda_on
  1064                           
  1065                           ;leds.c: 43: break;
  1066  011A  0008               	return
  1067  011B                     i1l818:	
  1068                           ;leds.c: 44: case 6:
  1069                           
  1070                           
  1071                           ;leds.c: 45: leda_on(3, 0);
  1072  011B  01F0               	clrf	leda_on@dir
  1073  011C  3003               	movlw	3
  1074  011D  2160               	fcall	_leda_on
  1075                           
  1076                           ;leds.c: 46: break;
  1077  011E  0008               	return
  1078  011F                     i1l820:	
  1079                           ;leds.c: 47: case 7:
  1080                           
  1081                           
  1082                           ;leds.c: 48: leda_on(3, 1);
  1083  011F  01F0               	clrf	leda_on@dir
  1084  0120  0AF0               	incf	leda_on@dir,f
  1085  0121  3003               	movlw	3
  1086  0122  2160               	fcall	_leda_on
  1087                           
  1088                           ;leds.c: 50: }
  1089                           
  1090                           ;leds.c: 49: break;
  1091  0123  0008               	return
  1092  0124                     i1l824:	
  1093  0124  0874               	movf	exactly_on@which,w
  1094                           
  1095                           ; Switch size 1, requested type "space"
  1096                           ; Number of cases is 8, Range of values is 0 to 7
  1097                           ; switch strategies available:
  1098                           ; Name         Instructions Cycles
  1099                           ; direct_byte           14     6 (fixed)
  1100                           ; simple_byte           25    13 (average)
  1101                           ; jumptable            260     6 (fixed)
  1102                           ;	Chosen strategy is direct_byte
  1103  0125  0084               	movwf	4
  1104  0126  3008               	movlw	8
  1105  0127  0204               	subwf	4,w
  1106  0128  1803               	skipnc
  1107  0129  0008               	return
  1108  012A  3001               	movlw	high i1S1038
  1109  012B  008A               	movwf	10
  1110  012C  30B3               	movlw	low i1S1038
  1111  012D  0704               	addwf	4,w
  1112  012E  0082               	movwf	2
  1113  012F  0008               	return
  1114  0130                     __end_of_exactly_on:	
  1115                           
  1116                           	psect	swtext2
  1117  01B3                     __pswtext2:	
  1118  01B3                     i1S1038:	
  1119  01B3  2900               	ljmp	i1l806
  1120  01B4  2904               	ljmp	i1l808
  1121  01B5  2908               	ljmp	i1l810
  1122  01B6  290C               	ljmp	i1l812
  1123  01B7  2911               	ljmp	i1l814
  1124  01B8  2916               	ljmp	i1l816
  1125  01B9  291B               	ljmp	i1l818
  1126  01BA  291F               	ljmp	i1l820
  1127                           
  1128                           	psect	text5
  1129  0130                     __ptext5:	
  1130 ;; *************** function _ledb_on *****************
  1131 ;; Defined at:
  1132 ;;		line 75 in file "leds.c"
  1133 ;; Parameters:    Size  Location     Type
  1134 ;;  pos             1    wreg     unsigned char 
  1135 ;;  dir             1    0[COMMON] unsigned char 
  1136 ;; Auto vars:     Size  Location     Type
  1137 ;;  pos             1    3[COMMON] unsigned char 
  1138 ;; Return value:  Size  Location     Type
  1139 ;;                  1    wreg      void 
  1140 ;; Registers used:
  1141 ;;		wreg, status,2, status,0
  1142 ;; Tracked objects:
  1143 ;;		On entry : 0/0
  1144 ;;		On exit  : 0/0
  1145 ;;		Unchanged: 0/0
  1146 ;; Data sizes:     COMMON   BANK0   BANK1
  1147 ;;      Params:         1       0       0
  1148 ;;      Locals:         1       0       0
  1149 ;;      Temps:          2       0       0
  1150 ;;      Totals:         4       0       0
  1151 ;;Total ram usage:        4 bytes
  1152 ;; Hardware stack levels used:    1
  1153 ;; This function calls:
  1154 ;;		Nothing
  1155 ;; This function is called by:
  1156 ;;		_exactly_on
  1157 ;;		_timer0_interrupt
  1158 ;; This function uses a non-reentrant model
  1159 ;;
  1160                           
  1161                           
  1162                           ;psect for function _ledb_on
  1163  0130                     _ledb_on:	
  1164                           
  1165                           ;incstack = 0
  1166                           ; Regs used in _ledb_on: [wreg+status,2+status,0]
  1167                           ;ledb_on@pos stored from wreg
  1168  0130  00F3               	movwf	ledb_on@pos
  1169                           
  1170                           ;leds.c: 76: if (dir)
  1171  0131  0870               	movf	ledb_on@dir,w
  1172  0132  1903               	btfsc	3,2
  1173  0133  2943               	goto	i1l802
  1174                           
  1175                           ;leds.c: 77: PORTB |= (1u<<pos);
  1176  0134  3001               	movlw	1
  1177  0135  00F1               	movwf	??_ledb_on
  1178  0136  0A73               	incf	ledb_on@pos,w
  1179  0137  293A               	goto	u35_24
  1180  0138                     u35_25:	
  1181  0138  1003               	clrc
  1182  0139  0DF1               	rlf	??_ledb_on,f
  1183  013A                     u35_24:	
  1184  013A  3EFF               	addlw	-1
  1185  013B  1D03               	skipz
  1186  013C  2938               	goto	u35_25
  1187  013D  0871               	movf	??_ledb_on,w
  1188  013E  00F2               	movwf	??_ledb_on+1
  1189  013F  0872               	movf	??_ledb_on+1,w
  1190  0140  1283               	bcf	3,5	;RP0=0, select bank0
  1191  0141  0486               	iorwf	6,f	;volatile
  1192  0142  2952               	goto	i1l129
  1193  0143                     i1l802:	
  1194                           
  1195                           ;leds.c: 78: else
  1196                           ;leds.c: 79: PORTB &= ~(1u<<pos);
  1197  0143  3001               	movlw	1
  1198  0144  00F1               	movwf	??_ledb_on
  1199  0145  0A73               	incf	ledb_on@pos,w
  1200  0146  2949               	goto	u36_24
  1201  0147                     u36_25:	
  1202  0147  1003               	clrc
  1203  0148  0DF1               	rlf	??_ledb_on,f
  1204  0149                     u36_24:	
  1205  0149  3EFF               	addlw	-1
  1206  014A  1D03               	skipz
  1207  014B  2947               	goto	u36_25
  1208  014C  0871               	movf	??_ledb_on,w
  1209  014D  3AFF               	xorlw	255
  1210  014E  00F2               	movwf	??_ledb_on+1
  1211  014F  0872               	movf	??_ledb_on+1,w
  1212  0150  1283               	bcf	3,5	;RP0=0, select bank0
  1213  0151  0586               	andwf	6,f	;volatile
  1214  0152                     i1l129:	
  1215                           
  1216                           ;leds.c: 80: TRISB = ~(1u<<pos);
  1217  0152  3001               	movlw	1
  1218  0153  00F1               	movwf	??_ledb_on
  1219  0154  0A73               	incf	ledb_on@pos,w
  1220  0155  2958               	goto	u37_24
  1221  0156                     u37_25:	
  1222  0156  1003               	clrc
  1223  0157  0DF1               	rlf	??_ledb_on,f
  1224  0158                     u37_24:	
  1225  0158  3EFF               	addlw	-1
  1226  0159  1D03               	skipz
  1227  015A  2956               	goto	u37_25
  1228  015B  0871               	movf	??_ledb_on,w
  1229  015C  3AFF               	xorlw	255
  1230  015D  1683               	bsf	3,5	;RP0=1, select bank1
  1231  015E  0086               	movwf	6	;volatile
  1232  015F  0008               	return
  1233  0160                     __end_of_ledb_on:	
  1234                           
  1235                           	psect	text6
  1236  0160                     __ptext6:	
  1237 ;; *************** function _leda_on *****************
  1238 ;; Defined at:
  1239 ;;		line 64 in file "leds.c"
  1240 ;; Parameters:    Size  Location     Type
  1241 ;;  pos             1    wreg     unsigned char 
  1242 ;;  dir             1    0[COMMON] unsigned char 
  1243 ;; Auto vars:     Size  Location     Type
  1244 ;;  pos             1    3[COMMON] unsigned char 
  1245 ;; Return value:  Size  Location     Type
  1246 ;;                  1    wreg      void 
  1247 ;; Registers used:
  1248 ;;		wreg, status,2, status,0
  1249 ;; Tracked objects:
  1250 ;;		On entry : 0/0
  1251 ;;		On exit  : 0/0
  1252 ;;		Unchanged: 0/0
  1253 ;; Data sizes:     COMMON   BANK0   BANK1
  1254 ;;      Params:         1       0       0
  1255 ;;      Locals:         1       0       0
  1256 ;;      Temps:          2       0       0
  1257 ;;      Totals:         4       0       0
  1258 ;;Total ram usage:        4 bytes
  1259 ;; Hardware stack levels used:    1
  1260 ;; This function calls:
  1261 ;;		Nothing
  1262 ;; This function is called by:
  1263 ;;		_exactly_on
  1264 ;;		_timer0_interrupt
  1265 ;; This function uses a non-reentrant model
  1266 ;;
  1267                           
  1268                           
  1269                           ;psect for function _leda_on
  1270  0160                     _leda_on:	
  1271                           
  1272                           ;incstack = 0
  1273                           ; Regs used in _leda_on: [wreg+status,2+status,0]
  1274                           ;leda_on@pos stored from wreg
  1275  0160  00F3               	movwf	leda_on@pos
  1276                           
  1277                           ;leds.c: 65: if (dir)
  1278  0161  0870               	movf	leda_on@dir,w
  1279  0162  1903               	btfsc	3,2
  1280  0163  2973               	goto	i1l796
  1281                           
  1282                           ;leds.c: 66: PORTA |= (1u<<pos);
  1283  0164  3001               	movlw	1
  1284  0165  00F1               	movwf	??_leda_on
  1285  0166  0A73               	incf	leda_on@pos,w
  1286  0167  296A               	goto	u31_24
  1287  0168                     u31_25:	
  1288  0168  1003               	clrc
  1289  0169  0DF1               	rlf	??_leda_on,f
  1290  016A                     u31_24:	
  1291  016A  3EFF               	addlw	-1
  1292  016B  1D03               	skipz
  1293  016C  2968               	goto	u31_25
  1294  016D  0871               	movf	??_leda_on,w
  1295  016E  00F2               	movwf	??_leda_on+1
  1296  016F  0872               	movf	??_leda_on+1,w
  1297  0170  1283               	bcf	3,5	;RP0=0, select bank0
  1298  0171  0485               	iorwf	5,f	;volatile
  1299  0172  2982               	goto	i1l124
  1300  0173                     i1l796:	
  1301                           
  1302                           ;leds.c: 67: else
  1303                           ;leds.c: 68: PORTA &= ~(1u<<pos);
  1304  0173  3001               	movlw	1
  1305  0174  00F1               	movwf	??_leda_on
  1306  0175  0A73               	incf	leda_on@pos,w
  1307  0176  2979               	goto	u32_24
  1308  0177                     u32_25:	
  1309  0177  1003               	clrc
  1310  0178  0DF1               	rlf	??_leda_on,f
  1311  0179                     u32_24:	
  1312  0179  3EFF               	addlw	-1
  1313  017A  1D03               	skipz
  1314  017B  2977               	goto	u32_25
  1315  017C  0871               	movf	??_leda_on,w
  1316  017D  3AFF               	xorlw	255
  1317  017E  00F2               	movwf	??_leda_on+1
  1318  017F  0872               	movf	??_leda_on+1,w
  1319  0180  1283               	bcf	3,5	;RP0=0, select bank0
  1320  0181  0585               	andwf	5,f	;volatile
  1321  0182                     i1l124:	
  1322                           
  1323                           ;leds.c: 69: TRISA = ~(1u<<pos);
  1324  0182  3001               	movlw	1
  1325  0183  00F1               	movwf	??_leda_on
  1326  0184  0A73               	incf	leda_on@pos,w
  1327  0185  2988               	goto	u33_24
  1328  0186                     u33_25:	
  1329  0186  1003               	clrc
  1330  0187  0DF1               	rlf	??_leda_on,f
  1331  0188                     u33_24:	
  1332  0188  3EFF               	addlw	-1
  1333  0189  1D03               	skipz
  1334  018A  2986               	goto	u33_25
  1335  018B  0871               	movf	??_leda_on,w
  1336  018C  3AFF               	xorlw	255
  1337  018D  1683               	bsf	3,5	;RP0=1, select bank1
  1338  018E  0085               	movwf	5	;volatile
  1339  018F  0008               	return
  1340  0190                     __end_of_leda_on:	
  1341                           
  1342                           	psect	text7
  1343  01BB                     __ptext7:	
  1344 ;; *************** function _all_off *****************
  1345 ;; Defined at:
  1346 ;;		line 56 in file "leds.c"
  1347 ;; Parameters:    Size  Location     Type
  1348 ;;		None
  1349 ;; Auto vars:     Size  Location     Type
  1350 ;;		None
  1351 ;; Return value:  Size  Location     Type
  1352 ;;                  1    wreg      void 
  1353 ;; Registers used:
  1354 ;;		wreg, status,2, status,0
  1355 ;; Tracked objects:
  1356 ;;		On entry : 0/0
  1357 ;;		On exit  : 0/0
  1358 ;;		Unchanged: 0/0
  1359 ;; Data sizes:     COMMON   BANK0   BANK1
  1360 ;;      Params:         0       0       0
  1361 ;;      Locals:         0       0       0
  1362 ;;      Temps:          1       0       0
  1363 ;;      Totals:         1       0       0
  1364 ;;Total ram usage:        1 bytes
  1365 ;; Hardware stack levels used:    1
  1366 ;; This function calls:
  1367 ;;		Nothing
  1368 ;; This function is called by:
  1369 ;;		_exactly_on
  1370 ;;		_timer0_interrupt
  1371 ;; This function uses a non-reentrant model
  1372 ;;
  1373                           
  1374                           
  1375                           ;psect for function _all_off
  1376  01BB                     _all_off:	
  1377                           
  1378                           ;leds.c: 57: TRISA |= 1 | (1 << 2) | (1 << 3);
  1379                           
  1380                           ;incstack = 0
  1381                           ; Regs used in _all_off: [wreg+status,2+status,0]
  1382  01BB  300D               	movlw	13
  1383  01BC  00F0               	movwf	??_all_off
  1384  01BD  0870               	movf	??_all_off,w
  1385  01BE  1683               	bsf	3,5	;RP0=1, select bank1
  1386  01BF  0485               	iorwf	5,f	;volatile
  1387                           
  1388                           ;leds.c: 58: TRISB |= (1 << 3);
  1389  01C0  1586               	bsf	6,3	;volatile
  1390  01C1  0008               	return
  1391  01C2                     __end_of_all_off:	
  1392  007E                     btemp	set	126	;btemp
  1393  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80      4      12
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_timer1_interrupt_decoder
    _timer1_interrupt_decoder->_exactly_on
    _exactly_on->_leda_on
    _exactly_on->_ledb_on

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                   _setup_ir_decoder
 ---------------------------------------------------------------------------------
 (1) _setup_ir_decoder                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  4     4      0    1046
                                              0 BANK0      4     4      0
           _timer1_interrupt_decoder
 ---------------------------------------------------------------------------------
 (3) _timer1_interrupt_decoder                             7     7      0    1046
                                              5 COMMON     7     7      0
                         _exactly_on
 ---------------------------------------------------------------------------------
 (4) _exactly_on                                           1     1      0    1046
                                              4 COMMON     1     1      0
                            _all_off
                            _leda_on
                            _ledb_on
 ---------------------------------------------------------------------------------
 (5) _ledb_on                                              4     3      1     300
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (5) _leda_on                                              4     3      1     724
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (5) _all_off                                              1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setup_ir_decoder

 _ISR (ROOT)
   _timer1_interrupt_decoder
     _exactly_on
       _all_off
       _leda_on
       _ledb_on

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK1               20      0       0       5        0.0%
BITBANK1            20      0       0       7        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      4       C       4       15.0%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      C       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      1A       8        0.0%
ABS                  0      0      1A       6        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri May 18 23:31:02 2018

             _timer1_interrupt_decoder 001D                                      pc 0002  
                          __CFG_CP$OFF 0000                                     l84 01C8  
                                   fsr 0004                                    _ISR 0190  
                                  fsr0 0004                           __CFG_FOSC$XT 0000  
                                 ?_ISR 0070                                   i1l36 0027  
                                 i1l79 0196  timer1_interrupt_decoder@decoder_state 0025  
                                 _main 01C7                                   btemp 007E  
                                 start 000F                                  ??_ISR 0027  
                                ?_main 0070                          __CFG_WDTE$OFF 0000  
                                i1l124 0182                                  i1l129 0152  
                                i1l802 0143                                  i1l810 0108  
                                i1l820 011F                                  i1l812 010C  
                                i1l814 0111                                  i1l806 0100  
                                i1l910 0081                                  i1l902 0079  
                                i1l816 0116                                  i1l808 0104  
                                i1l824 0124                                  i1l904 007B  
                                i1l818 011B                                  i1l930 00D9  
                                i1l924 00B3                                  i1l942 00EB  
                                i1l934 00DB                                  i1l918 008B  
                                i1l854 003D                                  i1l846 0033  
                                i1l880 005F                                  i1l864 004B  
                                i1l890 0067                                  i1l796 0173  
                                i1l884 0061                                  i1l876 0057  
                                i1l868 004D                                  i1l948 00F1  
                                i1l898 0071                                  u31_24 016A  
                                u31_25 0168                                  u32_24 0179  
                                u32_25 0177                                  _TMR1H 000F  
                                u33_24 0188                                  u33_25 0186  
                                _TMR1L 000E                                  _PORTA 0005  
                                _PORTB 0006                                  u35_24 013A  
                                u35_25 0138                                  u36_24 0149  
                                u52_24 00A0                                  u36_25 0147  
                                u52_25 009D                                  u37_24 0158  
                                u37_25 0156                                  u55_24 00C8  
                                u55_25 00C5                                  _TRISA 0085  
                                _TRISB 0086                        __end_of_all_off 01C2  
                       __CFG_BODENV$40 0000                        __end_of_leda_on 0190  
                      __end_of_ledb_on 0160                         __CFG_BOREN$OFF 0000  
                                pclath 000A                                  status 0003  
                                wtemp0 007E                        __initialization 0010  
                         __end_of_main 01C9                                 ??_main 002B  
                        _ir_data_valid 0026                                 i1S1036 01C2  
                               i1S1038 01B3              __size_of_setup_ir_decoder 0011  
                       __CFG_PWRTE$OFF 0000                    timer0_interrupt@pos 0024  
                            ??_all_off 0070                              ??_leda_on 0071  
                            ??_ledb_on 0071                                 saved_w 007E  
           ??_timer1_interrupt_decoder 0075                __end_of__initialization 001B  
                       __pcstackCOMMON 0070                           __pidataBANK0 01C9  
                       _OPTION_REGbits 0081                             __pbssBANK0 0020  
                           __pmaintext 01C7                             __pintentry 0004  
                     _setup_ir_decoder 01A2                             _exactly_on 00FD  
                              _all_off 01BB      timer1_interrupt_decoder@bit_count 007D  
                              __ptext1 01A2                                __ptext2 0190  
                              __ptext3 001D                                __ptext4 00FD  
                              __ptext5 0130                                __ptext6 0160  
                              __ptext7 01BB                                _leda_on 0160  
                              _ledb_on 0130                           __size_of_ISR 0012  
                            _T1CONbits 0010                                _ir_data 0020  
                 end_of_initialization 001B       __end_of_timer1_interrupt_decoder 00FD  
                            _PORTBbits 0006                              _TRISBbits 0086  
                           leda_on@dir 0070                             leda_on@pos 0073  
                           ledb_on@dir 0070                             ledb_on@pos 0073  
                          ?_exactly_on 0070                    start_initialization 0010  
                          __end_of_ISR 01A2    timer1_interrupt_decoder@state_timer 007C  
                          __pdataBANK0 002B      __size_of_timer1_interrupt_decoder 00E0  
            ?_timer1_interrupt_decoder 0070               __end_of_setup_ir_decoder 01B3  
                          __pbssCOMMON 007C                              ___latbits 0000  
                        __pcstackBANK0 0027                    __size_of_exactly_on 0033  
                      exactly_on@which 0074                               ?_all_off 0070  
                            __pswtext1 01C2                              __pswtext2 01B3  
                             ?_leda_on 0070                               ?_ledb_on 0070  
                    interrupt_function 0004                               _PIE1bits 008C  
                            _move_leds 002B                               _PIR1bits 000C  
                         ??_exactly_on 0074                       __size_of_all_off 0007  
                     __size_of_leda_on 0030                       __size_of_ledb_on 0030  
                   __end_of_exactly_on 0130                          __size_of_main 0002  
                    ?_setup_ir_decoder 0070                             _INTCONbits 000B  
                   ??_setup_ir_decoder 002B                               intlevel1 0000  
